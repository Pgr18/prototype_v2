
prototype_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f85c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800f9f0  0800f9f0  000109f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fde8  0800fde8  000117b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fde8  0800fde8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdf0  0800fdf0  000117b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fdf0  0800fdf0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fdf8  0800fdf8  00010df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007b0  20000000  0800fdfc  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000117b0  2**0
                  CONTENTS
 10 .bss          000020c8  200007b0  200007b0  000117b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20002878  20002878  000117b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000117b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019428  00000000  00000000  000117e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be6  00000000  00000000  0002ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0002e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001132  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002516a  00000000  00000000  00030f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0a7  00000000  00000000  000560dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b28  00000000  00000000  00071183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143cab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070f8  00000000  00000000  00143cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0014ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007b0 	.word	0x200007b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f9d4 	.word	0x0800f9d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007b4 	.word	0x200007b4
 80001cc:	0800f9d4 	.word	0x0800f9d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MCU_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MCU_init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_OK_GPIO_Port,LED_OK_Pin,GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2101      	movs	r1, #1
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <MCU_init+0x48>)
 8000f42:	f001 fd83 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port,LED_ERR_Pin,GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2102      	movs	r1, #2
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MCU_init+0x48>)
 8000f4c:	f001 fd7e 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MEAS_POS_SEL_GPIO_Port,MEAS_POS_SEL_Pin,GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f56:	480a      	ldr	r0, [pc, #40]	@ (8000f80 <MCU_init+0x48>)
 8000f58:	f001 fd78 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MEAS_NEG_SEL_GPIO_Port,MEAS_NEG_SEL_Pin,GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f62:	4807      	ldr	r0, [pc, #28]	@ (8000f80 <MCU_init+0x48>)
 8000f64:	f001 fd72 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000f68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f6c:	f000 ff20 	bl	8001db0 <HAL_Delay>
	HAL_GPIO_WritePin(LED_ERR_GPIO_Port,LED_ERR_Pin,GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2102      	movs	r1, #2
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <MCU_init+0x48>)
 8000f76:	f001 fd69 	bl	8002a4c <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021800 	.word	0x40021800

08000f84 <ADC_Read>:

void ADC_Read(uint8_t adc_num)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]


	//HAL_Delay(1);
	HAL_GPIO_WritePin(nCS_CAL_SPI_GPIO_Port, nCS_CAL_SPI_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2104      	movs	r1, #4
 8000f92:	4832      	ldr	r0, [pc, #200]	@ (800105c <ADC_Read+0xd8>)
 8000f94:	f001 fd5a 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nCS_MAIN_SPI_MCU_GPIO_Port, nCS_MAIN_SPI_MCU_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	482f      	ldr	r0, [pc, #188]	@ (800105c <ADC_Read+0xd8>)
 8000f9e:	f001 fd55 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(CONV_MAIN_SPI_MCU_GPIO_Port, CONV_MAIN_SPI_MCU_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	482d      	ldr	r0, [pc, #180]	@ (800105c <ADC_Read+0xd8>)
 8000fa8:	f001 fd50 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(CONV_MAIN_SPI_MCU_GPIO_Port, CONV_MAIN_SPI_MCU_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2102      	movs	r1, #2
 8000fb0:	482a      	ldr	r0, [pc, #168]	@ (800105c <ADC_Read+0xd8>)
 8000fb2:	f001 fd4b 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	//switch (adc_num)
	//{
	//case 1:
	HAL_GPIO_WritePin(nCS_CAL_SPI_GPIO_Port, nCS_CAL_SPI_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4828      	ldr	r0, [pc, #160]	@ (800105c <ADC_Read+0xd8>)
 8000fbc:	f001 fd46 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_SPI_Receive(&hspi3, adc_buf, 2, -1);
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	4926      	ldr	r1, [pc, #152]	@ (8001060 <ADC_Read+0xdc>)
 8000fc8:	4826      	ldr	r0, [pc, #152]	@ (8001064 <ADC_Read+0xe0>)
 8000fca:	f003 fccc 	bl	8004966 <HAL_SPI_Receive>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(nCS_CAL_SPI_GPIO_Port, nCS_CAL_SPI_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4822      	ldr	r0, [pc, #136]	@ (800105c <ADC_Read+0xd8>)
 8000fd4:	f001 fd3a 	bl	8002a4c <HAL_GPIO_WritePin>
	uint16_t raw1 = ((uint16_t) (adc_buf[0]<<8)) | ((uint16_t) adc_buf[1]);
 8000fd8:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <ADC_Read+0xdc>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8001060 <ADC_Read+0xdc>)
 8000fe2:	7852      	ldrb	r2, [r2, #1]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	81fb      	strh	r3, [r7, #14]
	int16_t * raw_s1 =  (int16_t *) (&raw1);
 8000fea:	f107 030e 	add.w	r3, r7, #14
 8000fee:	617b      	str	r3, [r7, #20]
	rx_val[0] =  (*raw_s1);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <ADC_Read+0xe4>)
 8000ff8:	801a      	strh	r2, [r3, #0]
	//	break;
	//case 0:
	HAL_GPIO_WritePin(nCS_MAIN_SPI_MCU_GPIO_Port, nCS_MAIN_SPI_MCU_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4817      	ldr	r0, [pc, #92]	@ (800105c <ADC_Read+0xd8>)
 8001000:	f001 fd24 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_SPI_Receive(&hspi3, adc_buf, 2, -1);
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	2202      	movs	r2, #2
 800100a:	4915      	ldr	r1, [pc, #84]	@ (8001060 <ADC_Read+0xdc>)
 800100c:	4815      	ldr	r0, [pc, #84]	@ (8001064 <ADC_Read+0xe0>)
 800100e:	f003 fcaa 	bl	8004966 <HAL_SPI_Receive>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(nCS_MAIN_SPI_MCU_GPIO_Port, nCS_MAIN_SPI_MCU_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2101      	movs	r1, #1
 8001016:	4811      	ldr	r0, [pc, #68]	@ (800105c <ADC_Read+0xd8>)
 8001018:	f001 fd18 	bl	8002a4c <HAL_GPIO_WritePin>
	uint16_t raw = ((uint16_t) (adc_buf[0]<<8)) | ((uint16_t) adc_buf[1]);
 800101c:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <ADC_Read+0xdc>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b29b      	uxth	r3, r3
 8001024:	4a0e      	ldr	r2, [pc, #56]	@ (8001060 <ADC_Read+0xdc>)
 8001026:	7852      	ldrb	r2, [r2, #1]
 8001028:	4313      	orrs	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	81bb      	strh	r3, [r7, #12]
	int16_t * raw_s =  (int16_t *) (&raw);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	613b      	str	r3, [r7, #16]
	rx_val[1] =  (*raw_s);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	f9b3 2000 	ldrsh.w	r2, [r3]
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <ADC_Read+0xe4>)
 800103c:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(CONV_MAIN_SPI_MCU_GPIO_Port, CONV_MAIN_SPI_MCU_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <ADC_Read+0xd8>)
 8001044:	f001 fd02 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(CONV_MAIN_SPI_MCU_GPIO_Port, CONV_MAIN_SPI_MCU_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2102      	movs	r1, #2
 800104c:	4803      	ldr	r0, [pc, #12]	@ (800105c <ADC_Read+0xd8>)
 800104e:	f001 fcfd 	bl	8002a4c <HAL_GPIO_WritePin>
	//			HAL_GPIO_WritePin(nCS_MAIN_SPI_MCU_GPIO_Port, nCS_MAIN_SPI_MCU_Pin, GPIO_PIN_RESET);
	//			HAL_SPI_Receive(&hspi3, adc_buf, 2, 100);
	//			rx_val[1] =  (uint16_t) (((uint16_t) adc_buf[0]<<8) | ((uint16_t) adc_buf[1]));
	//

}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020c00 	.word	0x40020c00
 8001060:	2000096c 	.word	0x2000096c
 8001064:	20000824 	.word	0x20000824
 8001068:	20000978 	.word	0x20000978

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b092      	sub	sp, #72	@ 0x48
 8001070:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001072:	f000 fe2b 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001076:	f000 f897 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107a:	f000 fa53 	bl	8001524 <MX_GPIO_Init>
  MX_DMA_Init();
 800107e:	f000 fa31 	bl	80014e4 <MX_DMA_Init>
  MX_SPI1_Init();
 8001082:	f000 f8fb 	bl	800127c <MX_SPI1_Init>
  MX_UART4_Init();
 8001086:	f000 fa03 	bl	8001490 <MX_UART4_Init>
  MX_SPI3_Init();
 800108a:	f000 f92d 	bl	80012e8 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 800108e:	f009 fa0d 	bl	800a4ac <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001092:	f000 f961 	bl	8001358 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	MCU_init();
 8001096:	f7ff ff4f 	bl	8000f38 <MCU_init>
	HAL_TIM_Base_Start_IT(&htim1);
 800109a:	483c      	ldr	r0, [pc, #240]	@ (800118c <main+0x120>)
 800109c:	f004 f8b8 	bl	8005210 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (adc_fl)
 80010a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <main+0x124>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0fb      	beq.n	80010a0 <main+0x34>
		{
			HAL_TIM_Base_Stop_IT(&htim1);
 80010a8:	4838      	ldr	r0, [pc, #224]	@ (800118c <main+0x120>)
 80010aa:	f004 f921 	bl	80052f0 <HAL_TIM_Base_Stop_IT>
			char adc_str[64];
			ADC_Read(1);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff ff68 	bl	8000f84 <ADC_Read>
			adc_res[0] = (float) rx_val[0]*2.5/32768;//
 80010b4:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <main+0x128>)
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff fa3f 	bl	8000548 <__aeabi_f2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b32      	ldr	r3, [pc, #200]	@ (8001198 <main+0x12c>)
 80010d0:	f7ff fa92 	bl	80005f8 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <main+0x130>)
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd5b 	bl	8000ba8 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a2a      	ldr	r2, [pc, #168]	@ (80011a0 <main+0x134>)
 80010f6:	6013      	str	r3, [r2, #0]
			adc_res[1] = (float) rx_val[1]*2.5/32768;//
 80010f8:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <main+0x128>)
 80010fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee17 0a90 	vmov	r0, s15
 800110a:	f7ff fa1d 	bl	8000548 <__aeabi_f2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <main+0x12c>)
 8001114:	f7ff fa70 	bl	80005f8 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <main+0x130>)
 8001126:	f7ff fb91 	bl	800084c <__aeabi_ddiv>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd39 	bl	8000ba8 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <main+0x134>)
 800113a:	6053      	str	r3, [r2, #4]
			//HAL_Delay(1);

			sprintf(adc_str,"%f, %f\n",adc_res[0],adc_res[1]);
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <main+0x134>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <main+0x134>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f9fa 	bl	8000548 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4638      	mov	r0, r7
 800115a:	e9cd 2300 	strd	r2, r3, [sp]
 800115e:	4622      	mov	r2, r4
 8001160:	462b      	mov	r3, r5
 8001162:	4910      	ldr	r1, [pc, #64]	@ (80011a4 <main+0x138>)
 8001164:	f009 ffce 	bl	800b104 <sprintf>
			CDC_Transmit_HS(adc_str, strlen(adc_str));
 8001168:	463b      	mov	r3, r7
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f830 	bl	80001d0 <strlen>
 8001170:	4602      	mov	r2, r0
 8001172:	463b      	mov	r3, r7
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f009 fa56 	bl	800a628 <CDC_Transmit_HS>
			adc_fl = 0;
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <main+0x124>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8001182:	4802      	ldr	r0, [pc, #8]	@ (800118c <main+0x120>)
 8001184:	f004 f844 	bl	8005210 <HAL_TIM_Base_Start_IT>
		if (adc_fl)
 8001188:	e78a      	b.n	80010a0 <main+0x34>
 800118a:	bf00      	nop
 800118c:	200008dc 	.word	0x200008dc
 8001190:	2000097c 	.word	0x2000097c
 8001194:	20000978 	.word	0x20000978
 8001198:	40040000 	.word	0x40040000
 800119c:	40e00000 	.word	0x40e00000
 80011a0:	20000970 	.word	0x20000970
 80011a4:	0800f9f0 	.word	0x0800f9f0

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	@ 0x50
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2230      	movs	r2, #48	@ 0x30
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00a f807 	bl	800b1ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <SystemClock_Config+0xcc>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	4a27      	ldr	r2, [pc, #156]	@ (8001274 <SystemClock_Config+0xcc>)
 80011d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011da:	6413      	str	r3, [r2, #64]	@ 0x40
 80011dc:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <SystemClock_Config+0xcc>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <SystemClock_Config+0xd0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a21      	ldr	r2, [pc, #132]	@ (8001278 <SystemClock_Config+0xd0>)
 80011f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <SystemClock_Config+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001204:	2301      	movs	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001208:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001212:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001218:	2304      	movs	r3, #4
 800121a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800121c:	23a8      	movs	r3, #168	@ 0xa8
 800121e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001224:	2304      	movs	r3, #4
 8001226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fe79 	bl	8003f24 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001238:	f000 fa30 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2302      	movs	r3, #2
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001248:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001252:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2105      	movs	r1, #5
 800125a:	4618      	mov	r0, r3
 800125c:	f003 f8da 	bl	8004414 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001266:	f000 fa19 	bl	800169c <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3750      	adds	r7, #80	@ 0x50
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000

0800127c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_SPI1_Init+0x64>)
 8001282:	4a18      	ldr	r2, [pc, #96]	@ (80012e4 <MX_SPI1_Init+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_SPI1_Init+0x64>)
 8001288:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_SPI1_Init+0x64>)
 800129c:	2202      	movs	r2, #2
 800129e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012b0:	2210      	movs	r2, #16
 80012b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012c8:	220a      	movs	r2, #10
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012ce:	f003 fac1 	bl	8004854 <HAL_SPI_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012d8:	f000 f9e0 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200007cc 	.word	0x200007cc
 80012e4:	40013000 	.word	0x40013000

080012e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <MX_SPI3_Init+0x68>)
 80012ee:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <MX_SPI3_Init+0x6c>)
 80012f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_SPI3_Init+0x68>)
 80012f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_SPI3_Init+0x68>)
 80012fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001300:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_SPI3_Init+0x68>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_SPI3_Init+0x68>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_SPI3_Init+0x68>)
 8001310:	2201      	movs	r2, #1
 8001312:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_SPI3_Init+0x68>)
 8001316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800131a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_SPI3_Init+0x68>)
 800131e:	2228      	movs	r2, #40	@ 0x28
 8001320:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <MX_SPI3_Init+0x68>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_SPI3_Init+0x68>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <MX_SPI3_Init+0x68>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <MX_SPI3_Init+0x68>)
 8001336:	220a      	movs	r2, #10
 8001338:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_SPI3_Init+0x68>)
 800133c:	f003 fa8a 	bl	8004854 <HAL_SPI_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001346:	f000 f9a9 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000824 	.word	0x20000824
 8001354:	40003c00 	.word	0x40003c00

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	@ 0x58
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2220      	movs	r2, #32
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f009 ff1a 	bl	800b1ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001396:	4b3c      	ldr	r3, [pc, #240]	@ (8001488 <MX_TIM1_Init+0x130>)
 8001398:	4a3c      	ldr	r2, [pc, #240]	@ (800148c <MX_TIM1_Init+0x134>)
 800139a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800139c:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <MX_TIM1_Init+0x130>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b39      	ldr	r3, [pc, #228]	@ (8001488 <MX_TIM1_Init+0x130>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 80013a8:	4b37      	ldr	r3, [pc, #220]	@ (8001488 <MX_TIM1_Init+0x130>)
 80013aa:	22d2      	movs	r2, #210	@ 0xd2
 80013ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <MX_TIM1_Init+0x130>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b4:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <MX_TIM1_Init+0x130>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b33      	ldr	r3, [pc, #204]	@ (8001488 <MX_TIM1_Init+0x130>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013c0:	4831      	ldr	r0, [pc, #196]	@ (8001488 <MX_TIM1_Init+0x130>)
 80013c2:	f003 fed5 	bl	8005170 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013cc:	f000 f966 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013da:	4619      	mov	r1, r3
 80013dc:	482a      	ldr	r0, [pc, #168]	@ (8001488 <MX_TIM1_Init+0x130>)
 80013de:	f004 f95b 	bl	8005698 <HAL_TIM_ConfigClockSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013e8:	f000 f958 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80013ec:	4826      	ldr	r0, [pc, #152]	@ (8001488 <MX_TIM1_Init+0x130>)
 80013ee:	f003 ffae 	bl	800534e <HAL_TIM_OC_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013f8:	f000 f950 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001404:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001408:	4619      	mov	r1, r3
 800140a:	481f      	ldr	r0, [pc, #124]	@ (8001488 <MX_TIM1_Init+0x130>)
 800140c:	f004 fd34 	bl	8005e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001416:	f000 f941 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001426:	2300      	movs	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	4812      	ldr	r0, [pc, #72]	@ (8001488 <MX_TIM1_Init+0x130>)
 8001440:	f004 f8ce 	bl	80055e0 <HAL_TIM_OC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800144a:	f000 f927 	bl	800169c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001462:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001466:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_TIM1_Init+0x130>)
 8001472:	f004 fd7d 	bl	8005f70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800147c:	f000 f90e 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3758      	adds	r7, #88	@ 0x58
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200008dc 	.word	0x200008dc
 800148c:	40010000 	.word	0x40010000

08001490 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_UART4_Init+0x4c>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <MX_UART4_Init+0x50>)
 8001498:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <MX_UART4_Init+0x4c>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_UART4_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_UART4_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_UART4_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_UART4_Init+0x4c>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_UART4_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_UART4_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_UART4_Init+0x4c>)
 80014c8:	f004 fdb8 	bl	800603c <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80014d2:	f000 f8e3 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000924 	.word	0x20000924
 80014e0:	40004c00 	.word	0x40004c00

080014e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_DMA_Init+0x3c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <MX_DMA_Init+0x3c>)
 80014f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_DMA_Init+0x3c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	203b      	movs	r0, #59	@ 0x3b
 800150c:	f000 fd4f 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001510:	203b      	movs	r0, #59	@ 0x3b
 8001512:	f000 fd68 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	@ 0x30
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	4b52      	ldr	r3, [pc, #328]	@ (8001688 <MX_GPIO_Init+0x164>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a51      	ldr	r2, [pc, #324]	@ (8001688 <MX_GPIO_Init+0x164>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b4f      	ldr	r3, [pc, #316]	@ (8001688 <MX_GPIO_Init+0x164>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	4b4b      	ldr	r3, [pc, #300]	@ (8001688 <MX_GPIO_Init+0x164>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a4a      	ldr	r2, [pc, #296]	@ (8001688 <MX_GPIO_Init+0x164>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b48      	ldr	r3, [pc, #288]	@ (8001688 <MX_GPIO_Init+0x164>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b44      	ldr	r3, [pc, #272]	@ (8001688 <MX_GPIO_Init+0x164>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a43      	ldr	r2, [pc, #268]	@ (8001688 <MX_GPIO_Init+0x164>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b41      	ldr	r3, [pc, #260]	@ (8001688 <MX_GPIO_Init+0x164>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b3d      	ldr	r3, [pc, #244]	@ (8001688 <MX_GPIO_Init+0x164>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a3c      	ldr	r2, [pc, #240]	@ (8001688 <MX_GPIO_Init+0x164>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b3a      	ldr	r3, [pc, #232]	@ (8001688 <MX_GPIO_Init+0x164>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <MX_GPIO_Init+0x164>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a35      	ldr	r2, [pc, #212]	@ (8001688 <MX_GPIO_Init+0x164>)
 80015b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <MX_GPIO_Init+0x164>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <MX_GPIO_Init+0x164>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001688 <MX_GPIO_Init+0x164>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <MX_GPIO_Init+0x164>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_RESET_GPIO_Port, USB_RESET_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2104      	movs	r1, #4
 80015e6:	4829      	ldr	r0, [pc, #164]	@ (800168c <MX_GPIO_Init+0x168>)
 80015e8:	f001 fa30 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_OK_Pin|LED_ERR_Pin|CUR_POS_SEL_Pin|MEAS_POS_SEL_Pin
 80015ec:	2200      	movs	r2, #0
 80015ee:	f647 0103 	movw	r1, #30723	@ 0x7803
 80015f2:	4827      	ldr	r0, [pc, #156]	@ (8001690 <MX_GPIO_Init+0x16c>)
 80015f4:	f001 fa2a 	bl	8002a4c <HAL_GPIO_WritePin>
                          |MEAS_NEG_SEL_Pin|CUR_NEG_SEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_MAIN_SPI_MCU_Pin|CONV_MAIN_SPI_MCU_Pin|nCS_CAL_SPI_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2107      	movs	r1, #7
 80015fc:	4825      	ldr	r0, [pc, #148]	@ (8001694 <MX_GPIO_Init+0x170>)
 80015fe:	f001 fa25 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEN_FSYNC_MCU_GPIO_Port, GEN_FSYNC_MCU_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2110      	movs	r1, #16
 8001606:	4824      	ldr	r0, [pc, #144]	@ (8001698 <MX_GPIO_Init+0x174>)
 8001608:	f001 fa20 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_RESET_Pin */
  GPIO_InitStruct.Pin = USB_RESET_Pin;
 800160c:	2304      	movs	r3, #4
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_RESET_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	481a      	ldr	r0, [pc, #104]	@ (800168c <MX_GPIO_Init+0x168>)
 8001624:	f001 f876 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_OK_Pin LED_ERR_Pin CUR_POS_SEL_Pin MEAS_POS_SEL_Pin
                           MEAS_NEG_SEL_Pin CUR_NEG_SEL_Pin */
  GPIO_InitStruct.Pin = LED_OK_Pin|LED_ERR_Pin|CUR_POS_SEL_Pin|MEAS_POS_SEL_Pin
 8001628:	f647 0303 	movw	r3, #30723	@ 0x7803
 800162c:	61fb      	str	r3, [r7, #28]
                          |MEAS_NEG_SEL_Pin|CUR_NEG_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4813      	ldr	r0, [pc, #76]	@ (8001690 <MX_GPIO_Init+0x16c>)
 8001642:	f001 f867 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : nCS_MAIN_SPI_MCU_Pin CONV_MAIN_SPI_MCU_Pin nCS_CAL_SPI_Pin */
  GPIO_InitStruct.Pin = nCS_MAIN_SPI_MCU_Pin|CONV_MAIN_SPI_MCU_Pin|nCS_CAL_SPI_Pin;
 8001646:	2307      	movs	r3, #7
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	480d      	ldr	r0, [pc, #52]	@ (8001694 <MX_GPIO_Init+0x170>)
 800165e:	f001 f859 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : GEN_FSYNC_MCU_Pin */
  GPIO_InitStruct.Pin = GEN_FSYNC_MCU_Pin;
 8001662:	2310      	movs	r3, #16
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GEN_FSYNC_MCU_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4807      	ldr	r0, [pc, #28]	@ (8001698 <MX_GPIO_Init+0x174>)
 800167a:	f001 f84b 	bl	8002714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000
 8001690:	40021800 	.word	0x40021800
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40020400 	.word	0x40020400

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <Error_Handler+0x8>

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	@ 0x30
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a59      	ldr	r2, [pc, #356]	@ (800187c <HAL_SPI_MspInit+0x184>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d179      	bne.n	800180e <HAL_SPI_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	4b58      	ldr	r3, [pc, #352]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	4a57      	ldr	r2, [pc, #348]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 8001724:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001728:	6453      	str	r3, [r2, #68]	@ 0x44
 800172a:	4b55      	ldr	r3, [pc, #340]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b51      	ldr	r3, [pc, #324]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a50      	ldr	r2, [pc, #320]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b4e      	ldr	r3, [pc, #312]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b4a      	ldr	r3, [pc, #296]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a49      	ldr	r2, [pc, #292]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b47      	ldr	r3, [pc, #284]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800176e:	2380      	movs	r3, #128	@ 0x80
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177e:	2305      	movs	r3, #5
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	483e      	ldr	r0, [pc, #248]	@ (8001884 <HAL_SPI_MspInit+0x18c>)
 800178a:	f000 ffc3 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800178e:	2308      	movs	r3, #8
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800179e:	2305      	movs	r3, #5
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4837      	ldr	r0, [pc, #220]	@ (8001888 <HAL_SPI_MspInit+0x190>)
 80017aa:	f000 ffb3 	bl	8002714 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80017ae:	4b37      	ldr	r3, [pc, #220]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017b0:	4a37      	ldr	r2, [pc, #220]	@ (8001890 <HAL_SPI_MspInit+0x198>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80017b4:	4b35      	ldr	r3, [pc, #212]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017b6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80017ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017bc:	4b33      	ldr	r3, [pc, #204]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017be:	2240      	movs	r2, #64	@ 0x40
 80017c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c8:	4b30      	ldr	r3, [pc, #192]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d0:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d6:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017e2:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017f0:	4826      	ldr	r0, [pc, #152]	@ (800188c <HAL_SPI_MspInit+0x194>)
 80017f2:	f000 fc13 	bl	800201c <HAL_DMA_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80017fc:	f7ff ff4e 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a22      	ldr	r2, [pc, #136]	@ (800188c <HAL_SPI_MspInit+0x194>)
 8001804:	649a      	str	r2, [r3, #72]	@ 0x48
 8001806:	4a21      	ldr	r2, [pc, #132]	@ (800188c <HAL_SPI_MspInit+0x194>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800180c:	e031      	b.n	8001872 <HAL_SPI_MspInit+0x17a>
  else if(hspi->Instance==SPI3)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a20      	ldr	r2, [pc, #128]	@ (8001894 <HAL_SPI_MspInit+0x19c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d12c      	bne.n	8001872 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 8001822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001826:	6413      	str	r3, [r2, #64]	@ 0x40
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	4a10      	ldr	r2, [pc, #64]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6313      	str	r3, [r2, #48]	@ 0x30
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_SPI_MspInit+0x188>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001850:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001862:	2306      	movs	r3, #6
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	480a      	ldr	r0, [pc, #40]	@ (8001898 <HAL_SPI_MspInit+0x1a0>)
 800186e:	f000 ff51 	bl	8002714 <HAL_GPIO_Init>
}
 8001872:	bf00      	nop
 8001874:	3730      	adds	r7, #48	@ 0x30
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40013000 	.word	0x40013000
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000
 8001888:	40020400 	.word	0x40020400
 800188c:	2000087c 	.word	0x2000087c
 8001890:	40026458 	.word	0x40026458
 8001894:	40003c00 	.word	0x40003c00
 8001898:	40020800 	.word	0x40020800

0800189c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001914 <HAL_TIM_Base_MspInit+0x78>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12d      	bne.n	800190a <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_TIM_Base_MspInit+0x7c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	4a18      	ldr	r2, [pc, #96]	@ (8001918 <HAL_TIM_Base_MspInit+0x7c>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <HAL_TIM_Base_MspInit+0x7c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2018      	movs	r0, #24
 80018d0:	f000 fb6d 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80018d4:	2018      	movs	r0, #24
 80018d6:	f000 fb86 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2019      	movs	r0, #25
 80018e0:	f000 fb65 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018e4:	2019      	movs	r0, #25
 80018e6:	f000 fb7e 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201a      	movs	r0, #26
 80018f0:	f000 fb5d 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80018f4:	201a      	movs	r0, #26
 80018f6:	f000 fb76 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	201b      	movs	r0, #27
 8001900:	f000 fb55 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001904:	201b      	movs	r0, #27
 8001906:	f000 fb6e 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40010000 	.word	0x40010000
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <HAL_UART_MspInit+0x94>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d133      	bne.n	80019a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001948:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_UART_MspInit+0x98>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001976:	2303      	movs	r3, #3
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001986:	2308      	movs	r3, #8
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4809      	ldr	r0, [pc, #36]	@ (80019b8 <HAL_UART_MspInit+0x9c>)
 8001992:	f000 febf 	bl	8002714 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2034      	movs	r0, #52	@ 0x34
 800199c:	f000 fb07 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019a0:	2034      	movs	r0, #52	@ 0x34
 80019a2:	f000 fb20 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	@ 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40004c00 	.word	0x40004c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <NMI_Handler+0x4>

080019c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <MemManage_Handler+0x4>

080019d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a12:	f000 f9ad 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	adc_fl = 1;
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a26:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001a28:	f003 fcea 	bl	8005400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000097c 	.word	0x2000097c
 8001a34:	200008dc 	.word	0x200008dc

08001a38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	adc_fl = 1;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a42:	4803      	ldr	r0, [pc, #12]	@ (8001a50 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001a44:	f003 fcdc 	bl	8005400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000097c 	.word	0x2000097c
 8001a50:	200008dc 	.word	0x200008dc

08001a54 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	adc_fl = 1;
 8001a58:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a5e:	4803      	ldr	r0, [pc, #12]	@ (8001a6c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001a60:	f003 fcce 	bl	8005400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	2000097c 	.word	0x2000097c
 8001a6c:	200008dc 	.word	0x200008dc

08001a70 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	adc_fl = 1;
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <TIM1_CC_IRQHandler+0x14>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a7a:	4803      	ldr	r0, [pc, #12]	@ (8001a88 <TIM1_CC_IRQHandler+0x18>)
 8001a7c:	f003 fcc0 	bl	8005400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000097c 	.word	0x2000097c
 8001a88:	200008dc 	.word	0x200008dc

08001a8c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <UART4_IRQHandler+0x10>)
 8001a92:	f004 fb23 	bl	80060dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000924 	.word	0x20000924

08001aa0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <DMA2_Stream3_IRQHandler+0x10>)
 8001aa6:	f000 fbf9 	bl	800229c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000087c 	.word	0x2000087c

08001ab4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <OTG_HS_IRQHandler+0x10>)
 8001aba:	f001 f924 	bl	8002d06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20001e68 	.word	0x20001e68

08001ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_kill>:

int _kill(int pid, int sig)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae2:	f009 fbc1 	bl	800b268 <__errno>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2216      	movs	r2, #22
 8001aea:	601a      	str	r2, [r3, #0]
  return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_exit>:

void _exit (int status)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffe7 	bl	8001ad8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0a:	bf00      	nop
 8001b0c:	e7fd      	b.n	8001b0a <_exit+0x12>

08001b0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e00a      	b.n	8001b36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b20:	f3af 8000 	nop.w
 8001b24:	4601      	mov	r1, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf0      	blt.n	8001b20 <_read+0x12>
  }

  return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e009      	b.n	8001b6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbf1      	blt.n	8001b5a <_write+0x12>
  }
  return len;
 8001b76:	687b      	ldr	r3, [r7, #4]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_close>:

int _close(int file)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba8:	605a      	str	r2, [r3, #4]
  return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_isatty>:

int _isatty(int file)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f009 fb26 	bl	800b268 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20020000 	.word	0x20020000
 8001c48:	00000800 	.word	0x00000800
 8001c4c:	20000980 	.word	0x20000980
 8001c50:	20002878 	.word	0x20002878

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c7c:	f7ff ffea 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	@ (8001cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f009 fae5 	bl	800b274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7ff f9df 	bl	800106c <main>
  bx  lr    
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	200007b0 	.word	0x200007b0
  ldr r2, =_sidata
 8001cbc:	0800fdfc 	.word	0x0800fdfc
  ldr r2, =_sbss
 8001cc0:	200007b0 	.word	0x200007b0
  ldr r4, =_ebss
 8001cc4:	20002878 	.word	0x20002878

08001cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <HAL_Init+0x40>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <HAL_Init+0x40>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a07      	ldr	r2, [pc, #28]	@ (8001d0c <HAL_Init+0x40>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f000 f94f 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfa:	200f      	movs	r0, #15
 8001cfc:	f000 f808 	bl	8001d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d00:	f7ff fcd2 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d18:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <HAL_InitTick+0x54>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <HAL_InitTick+0x58>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f967 	bl	8002002 <HAL_SYSTICK_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00e      	b.n	8001d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	d80a      	bhi.n	8001d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d44:	2200      	movs	r2, #0
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f000 f92f 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d50:	4a06      	ldr	r2, [pc, #24]	@ (8001d6c <HAL_InitTick+0x5c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008
 8001d94:	20000984 	.word	0x20000984

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	@ (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000984 	.word	0x20000984

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff ffee 	bl	8001d98 <HAL_GetTick>
 8001dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d005      	beq.n	8001dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <HAL_Delay+0x44>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd6:	bf00      	nop
 8001dd8:	f7ff ffde 	bl	8001d98 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8f7      	bhi.n	8001dd8 <HAL_Delay+0x28>
  {
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	@ (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	@ (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	@ (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	@ 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff29 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff3e 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff31 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff feb6 	bl	8001d98 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e099      	b.n	800216c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002058:	e00f      	b.n	800207a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800205a:	f7ff fe9d 	bl	8001d98 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b05      	cmp	r3, #5
 8002066:	d908      	bls.n	800207a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2203      	movs	r2, #3
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e078      	b.n	800216c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e8      	bne.n	800205a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4b38      	ldr	r3, [pc, #224]	@ (8002174 <HAL_DMA_Init+0x158>)
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d107      	bne.n	80020e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	4313      	orrs	r3, r2
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 0307 	bic.w	r3, r3, #7
 80020fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	2b04      	cmp	r3, #4
 800210c:	d117      	bne.n	800213e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fa7b 	bl	800261c <DMA_CheckFifoParam>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	@ 0x40
 8002130:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800213a:	2301      	movs	r3, #1
 800213c:	e016      	b.n	800216c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fa32 	bl	80025b0 <DMA_CalcBaseAndBitshift>
 800214c:	4603      	mov	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002154:	223f      	movs	r2, #63	@ 0x3f
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	f010803f 	.word	0xf010803f

08002178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002186:	f7ff fe07 	bl	8001d98 <HAL_GetTick>
 800218a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d008      	beq.n	80021aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e052      	b.n	8002250 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0216 	bic.w	r2, r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_DMA_Abort+0x62>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	e013      	b.n	8002224 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fc:	f7ff fdcc 	bl	8001d98 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b05      	cmp	r3, #5
 8002208:	d90c      	bls.n	8002224 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e015      	b.n	8002250 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1e4      	bne.n	80021fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	223f      	movs	r2, #63	@ 0x3f
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2280      	movs	r2, #128	@ 0x80
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00c      	b.n	8002290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2205      	movs	r2, #5
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a8:	4b8e      	ldr	r3, [pc, #568]	@ (80024e4 <HAL_DMA_IRQHandler+0x248>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a8e      	ldr	r2, [pc, #568]	@ (80024e8 <HAL_DMA_IRQHandler+0x24c>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0a9b      	lsrs	r3, r3, #10
 80022b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c6:	2208      	movs	r2, #8
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01a      	beq.n	8002308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0204 	bic.w	r2, r2, #4
 80022ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	2208      	movs	r2, #8
 80022f6:	409a      	lsls	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230c:	2201      	movs	r2, #1
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d012      	beq.n	800233e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232a:	2201      	movs	r2, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	f043 0202 	orr.w	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	2204      	movs	r2, #4
 8002344:	409a      	lsls	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d012      	beq.n	8002374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00b      	beq.n	8002374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	2204      	movs	r2, #4
 8002362:	409a      	lsls	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236c:	f043 0204 	orr.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002378:	2210      	movs	r2, #16
 800237a:	409a      	lsls	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d043      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03c      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	2210      	movs	r2, #16
 8002398:	409a      	lsls	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d018      	beq.n	80023de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d024      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
 80023ca:	e01f      	b.n	800240c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
 80023dc:	e016      	b.n	800240c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0208 	bic.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002410:	2220      	movs	r2, #32
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 808f 	beq.w	800253c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 8087 	beq.w	800253c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	2220      	movs	r2, #32
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b05      	cmp	r3, #5
 8002444:	d136      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0216 	bic.w	r2, r2, #22
 8002454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_DMA_IRQHandler+0x1da>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0208 	bic.w	r2, r2, #8
 8002484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248a:	223f      	movs	r2, #63	@ 0x3f
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d07e      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
        }
        return;
 80024b2:	e079      	b.n	80025a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01d      	beq.n	80024fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10d      	bne.n	80024ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d031      	beq.n	800253c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
 80024e0:	e02c      	b.n	800253c <HAL_DMA_IRQHandler+0x2a0>
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000
 80024e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d023      	beq.n	800253c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
 80024fc:	e01e      	b.n	800253c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10f      	bne.n	800252c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0210 	bic.w	r2, r2, #16
 800251a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002540:	2b00      	cmp	r3, #0
 8002542:	d032      	beq.n	80025aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d022      	beq.n	8002596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2205      	movs	r2, #5
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3301      	adds	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	d307      	bcc.n	8002584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f2      	bne.n	8002568 <HAL_DMA_IRQHandler+0x2cc>
 8002582:	e000      	b.n	8002586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
 80025a6:	e000      	b.n	80025aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80025a8:	bf00      	nop
    }
  }
}
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	3b10      	subs	r3, #16
 80025c0:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <DMA_CalcBaseAndBitshift+0x64>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <DMA_CalcBaseAndBitshift+0x68>)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d909      	bls.n	80025f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	1d1a      	adds	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80025f0:	e007      	b.n	8002602 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	aaaaaaab 	.word	0xaaaaaaab
 8002618:	0800fa58 	.word	0x0800fa58

0800261c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11f      	bne.n	8002676 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d856      	bhi.n	80026ea <DMA_CheckFifoParam+0xce>
 800263c:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <DMA_CheckFifoParam+0x28>)
 800263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002642:	bf00      	nop
 8002644:	08002655 	.word	0x08002655
 8002648:	08002667 	.word	0x08002667
 800264c:	08002655 	.word	0x08002655
 8002650:	080026eb 	.word	0x080026eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d046      	beq.n	80026ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002664:	e043      	b.n	80026ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800266e:	d140      	bne.n	80026f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002674:	e03d      	b.n	80026f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800267e:	d121      	bne.n	80026c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d837      	bhi.n	80026f6 <DMA_CheckFifoParam+0xda>
 8002686:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <DMA_CheckFifoParam+0x70>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	0800269d 	.word	0x0800269d
 8002690:	080026a3 	.word	0x080026a3
 8002694:	0800269d 	.word	0x0800269d
 8002698:	080026b5 	.word	0x080026b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      break;
 80026a0:	e030      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d025      	beq.n	80026fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b2:	e022      	b.n	80026fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026bc:	d11f      	bne.n	80026fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026c2:	e01c      	b.n	80026fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d903      	bls.n	80026d2 <DMA_CheckFifoParam+0xb6>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d003      	beq.n	80026d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026d0:	e018      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      break;
 80026d6:	e015      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00e      	beq.n	8002702 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      break;
 80026e8:	e00b      	b.n	8002702 <DMA_CheckFifoParam+0xe6>
      break;
 80026ea:	bf00      	nop
 80026ec:	e00a      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026ee:	bf00      	nop
 80026f0:	e008      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026f2:	bf00      	nop
 80026f4:	e006      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026f6:	bf00      	nop
 80026f8:	e004      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026fa:	bf00      	nop
 80026fc:	e002      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;   
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 8002702:	bf00      	nop
    }
  } 
  
  return status; 
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e16b      	b.n	8002a08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 815a 	bne.w	8002a02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d005      	beq.n	8002766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002762:	2b02      	cmp	r3, #2
 8002764:	d130      	bne.n	80027c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 0201 	and.w	r2, r3, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d017      	beq.n	8002804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d123      	bne.n	8002858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	08da      	lsrs	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3208      	adds	r2, #8
 8002818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80b4 	beq.w	8002a02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b60      	ldr	r3, [pc, #384]	@ (8002a20 <HAL_GPIO_Init+0x30c>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a20 <HAL_GPIO_Init+0x30c>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002a20 <HAL_GPIO_Init+0x30c>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a24 <HAL_GPIO_Init+0x310>)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	220f      	movs	r2, #15
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a52      	ldr	r2, [pc, #328]	@ (8002a28 <HAL_GPIO_Init+0x314>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d02b      	beq.n	800293a <HAL_GPIO_Init+0x226>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a51      	ldr	r2, [pc, #324]	@ (8002a2c <HAL_GPIO_Init+0x318>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d025      	beq.n	8002936 <HAL_GPIO_Init+0x222>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a50      	ldr	r2, [pc, #320]	@ (8002a30 <HAL_GPIO_Init+0x31c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01f      	beq.n	8002932 <HAL_GPIO_Init+0x21e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a34 <HAL_GPIO_Init+0x320>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d019      	beq.n	800292e <HAL_GPIO_Init+0x21a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_GPIO_Init+0x216>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4d      	ldr	r2, [pc, #308]	@ (8002a3c <HAL_GPIO_Init+0x328>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00d      	beq.n	8002926 <HAL_GPIO_Init+0x212>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a40 <HAL_GPIO_Init+0x32c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <HAL_GPIO_Init+0x20e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4b      	ldr	r2, [pc, #300]	@ (8002a44 <HAL_GPIO_Init+0x330>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_GPIO_Init+0x20a>
 800291a:	2307      	movs	r3, #7
 800291c:	e00e      	b.n	800293c <HAL_GPIO_Init+0x228>
 800291e:	2308      	movs	r3, #8
 8002920:	e00c      	b.n	800293c <HAL_GPIO_Init+0x228>
 8002922:	2306      	movs	r3, #6
 8002924:	e00a      	b.n	800293c <HAL_GPIO_Init+0x228>
 8002926:	2305      	movs	r3, #5
 8002928:	e008      	b.n	800293c <HAL_GPIO_Init+0x228>
 800292a:	2304      	movs	r3, #4
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x228>
 800292e:	2303      	movs	r3, #3
 8002930:	e004      	b.n	800293c <HAL_GPIO_Init+0x228>
 8002932:	2302      	movs	r3, #2
 8002934:	e002      	b.n	800293c <HAL_GPIO_Init+0x228>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x228>
 800293a:	2300      	movs	r3, #0
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f002 0203 	and.w	r2, r2, #3
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	4093      	lsls	r3, r2
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800294c:	4935      	ldr	r1, [pc, #212]	@ (8002a24 <HAL_GPIO_Init+0x310>)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	3302      	adds	r3, #2
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a48 <HAL_GPIO_Init+0x334>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297e:	4a32      	ldr	r2, [pc, #200]	@ (8002a48 <HAL_GPIO_Init+0x334>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002984:	4b30      	ldr	r3, [pc, #192]	@ (8002a48 <HAL_GPIO_Init+0x334>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a8:	4a27      	ldr	r2, [pc, #156]	@ (8002a48 <HAL_GPIO_Init+0x334>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ae:	4b26      	ldr	r3, [pc, #152]	@ (8002a48 <HAL_GPIO_Init+0x334>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a48 <HAL_GPIO_Init+0x334>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_GPIO_Init+0x334>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029fc:	4a12      	ldr	r2, [pc, #72]	@ (8002a48 <HAL_GPIO_Init+0x334>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3301      	adds	r3, #1
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	f67f ae90 	bls.w	8002730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40021400 	.word	0x40021400
 8002a40:	40021800 	.word	0x40021800
 8002a44:	40021c00 	.word	0x40021c00
 8002a48:	40013c00 	.word	0x40013c00

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a68:	e003      	b.n	8002a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	041a      	lsls	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e101      	b.n	8002c94 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f007 ff04 	bl	800a8b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002abe:	d102      	bne.n	8002ac6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 faeb 	bl	80070a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7c1a      	ldrb	r2, [r3, #16]
 8002ad8:	f88d 2000 	strb.w	r2, [sp]
 8002adc:	3304      	adds	r3, #4
 8002ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae0:	f004 f9ca 	bl	8006e78 <USB_CoreInit>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0ce      	b.n	8002c94 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 fae3 	bl	80070c8 <USB_SetCurrentMode>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0bf      	b.n	8002c94 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e04a      	b.n	8002bb0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3315      	adds	r3, #21
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	b298      	uxth	r0, r3
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	332e      	adds	r3, #46	@ 0x2e
 8002b56:	4602      	mov	r2, r0
 8002b58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3318      	adds	r3, #24
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	331c      	adds	r3, #28
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3320      	adds	r3, #32
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3324      	adds	r3, #36	@ 0x24
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	3301      	adds	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	791b      	ldrb	r3, [r3, #4]
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d3af      	bcc.n	8002b1a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e044      	b.n	8002c4a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3301      	adds	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	791b      	ldrb	r3, [r3, #4]
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3b5      	bcc.n	8002bc0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7c1a      	ldrb	r2, [r3, #16]
 8002c5c:	f88d 2000 	strb.w	r2, [sp]
 8002c60:	3304      	adds	r3, #4
 8002c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c64:	f004 fa7c 	bl	8007160 <USB_DevInit>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00c      	b.n	8002c94 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f005 fac6 	bl	800821e <USB_DevDisconnect>

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_PCD_Start+0x1c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e022      	b.n	8002cfe <HAL_PCD_Start+0x62>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f004 f9cd 	bl	8007084 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f005 fa74 	bl	80081dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d06:	b590      	push	{r4, r7, lr}
 8002d08:	b08d      	sub	sp, #52	@ 0x34
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fb32 	bl	8008386 <USB_GetMode>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f040 848c 	bne.w	8003642 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 fa96 	bl	8008260 <USB_ReadInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8482 	beq.w	8003640 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f005 fa83 	bl	8008260 <USB_ReadInterrupts>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d107      	bne.n	8002d74 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f002 0202 	and.w	r2, r2, #2
 8002d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f005 fa71 	bl	8008260 <USB_ReadInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d161      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0210 	bic.w	r2, r2, #16
 8002d96:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f003 020f 	and.w	r2, r3, #15
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	0c5b      	lsrs	r3, r3, #17
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d124      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d035      	beq.n	8002e3c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	6a38      	ldr	r0, [r7, #32]
 8002de4:	f005 f8a8 	bl	8007f38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df4:	441a      	add	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e06:	441a      	add	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	615a      	str	r2, [r3, #20]
 8002e0c:	e016      	b.n	8002e3c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	0c5b      	lsrs	r3, r3, #17
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d110      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e20:	2208      	movs	r2, #8
 8002e22:	4619      	mov	r1, r3
 8002e24:	6a38      	ldr	r0, [r7, #32]
 8002e26:	f005 f887 	bl	8007f38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e36:	441a      	add	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0210 	orr.w	r2, r2, #16
 8002e4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f005 fa05 	bl	8008260 <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e60:	f040 80a7 	bne.w	8002fb2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f005 fa0a 	bl	8008286 <USB_ReadDevAllOutEpInterrupt>
 8002e72:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002e74:	e099      	b.n	8002faa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 808e 	beq.w	8002f9e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f005 fa2e 	bl	80082ee <USB_ReadDevOutEPInterrupt>
 8002e92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2301      	movs	r3, #1
 8002eae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002eb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fea4 	bl	8003c00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 ff7a 	bl	8003dd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d030      	beq.n	8002f64 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d109      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f20:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	78db      	ldrb	r3, [r3, #3]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2200      	movs	r2, #0
 8002f44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f007 fe03 	bl	800ab58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2302      	movs	r3, #2
 8002f62:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f96:	461a      	mov	r2, r3
 8002f98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f47f af62 	bne.w	8002e76 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f005 f952 	bl	8008260 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fc6:	f040 80db 	bne.w	8003180 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f005 f973 	bl	80082ba <USB_ReadDevAllInEpInterrupt>
 8002fd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002fda:	e0cd      	b.n	8003178 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80c2 	beq.w	800316c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f005 f999 	bl	800832a <USB_ReadDevInEPInterrupt>
 8002ff8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d057      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	2201      	movs	r2, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43db      	mvns	r3, r3
 800301e:	69f9      	ldr	r1, [r7, #28]
 8003020:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003024:	4013      	ands	r3, r2
 8003026:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003034:	461a      	mov	r2, r3
 8003036:	2301      	movs	r3, #1
 8003038:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	799b      	ldrb	r3, [r3, #6]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d132      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3320      	adds	r3, #32
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4403      	add	r3, r0
 8003062:	331c      	adds	r3, #28
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4419      	add	r1, r3
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4403      	add	r3, r0
 8003076:	3320      	adds	r3, #32
 8003078:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d113      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x3a2>
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3324      	adds	r3, #36	@ 0x24
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d108      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030a0:	461a      	mov	r2, r3
 80030a2:	2101      	movs	r1, #1
 80030a4:	f005 f9a0 	bl	80083e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f007 fccd 	bl	800aa4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ca:	461a      	mov	r2, r3
 80030cc:	2308      	movs	r3, #8
 80030ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030e6:	461a      	mov	r2, r3
 80030e8:	2310      	movs	r3, #16
 80030ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003102:	461a      	mov	r2, r3
 8003104:	2340      	movs	r3, #64	@ 0x40
 8003106:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d023      	beq.n	800315a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003112:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003114:	6a38      	ldr	r0, [r7, #32]
 8003116:	f004 f987 	bl	8007428 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800311a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	3310      	adds	r3, #16
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	78db      	ldrb	r3, [r3, #3]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d108      	bne.n	8003148 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f007 fd1a 	bl	800ab7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003154:	461a      	mov	r2, r3
 8003156:	2302      	movs	r3, #2
 8003158:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fcbd 	bl	8003ae6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	3301      	adds	r3, #1
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	f47f af2e 	bne.w	8002fdc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f005 f86b 	bl	8008260 <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003194:	d122      	bne.n	80031dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d108      	bne.n	80031c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031bc:	2100      	movs	r1, #0
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fea4 	bl	8003f0c <HAL_PCDEx_LPM_Callback>
 80031c4:	e002      	b.n	80031cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f007 fcb8 	bl	800ab3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80031da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f005 f83d 	bl	8008260 <USB_ReadInterrupts>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031f0:	d112      	bne.n	8003218 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f007 fc74 	bl	800aaf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003216:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f005 f81f 	bl	8008260 <USB_ReadInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322c:	f040 80b7 	bne.w	800339e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2110      	movs	r1, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f004 f8ec 	bl	8007428 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003250:	2300      	movs	r3, #0
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003254:	e046      	b.n	80032e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003262:	461a      	mov	r2, r3
 8003264:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003268:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800326a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800327a:	0151      	lsls	r1, r2, #5
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	440a      	add	r2, r1
 8003280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003284:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003288:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800328a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003296:	461a      	mov	r2, r3
 8003298:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800329c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ae:	0151      	lsls	r1, r2, #5
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	440a      	add	r2, r1
 80032b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ce:	0151      	lsls	r1, r2, #5
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	440a      	add	r2, r1
 80032d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	3301      	adds	r3, #1
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	791b      	ldrb	r3, [r3, #4]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d3b2      	bcc.n	8003256 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032fe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003302:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7bdb      	ldrb	r3, [r3, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d016      	beq.n	800333a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800331c:	f043 030b 	orr.w	r3, r3, #11
 8003320:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003332:	f043 030b 	orr.w	r3, r3, #11
 8003336:	6453      	str	r3, [r2, #68]	@ 0x44
 8003338:	e015      	b.n	8003366 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003348:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800334c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003350:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003360:	f043 030b 	orr.w	r3, r3, #11
 8003364:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003374:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003378:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003388:	461a      	mov	r2, r3
 800338a:	f005 f82d 	bl	80083e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800339c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f004 ff5c 	bl	8008260 <USB_ReadInterrupts>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b2:	d123      	bne.n	80033fc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f004 fff2 	bl	80083a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 f8a9 	bl	800751a <USB_GetDevSpeed>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681c      	ldr	r4, [r3, #0]
 80033d4:	f001 fa0a 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 80033d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033de:	461a      	mov	r2, r3
 80033e0:	4620      	mov	r0, r4
 80033e2:	f003 fdad 	bl	8006f40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f007 fb59 	bl	800aa9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80033fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f004 ff2d 	bl	8008260 <USB_ReadInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d10a      	bne.n	8003426 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f007 fb36 	bl	800aa82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 0208 	and.w	r2, r2, #8
 8003424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f004 ff18 	bl	8008260 <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d123      	bne.n	8003482 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003446:	2301      	movs	r3, #1
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
 800344a:	e014      	b.n	8003476 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fb0a 	bl	8003a84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	3301      	adds	r3, #1
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	791b      	ldrb	r3, [r3, #4]
 800347a:	461a      	mov	r2, r3
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	4293      	cmp	r3, r2
 8003480:	d3e4      	bcc.n	800344c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f004 feea 	bl	8008260 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003496:	d13c      	bne.n	8003512 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003498:	2301      	movs	r3, #1
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
 800349c:	e02b      	b.n	80034f6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3318      	adds	r3, #24
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d115      	bne.n	80034f0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da12      	bge.n	80034f0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3317      	adds	r3, #23
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 faca 	bl	8003a84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	3301      	adds	r3, #1
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	791b      	ldrb	r3, [r3, #4]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	4293      	cmp	r3, r2
 8003500:	d3cd      	bcc.n	800349e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f004 fea2 	bl	8008260 <USB_ReadInterrupts>
 800351c:	4603      	mov	r3, r0
 800351e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003522:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003526:	d156      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003528:	2301      	movs	r3, #1
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
 800352c:	e045      	b.n	80035ba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d12e      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003556:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	da2b      	bge.n	80035b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003568:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800356c:	429a      	cmp	r2, r3
 800356e:	d121      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035b0:	6053      	str	r3, [r2, #4]
            break;
 80035b2:	e008      	b.n	80035c6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	3301      	adds	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	791b      	ldrb	r3, [r3, #4]
 80035be:	461a      	mov	r2, r3
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d3b3      	bcc.n	800352e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80035d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f004 fe40 	bl	8008260 <USB_ReadInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ea:	d10a      	bne.n	8003602 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f007 fad7 	bl	800aba0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f004 fe2a 	bl	8008260 <USB_ReadInterrupts>
 800360c:	4603      	mov	r3, r0
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d115      	bne.n	8003642 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f007 fac7 	bl	800abbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	e000      	b.n	8003642 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003640:	bf00      	nop
    }
  }
}
 8003642:	3734      	adds	r7, #52	@ 0x34
 8003644:	46bd      	mov	sp, r7
 8003646:	bd90      	pop	{r4, r7, pc}

08003648 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_PCD_SetAddress+0x1a>
 800365e:	2302      	movs	r3, #2
 8003660:	e012      	b.n	8003688 <HAL_PCD_SetAddress+0x40>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f004 fd89 	bl	8008190 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	70fb      	strb	r3, [r7, #3]
 80036a2:	460b      	mov	r3, r1
 80036a4:	803b      	strh	r3, [r7, #0]
 80036a6:	4613      	mov	r3, r2
 80036a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da0f      	bge.n	80036d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 020f 	and.w	r2, r3, #15
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	3310      	adds	r3, #16
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	3304      	adds	r3, #4
 80036cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	705a      	strb	r2, [r3, #1]
 80036d4:	e00f      	b.n	80036f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	f003 020f 	and.w	r2, r3, #15
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003702:	883b      	ldrh	r3, [r7, #0]
 8003704:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	78ba      	ldrb	r2, [r7, #2]
 8003710:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003724:	78bb      	ldrb	r3, [r7, #2]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d102      	bne.n	8003730 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_PCD_EP_Open+0xae>
 800373a:	2302      	movs	r3, #2
 800373c:	e00e      	b.n	800375c <HAL_PCD_EP_Open+0xcc>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68f9      	ldr	r1, [r7, #12]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 ff09 	bl	8007564 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800375a:	7afb      	ldrb	r3, [r7, #11]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003774:	2b00      	cmp	r3, #0
 8003776:	da0f      	bge.n	8003798 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	f003 020f 	and.w	r2, r3, #15
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	3310      	adds	r3, #16
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	3304      	adds	r3, #4
 800378e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	705a      	strb	r2, [r3, #1]
 8003796:	e00f      	b.n	80037b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	3304      	adds	r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_PCD_EP_Close+0x6e>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e00e      	b.n	80037f0 <HAL_PCD_EP_Close+0x8c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f003 ff47 	bl	8007674 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	460b      	mov	r3, r1
 8003806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003808:	7afb      	ldrb	r3, [r7, #11]
 800380a:	f003 020f 	and.w	r2, r3, #15
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	b2da      	uxtb	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	799b      	ldrb	r3, [r3, #6]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	799b      	ldrb	r3, [r3, #6]
 800385c:	461a      	mov	r2, r3
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	f003 ffe4 	bl	800782c <USB_EPStartXfer>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 020f 	and.w	r2, r3, #15
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003890:	681b      	ldr	r3, [r3, #0]
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	460b      	mov	r3, r1
 80038ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	f003 020f 	and.w	r2, r3, #15
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	3310      	adds	r3, #16
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2201      	movs	r2, #1
 80038dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	799b      	ldrb	r3, [r3, #6]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	799b      	ldrb	r3, [r3, #6]
 8003900:	461a      	mov	r2, r3
 8003902:	6979      	ldr	r1, [r7, #20]
 8003904:	f003 ff92 	bl	800782c <USB_EPStartXfer>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	7912      	ldrb	r2, [r2, #4]
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e04f      	b.n	80039d0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003934:	2b00      	cmp	r3, #0
 8003936:	da0f      	bge.n	8003958 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	f003 020f 	and.w	r2, r3, #15
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	3310      	adds	r3, #16
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	3304      	adds	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	705a      	strb	r2, [r3, #1]
 8003956:	e00d      	b.n	8003974 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	3304      	adds	r3, #4
 800396c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	b2da      	uxtb	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_PCD_EP_SetStall+0x82>
 8003990:	2302      	movs	r3, #2
 8003992:	e01d      	b.n	80039d0 <HAL_PCD_EP_SetStall+0xbe>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 fb20 	bl	8007fe8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	7999      	ldrb	r1, [r3, #6]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039c0:	461a      	mov	r2, r3
 80039c2:	f004 fd11 	bl	80083e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	7912      	ldrb	r2, [r2, #4]
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e042      	b.n	8003a7c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	da0f      	bge.n	8003a1e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 020f 	and.w	r2, r3, #15
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	3310      	adds	r3, #16
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	705a      	strb	r2, [r3, #1]
 8003a1c:	e00f      	b.n	8003a3e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4413      	add	r3, r2
 8003a34:	3304      	adds	r3, #4
 8003a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_PCD_EP_ClrStall+0x86>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e00e      	b.n	8003a7c <HAL_PCD_EP_ClrStall+0xa4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68f9      	ldr	r1, [r7, #12]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f004 fb29 	bl	80080c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	da0c      	bge.n	8003ab2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 020f 	and.w	r2, r3, #15
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	3310      	adds	r3, #16
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	e00c      	b.n	8003acc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 020f 	and.w	r2, r3, #15
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 f948 	bl	8007d68 <USB_EPStopXfer>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003adc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b08a      	sub	sp, #40	@ 0x28
 8003aea:	af02      	add	r7, sp, #8
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	3310      	adds	r3, #16
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d901      	bls.n	8003b1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e06b      	b.n	8003bf6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d902      	bls.n	8003b3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3303      	adds	r3, #3
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b42:	e02a      	b.n	8003b9a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d902      	bls.n	8003b60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	3303      	adds	r3, #3
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68d9      	ldr	r1, [r3, #12]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f004 f99d 	bl	8007ebc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	441a      	add	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d809      	bhi.n	8003bc4 <PCD_WriteEmptyTxFifo+0xde>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d203      	bcs.n	8003bc4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1bf      	bne.n	8003b44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d811      	bhi.n	8003bf4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	6939      	ldr	r1, [r7, #16]
 8003bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	333c      	adds	r3, #60	@ 0x3c
 8003c18:	3304      	adds	r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	799b      	ldrb	r3, [r3, #6]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d17b      	bne.n	8003d2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d015      	beq.n	8003c6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4a61      	ldr	r2, [pc, #388]	@ (8003dc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	f240 80b9 	bls.w	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80b3 	beq.w	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c62:	461a      	mov	r2, r3
 8003c64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c68:	6093      	str	r3, [r2, #8]
 8003c6a:	e0a7      	b.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c82:	461a      	mov	r2, r3
 8003c84:	2320      	movs	r3, #32
 8003c86:	6093      	str	r3, [r2, #8]
 8003c88:	e098      	b.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f040 8093 	bne.w	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4a4b      	ldr	r2, [pc, #300]	@ (8003dc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d90f      	bls.n	8003cbe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cba:	6093      	str	r3, [r2, #8]
 8003cbc:	e07e      	b.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1a      	ldr	r2, [r3, #32]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	0159      	lsls	r1, r3, #5
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	440b      	add	r3, r1
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d114      	bne.n	8003d20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f004 fb6c 	bl	80083e8 <USB_EP0_OutStart>
 8003d10:	e006      	b.n	8003d20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	441a      	add	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f006 fe76 	bl	800aa18 <HAL_PCD_DataOutStageCallback>
 8003d2c:	e046      	b.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4a26      	ldr	r2, [pc, #152]	@ (8003dcc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d124      	bne.n	8003d80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d52:	6093      	str	r3, [r2, #8]
 8003d54:	e032      	b.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2320      	movs	r3, #32
 8003d70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f006 fe4d 	bl	800aa18 <HAL_PCD_DataOutStageCallback>
 8003d7e:	e01d      	b.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d114      	bne.n	8003db0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003da8:	461a      	mov	r2, r3
 8003daa:	2100      	movs	r1, #0
 8003dac:	f004 fb1c 	bl	80083e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	4619      	mov	r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f006 fe2e 	bl	800aa18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	4f54300a 	.word	0x4f54300a
 8003dcc:	4f54310a 	.word	0x4f54310a

08003dd0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	333c      	adds	r3, #60	@ 0x3c
 8003de8:	3304      	adds	r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a15      	ldr	r2, [pc, #84]	@ (8003e58 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d90e      	bls.n	8003e24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f006 fde5 	bl	800a9f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e58 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d90c      	bls.n	8003e4c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	799b      	ldrb	r3, [r3, #6]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d108      	bne.n	8003e4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e44:	461a      	mov	r2, r3
 8003e46:	2101      	movs	r1, #1
 8003e48:	f004 face 	bl	80083e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	4f54300a 	.word	0x4f54300a

08003e5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d107      	bne.n	8003e8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e7a:	883b      	ldrh	r3, [r7, #0]
 8003e7c:	0419      	lsls	r1, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e88:	e028      	b.n	8003edc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4413      	add	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	e00d      	b.n	8003eba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	3340      	adds	r3, #64	@ 0x40
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3ec      	bcc.n	8003e9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ec4:	883b      	ldrh	r3, [r7, #0]
 8003ec6:	0418      	lsls	r0, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6819      	ldr	r1, [r3, #0]
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	4302      	orrs	r2, r0
 8003ed4:	3340      	adds	r3, #64	@ 0x40
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e267      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d075      	beq.n	800402e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f42:	4b88      	ldr	r3, [pc, #544]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d00c      	beq.n	8003f68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4e:	4b85      	ldr	r3, [pc, #532]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d112      	bne.n	8003f80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5a:	4b82      	ldr	r3, [pc, #520]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f66:	d10b      	bne.n	8003f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	4b7e      	ldr	r3, [pc, #504]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d05b      	beq.n	800402c <HAL_RCC_OscConfig+0x108>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d157      	bne.n	800402c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e242      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f88:	d106      	bne.n	8003f98 <HAL_RCC_OscConfig+0x74>
 8003f8a:	4b76      	ldr	r3, [pc, #472]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a75      	ldr	r2, [pc, #468]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e01d      	b.n	8003fd4 <HAL_RCC_OscConfig+0xb0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCC_OscConfig+0x98>
 8003fa2:	4b70      	ldr	r3, [pc, #448]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a6f      	ldr	r2, [pc, #444]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	4b6d      	ldr	r3, [pc, #436]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6c      	ldr	r2, [pc, #432]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCC_OscConfig+0xb0>
 8003fbc:	4b69      	ldr	r3, [pc, #420]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a68      	ldr	r2, [pc, #416]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4b66      	ldr	r3, [pc, #408]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a65      	ldr	r2, [pc, #404]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d013      	beq.n	8004004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fedc 	bl	8001d98 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fed8 	bl	8001d98 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	@ 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e207      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0xc0>
 8004002:	e014      	b.n	800402e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fd fec8 	bl	8001d98 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400c:	f7fd fec4 	bl	8001d98 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	@ 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e1f3      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401e:	4b51      	ldr	r3, [pc, #324]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0xe8>
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d063      	beq.n	8004102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800403a:	4b4a      	ldr	r3, [pc, #296]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004046:	4b47      	ldr	r3, [pc, #284]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800404e:	2b08      	cmp	r3, #8
 8004050:	d11c      	bne.n	800408c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004052:	4b44      	ldr	r3, [pc, #272]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d116      	bne.n	800408c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405e:	4b41      	ldr	r3, [pc, #260]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_RCC_OscConfig+0x152>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d001      	beq.n	8004076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e1c7      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004076:	4b3b      	ldr	r3, [pc, #236]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4937      	ldr	r1, [pc, #220]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408a:	e03a      	b.n	8004102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d020      	beq.n	80040d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004094:	4b34      	ldr	r3, [pc, #208]	@ (8004168 <HAL_RCC_OscConfig+0x244>)
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fd fe7d 	bl	8001d98 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a2:	f7fd fe79 	bl	8001d98 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e1a8      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b28      	ldr	r3, [pc, #160]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4925      	ldr	r1, [pc, #148]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]
 80040d4:	e015      	b.n	8004102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d6:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <HAL_RCC_OscConfig+0x244>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fe5c 	bl	8001d98 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e4:	f7fd fe58 	bl	8001d98 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e187      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d036      	beq.n	800417c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004116:	4b15      	ldr	r3, [pc, #84]	@ (800416c <HAL_RCC_OscConfig+0x248>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411c:	f7fd fe3c 	bl	8001d98 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004124:	f7fd fe38 	bl	8001d98 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e167      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004136:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <HAL_RCC_OscConfig+0x240>)
 8004138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x200>
 8004142:	e01b      	b.n	800417c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_OscConfig+0x248>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414a:	f7fd fe25 	bl	8001d98 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	e00e      	b.n	8004170 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004152:	f7fd fe21 	bl	8001d98 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d907      	bls.n	8004170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e150      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
 8004164:	40023800 	.word	0x40023800
 8004168:	42470000 	.word	0x42470000
 800416c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004170:	4b88      	ldr	r3, [pc, #544]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ea      	bne.n	8004152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8097 	beq.w	80042b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418e:	4b81      	ldr	r3, [pc, #516]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	4b7d      	ldr	r3, [pc, #500]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ba:	4b77      	ldr	r3, [pc, #476]	@ (8004398 <HAL_RCC_OscConfig+0x474>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d118      	bne.n	80041f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c6:	4b74      	ldr	r3, [pc, #464]	@ (8004398 <HAL_RCC_OscConfig+0x474>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a73      	ldr	r2, [pc, #460]	@ (8004398 <HAL_RCC_OscConfig+0x474>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d2:	f7fd fde1 	bl	8001d98 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041da:	f7fd fddd 	bl	8001d98 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e10c      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004398 <HAL_RCC_OscConfig+0x474>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d106      	bne.n	800420e <HAL_RCC_OscConfig+0x2ea>
 8004200:	4b64      	ldr	r3, [pc, #400]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004204:	4a63      	ldr	r2, [pc, #396]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6713      	str	r3, [r2, #112]	@ 0x70
 800420c:	e01c      	b.n	8004248 <HAL_RCC_OscConfig+0x324>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b05      	cmp	r3, #5
 8004214:	d10c      	bne.n	8004230 <HAL_RCC_OscConfig+0x30c>
 8004216:	4b5f      	ldr	r3, [pc, #380]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421a:	4a5e      	ldr	r2, [pc, #376]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	6713      	str	r3, [r2, #112]	@ 0x70
 8004222:	4b5c      	ldr	r3, [pc, #368]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	4a5b      	ldr	r2, [pc, #364]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6713      	str	r3, [r2, #112]	@ 0x70
 800422e:	e00b      	b.n	8004248 <HAL_RCC_OscConfig+0x324>
 8004230:	4b58      	ldr	r3, [pc, #352]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004234:	4a57      	ldr	r2, [pc, #348]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	@ 0x70
 800423c:	4b55      	ldr	r3, [pc, #340]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004240:	4a54      	ldr	r2, [pc, #336]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004242:	f023 0304 	bic.w	r3, r3, #4
 8004246:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d015      	beq.n	800427c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004250:	f7fd fda2 	bl	8001d98 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004256:	e00a      	b.n	800426e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004258:	f7fd fd9e 	bl	8001d98 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e0cb      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426e:	4b49      	ldr	r3, [pc, #292]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ee      	beq.n	8004258 <HAL_RCC_OscConfig+0x334>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427c:	f7fd fd8c 	bl	8001d98 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fd fd88 	bl	8001d98 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0b5      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429a:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1ee      	bne.n	8004284 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d105      	bne.n	80042b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ac:	4b39      	ldr	r3, [pc, #228]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	4a38      	ldr	r2, [pc, #224]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 80042b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80a1 	beq.w	8004404 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042c2:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d05c      	beq.n	8004388 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d141      	bne.n	800435a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d6:	4b31      	ldr	r3, [pc, #196]	@ (800439c <HAL_RCC_OscConfig+0x478>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fd fd5c 	bl	8001d98 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fd fd58 	bl	8001d98 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e087      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	019b      	lsls	r3, r3, #6
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	3b01      	subs	r3, #1
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	061b      	lsls	r3, r3, #24
 8004326:	491b      	ldr	r1, [pc, #108]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <HAL_RCC_OscConfig+0x478>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fd fd31 	bl	8001d98 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fd fd2d 	bl	8001d98 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e05c      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434c:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x416>
 8004358:	e054      	b.n	8004404 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <HAL_RCC_OscConfig+0x478>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fd fd1a 	bl	8001d98 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004368:	f7fd fd16 	bl	8001d98 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e045      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_RCC_OscConfig+0x470>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x444>
 8004386:	e03d      	b.n	8004404 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e038      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
 8004394:	40023800 	.word	0x40023800
 8004398:	40007000 	.word	0x40007000
 800439c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004410 <HAL_RCC_OscConfig+0x4ec>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d028      	beq.n	8004400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d121      	bne.n	8004400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d11a      	bne.n	8004400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043d0:	4013      	ands	r3, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d8:	4293      	cmp	r3, r2
 80043da:	d111      	bne.n	8004400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	3b01      	subs	r3, #1
 80043ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800

08004414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0cc      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b68      	ldr	r3, [pc, #416]	@ (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d90c      	bls.n	8004450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b65      	ldr	r3, [pc, #404]	@ (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b63      	ldr	r3, [pc, #396]	@ (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0b8      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d020      	beq.n	800449e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004468:	4b59      	ldr	r3, [pc, #356]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a58      	ldr	r2, [pc, #352]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004472:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004480:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a52      	ldr	r2, [pc, #328]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800448a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b50      	ldr	r3, [pc, #320]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	494d      	ldr	r1, [pc, #308]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d044      	beq.n	8004534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b47      	ldr	r3, [pc, #284]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d119      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d003      	beq.n	80044d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d2:	4b3f      	ldr	r3, [pc, #252]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e06f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e2:	4b3b      	ldr	r3, [pc, #236]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e067      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b37      	ldr	r3, [pc, #220]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4934      	ldr	r1, [pc, #208]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004504:	f7fd fc48 	bl	8001d98 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fd fc44 	bl	8001d98 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e04f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	4b2b      	ldr	r3, [pc, #172]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 020c 	and.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	429a      	cmp	r2, r3
 8004532:	d1eb      	bne.n	800450c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004534:	4b25      	ldr	r3, [pc, #148]	@ (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d20c      	bcs.n	800455c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b22      	ldr	r3, [pc, #136]	@ (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b20      	ldr	r3, [pc, #128]	@ (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e032      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4916      	ldr	r1, [pc, #88]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004586:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	490e      	ldr	r1, [pc, #56]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800459a:	f000 f821 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	490a      	ldr	r1, [pc, #40]	@ (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 80045ac:	5ccb      	ldrb	r3, [r1, r3]
 80045ae:	fa22 f303 	lsr.w	r3, r2, r3
 80045b2:	4a09      	ldr	r2, [pc, #36]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045b6:	4b09      	ldr	r3, [pc, #36]	@ (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fba8 	bl	8001d10 <HAL_InitTick>

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023c00 	.word	0x40023c00
 80045d0:	40023800 	.word	0x40023800
 80045d4:	0800fa40 	.word	0x0800fa40
 80045d8:	20000000 	.word	0x20000000
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e4:	b094      	sub	sp, #80	@ 0x50
 80045e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f8:	4b79      	ldr	r3, [pc, #484]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 030c 	and.w	r3, r3, #12
 8004600:	2b08      	cmp	r3, #8
 8004602:	d00d      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x40>
 8004604:	2b08      	cmp	r3, #8
 8004606:	f200 80e1 	bhi.w	80047cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x34>
 800460e:	2b04      	cmp	r3, #4
 8004610:	d003      	beq.n	800461a <HAL_RCC_GetSysClockFreq+0x3a>
 8004612:	e0db      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004614:	4b73      	ldr	r3, [pc, #460]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004616:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004618:	e0db      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800461a:	4b73      	ldr	r3, [pc, #460]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800461c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800461e:	e0d8      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004620:	4b6f      	ldr	r3, [pc, #444]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004628:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800462a:	4b6d      	ldr	r3, [pc, #436]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d063      	beq.n	80046fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004636:	4b6a      	ldr	r3, [pc, #424]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	099b      	lsrs	r3, r3, #6
 800463c:	2200      	movs	r2, #0
 800463e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004640:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004648:	633b      	str	r3, [r7, #48]	@ 0x30
 800464a:	2300      	movs	r3, #0
 800464c:	637b      	str	r3, [r7, #52]	@ 0x34
 800464e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004652:	4622      	mov	r2, r4
 8004654:	462b      	mov	r3, r5
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	0159      	lsls	r1, r3, #5
 8004660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004664:	0150      	lsls	r0, r2, #5
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4621      	mov	r1, r4
 800466c:	1a51      	subs	r1, r2, r1
 800466e:	6139      	str	r1, [r7, #16]
 8004670:	4629      	mov	r1, r5
 8004672:	eb63 0301 	sbc.w	r3, r3, r1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004684:	4659      	mov	r1, fp
 8004686:	018b      	lsls	r3, r1, #6
 8004688:	4651      	mov	r1, sl
 800468a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800468e:	4651      	mov	r1, sl
 8004690:	018a      	lsls	r2, r1, #6
 8004692:	4651      	mov	r1, sl
 8004694:	ebb2 0801 	subs.w	r8, r2, r1
 8004698:	4659      	mov	r1, fp
 800469a:	eb63 0901 	sbc.w	r9, r3, r1
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046b2:	4690      	mov	r8, r2
 80046b4:	4699      	mov	r9, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	eb18 0303 	adds.w	r3, r8, r3
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	462b      	mov	r3, r5
 80046c0:	eb49 0303 	adc.w	r3, r9, r3
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046d2:	4629      	mov	r1, r5
 80046d4:	024b      	lsls	r3, r1, #9
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046dc:	4621      	mov	r1, r4
 80046de:	024a      	lsls	r2, r1, #9
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e6:	2200      	movs	r2, #0
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046f0:	f7fc faaa 	bl	8000c48 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4613      	mov	r3, r2
 80046fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046fc:	e058      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fe:	4b38      	ldr	r3, [pc, #224]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	099b      	lsrs	r3, r3, #6
 8004704:	2200      	movs	r2, #0
 8004706:	4618      	mov	r0, r3
 8004708:	4611      	mov	r1, r2
 800470a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	2300      	movs	r3, #0
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
 8004714:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004718:	4642      	mov	r2, r8
 800471a:	464b      	mov	r3, r9
 800471c:	f04f 0000 	mov.w	r0, #0
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	0159      	lsls	r1, r3, #5
 8004726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800472a:	0150      	lsls	r0, r2, #5
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4641      	mov	r1, r8
 8004732:	ebb2 0a01 	subs.w	sl, r2, r1
 8004736:	4649      	mov	r1, r9
 8004738:	eb63 0b01 	sbc.w	fp, r3, r1
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004748:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800474c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004750:	ebb2 040a 	subs.w	r4, r2, sl
 8004754:	eb63 050b 	sbc.w	r5, r3, fp
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	00eb      	lsls	r3, r5, #3
 8004762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004766:	00e2      	lsls	r2, r4, #3
 8004768:	4614      	mov	r4, r2
 800476a:	461d      	mov	r5, r3
 800476c:	4643      	mov	r3, r8
 800476e:	18e3      	adds	r3, r4, r3
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	464b      	mov	r3, r9
 8004774:	eb45 0303 	adc.w	r3, r5, r3
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004786:	4629      	mov	r1, r5
 8004788:	028b      	lsls	r3, r1, #10
 800478a:	4621      	mov	r1, r4
 800478c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004790:	4621      	mov	r1, r4
 8004792:	028a      	lsls	r2, r1, #10
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800479a:	2200      	movs	r2, #0
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	61fa      	str	r2, [r7, #28]
 80047a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a4:	f7fc fa50 	bl	8000c48 <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4613      	mov	r3, r2
 80047ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	3301      	adds	r3, #1
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80047c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3750      	adds	r7, #80	@ 0x50
 80047d8:	46bd      	mov	sp, r7
 80047da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	00f42400 	.word	0x00f42400
 80047e8:	007a1200 	.word	0x007a1200

080047ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f0:	4b03      	ldr	r3, [pc, #12]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000000 	.word	0x20000000

08004804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004808:	f7ff fff0 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0a9b      	lsrs	r3, r3, #10
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4903      	ldr	r1, [pc, #12]	@ (8004828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40023800 	.word	0x40023800
 8004828:	0800fa50 	.word	0x0800fa50

0800482c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004830:	f7ff ffdc 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	@ (800484c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0b5b      	lsrs	r3, r3, #13
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4903      	ldr	r1, [pc, #12]	@ (8004850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	0800fa50 	.word	0x0800fa50

08004854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e07b      	b.n	800495e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004876:	d009      	beq.n	800488c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	61da      	str	r2, [r3, #28]
 800487e:	e005      	b.n	800488c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc ff26 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004910:	ea42 0103 	orr.w	r1, r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0104 	and.w	r1, r3, #4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	f003 0210 	and.w	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af02      	add	r7, sp, #8
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d001      	beq.n	8004986 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
 8004984:	e104      	b.n	8004b90 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800498e:	d112      	bne.n	80049b6 <HAL_SPI_Receive+0x50>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10e      	bne.n	80049b6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2204      	movs	r2, #4
 800499c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4613      	mov	r3, r2
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f8f3 	bl	8004b98 <HAL_SPI_TransmitReceive>
 80049b2:	4603      	mov	r3, r0
 80049b4:	e0ec      	b.n	8004b90 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b6:	f7fd f9ef 	bl	8001d98 <HAL_GetTick>
 80049ba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_Receive+0x62>
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0e1      	b.n	8004b90 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_SPI_Receive+0x74>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e0da      	b.n	8004b90 <HAL_SPI_Receive+0x22a>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2204      	movs	r2, #4
 80049e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a28:	d10f      	bne.n	8004a4a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a54:	2b40      	cmp	r3, #64	@ 0x40
 8004a56:	d007      	beq.n	8004a68 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d170      	bne.n	8004b52 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a70:	e035      	b.n	8004ade <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d115      	bne.n	8004aac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f103 020c 	add.w	r2, r3, #12
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	7812      	ldrb	r2, [r2, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aaa:	e018      	b.n	8004ade <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aac:	f7fd f974 	bl	8001d98 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d803      	bhi.n	8004ac4 <HAL_SPI_Receive+0x15e>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	d102      	bne.n	8004aca <HAL_SPI_Receive+0x164>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e058      	b.n	8004b90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1c4      	bne.n	8004a72 <HAL_SPI_Receive+0x10c>
 8004ae8:	e038      	b.n	8004b5c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d113      	bne.n	8004b20 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	b292      	uxth	r2, r2
 8004b04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0a:	1c9a      	adds	r2, r3, #2
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b1e:	e018      	b.n	8004b52 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b20:	f7fd f93a 	bl	8001d98 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d803      	bhi.n	8004b38 <HAL_SPI_Receive+0x1d2>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_Receive+0x1d8>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e01e      	b.n	8004b90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1c6      	bne.n	8004aea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	6839      	ldr	r1, [r7, #0]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fa4b 	bl	8004ffc <SPI_EndRxTransaction>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	@ 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004baa:	f7fd f8f5 	bl	8001d98 <HAL_GetTick>
 8004bae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bb6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc2:	7ffb      	ldrb	r3, [r7, #31]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d00c      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x4a>
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bce:	d106      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x46>
 8004bd8:	7ffb      	ldrb	r3, [r7, #31]
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d001      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
 8004be0:	e17f      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x5c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x5c>
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e174      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x6e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e16d      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x34a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d003      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2205      	movs	r2, #5
 8004c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	887a      	ldrh	r2, [r7, #2]
 8004c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	887a      	ldrh	r2, [r7, #2]
 8004c38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	887a      	ldrh	r2, [r7, #2]
 8004c4a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c62:	2b40      	cmp	r3, #64	@ 0x40
 8004c64:	d007      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c7e:	d17e      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_SPI_TransmitReceive+0xf6>
 8004c88:	8afb      	ldrh	r3, [r7, #22]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d16c      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	881a      	ldrh	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	1c9a      	adds	r2, r3, #2
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cb2:	e059      	b.n	8004d68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d11b      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x162>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d016      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x162>
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d113      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	881a      	ldrh	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce2:	1c9a      	adds	r2, r3, #2
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d119      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x1a4>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d014      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d3c:	f7fd f82c 	bl	8001d98 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d80d      	bhi.n	8004d68 <HAL_SPI_TransmitReceive+0x1d0>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d009      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0bc      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1a0      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x11c>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d19b      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x11c>
 8004d7c:	e082      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x1f4>
 8004d86:	8afb      	ldrh	r3, [r7, #22]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d171      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	7812      	ldrb	r2, [r2, #0]
 8004d98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db2:	e05d      	b.n	8004e70 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d11c      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x264>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d017      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x264>
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d114      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d119      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x2a6>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d014      	beq.n	8004e3e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e3e:	f7fc ffab 	bl	8001d98 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d803      	bhi.n	8004e56 <HAL_SPI_TransmitReceive+0x2be>
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x2c4>
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e038      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d19c      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x21c>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d197      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e84:	6a3a      	ldr	r2, [r7, #32]
 8004e86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f91d 	bl	80050c8 <SPI_EndRxTxTransaction>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e01d      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3728      	adds	r7, #40	@ 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004efc:	f7fc ff4c 	bl	8001d98 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	4413      	add	r3, r2
 8004f0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f0c:	f7fc ff44 	bl	8001d98 <HAL_GetTick>
 8004f10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f12:	4b39      	ldr	r3, [pc, #228]	@ (8004ff8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	015b      	lsls	r3, r3, #5
 8004f18:	0d1b      	lsrs	r3, r3, #20
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	fb02 f303 	mul.w	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f22:	e054      	b.n	8004fce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d050      	beq.n	8004fce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f2c:	f7fc ff34 	bl	8001d98 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d902      	bls.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d13d      	bne.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f5a:	d111      	bne.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f64:	d004      	beq.n	8004f70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d107      	bne.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f88:	d10f      	bne.n	8004faa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e017      	b.n	8004fee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	bf0c      	ite	eq
 8004fde:	2301      	moveq	r3, #1
 8004fe0:	2300      	movne	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d19b      	bne.n	8004f24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000000 	.word	0x20000000

08004ffc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005010:	d111      	bne.n	8005036 <SPI_EndRxTransaction+0x3a>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501a:	d004      	beq.n	8005026 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005024:	d107      	bne.n	8005036 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005034:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800503e:	d12a      	bne.n	8005096 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005048:	d012      	beq.n	8005070 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2200      	movs	r2, #0
 8005052:	2180      	movs	r1, #128	@ 0x80
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff ff49 	bl	8004eec <SPI_WaitFlagStateUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02d      	beq.n	80050bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e026      	b.n	80050be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2200      	movs	r2, #0
 8005078:	2101      	movs	r1, #1
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff ff36 	bl	8004eec <SPI_WaitFlagStateUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01a      	beq.n	80050bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e013      	b.n	80050be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	2101      	movs	r1, #1
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7ff ff23 	bl	8004eec <SPI_WaitFlagStateUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e000      	b.n	80050be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2201      	movs	r2, #1
 80050dc:	2102      	movs	r1, #2
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff ff04 	bl	8004eec <SPI_WaitFlagStateUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e032      	b.n	8005160 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005168 <SPI_EndRxTxTransaction+0xa0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1b      	ldr	r2, [pc, #108]	@ (800516c <SPI_EndRxTxTransaction+0xa4>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	0d5b      	lsrs	r3, r3, #21
 8005106:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005118:	d112      	bne.n	8005140 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	2180      	movs	r1, #128	@ 0x80
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff fee1 	bl	8004eec <SPI_WaitFlagStateUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d016      	beq.n	800515e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e00f      	b.n	8005160 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3b01      	subs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	2b80      	cmp	r3, #128	@ 0x80
 8005158:	d0f2      	beq.n	8005140 <SPI_EndRxTxTransaction+0x78>
 800515a:	e000      	b.n	800515e <SPI_EndRxTxTransaction+0x96>
        break;
 800515c:	bf00      	nop
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000000 	.word	0x20000000
 800516c:	165e9f81 	.word	0x165e9f81

08005170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e041      	b.n	8005206 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc fb80 	bl	800189c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4619      	mov	r1, r3
 80051ae:	4610      	mov	r0, r2
 80051b0:	f000 fb6c 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d001      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e04e      	b.n	80052c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a23      	ldr	r2, [pc, #140]	@ (80052d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d022      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005252:	d01d      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1f      	ldr	r2, [pc, #124]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d018      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1e      	ldr	r2, [pc, #120]	@ (80052dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1c      	ldr	r2, [pc, #112]	@ (80052e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1b      	ldr	r2, [pc, #108]	@ (80052e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a19      	ldr	r2, [pc, #100]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <HAL_TIM_Base_Start_IT+0xdc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d111      	bne.n	80052b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d010      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	e007      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40010400 	.word	0x40010400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40001800 	.word	0x40001800

080052f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6a1a      	ldr	r2, [r3, #32]
 800530e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10f      	bne.n	8005338 <HAL_TIM_Base_Stop_IT+0x48>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d107      	bne.n	8005338 <HAL_TIM_Base_Stop_IT+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e041      	b.n	80053e4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f839 	bl	80053ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f000 fa7d 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0202 	mvn.w	r2, #2
 8005434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f9ff 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9f1 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fa02 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d020      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01b      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0204 	mvn.w	r2, #4
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9d9 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f9cb 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f9dc 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d020      	beq.n	80054fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0208 	mvn.w	r2, #8
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2204      	movs	r2, #4
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9b3 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f9a5 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f9b6 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d020      	beq.n	8005548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f98d 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f97f 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f990 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0201 	mvn.w	r2, #1
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f95d 	bl	8005826 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fd4c 	bl	8006028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f961 	bl	8005876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0220 	mvn.w	r2, #32
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fd1e 	bl	8006014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e048      	b.n	8005690 <HAL_TIM_OC_ConfigChannel+0xb0>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b0c      	cmp	r3, #12
 800560a:	d839      	bhi.n	8005680 <HAL_TIM_OC_ConfigChannel+0xa0>
 800560c:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <HAL_TIM_OC_ConfigChannel+0x34>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005649 	.word	0x08005649
 8005618:	08005681 	.word	0x08005681
 800561c:	08005681 	.word	0x08005681
 8005620:	08005681 	.word	0x08005681
 8005624:	08005657 	.word	0x08005657
 8005628:	08005681 	.word	0x08005681
 800562c:	08005681 	.word	0x08005681
 8005630:	08005681 	.word	0x08005681
 8005634:	08005665 	.word	0x08005665
 8005638:	08005681 	.word	0x08005681
 800563c:	08005681 	.word	0x08005681
 8005640:	08005681 	.word	0x08005681
 8005644:	08005673 	.word	0x08005673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f9c8 	bl	80059e4 <TIM_OC1_SetConfig>
      break;
 8005654:	e017      	b.n	8005686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fa31 	bl	8005ac4 <TIM_OC2_SetConfig>
      break;
 8005662:	e010      	b.n	8005686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 faa0 	bl	8005bb0 <TIM_OC3_SetConfig>
      break;
 8005670:	e009      	b.n	8005686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fb0d 	bl	8005c98 <TIM_OC4_SetConfig>
      break;
 800567e:	e002      	b.n	8005686 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
      break;
 8005684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800568e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIM_ConfigClockSource+0x1c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e0b4      	b.n	800581e <HAL_TIM_ConfigClockSource+0x186>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ec:	d03e      	beq.n	800576c <HAL_TIM_ConfigClockSource+0xd4>
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f2:	f200 8087 	bhi.w	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fa:	f000 8086 	beq.w	800580a <HAL_TIM_ConfigClockSource+0x172>
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005702:	d87f      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b70      	cmp	r3, #112	@ 0x70
 8005706:	d01a      	beq.n	800573e <HAL_TIM_ConfigClockSource+0xa6>
 8005708:	2b70      	cmp	r3, #112	@ 0x70
 800570a:	d87b      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b60      	cmp	r3, #96	@ 0x60
 800570e:	d050      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005710:	2b60      	cmp	r3, #96	@ 0x60
 8005712:	d877      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b50      	cmp	r3, #80	@ 0x50
 8005716:	d03c      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0xfa>
 8005718:	2b50      	cmp	r3, #80	@ 0x50
 800571a:	d873      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b40      	cmp	r3, #64	@ 0x40
 800571e:	d058      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005720:	2b40      	cmp	r3, #64	@ 0x40
 8005722:	d86f      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b30      	cmp	r3, #48	@ 0x30
 8005726:	d064      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005728:	2b30      	cmp	r3, #48	@ 0x30
 800572a:	d86b      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b20      	cmp	r3, #32
 800572e:	d060      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005730:	2b20      	cmp	r3, #32
 8005732:	d867      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d05c      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005738:	2b10      	cmp	r3, #16
 800573a:	d05a      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x15a>
 800573c:	e062      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800574e:	f000 fb73 	bl	8005e38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	609a      	str	r2, [r3, #8]
      break;
 800576a:	e04f      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800577c:	f000 fb5c 	bl	8005e38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800578e:	609a      	str	r2, [r3, #8]
      break;
 8005790:	e03c      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800579e:	461a      	mov	r2, r3
 80057a0:	f000 fad0 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2150      	movs	r1, #80	@ 0x50
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fb29 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 80057b0:	e02c      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 faef 	bl	8005da2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2160      	movs	r1, #96	@ 0x60
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fb19 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 80057d0:	e01c      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 fab0 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2140      	movs	r1, #64	@ 0x40
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fb09 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 80057f0:	e00c      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f000 fb00 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 8005802:	e003      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      break;
 8005808:	e000      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800580a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a46      	ldr	r2, [pc, #280]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a43      	ldr	r2, [pc, #268]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a42      	ldr	r2, [pc, #264]	@ (80059c0 <TIM_Base_SetConfig+0x134>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a41      	ldr	r2, [pc, #260]	@ (80059c4 <TIM_Base_SetConfig+0x138>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a40      	ldr	r2, [pc, #256]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a35      	ldr	r2, [pc, #212]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ec:	d027      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a32      	ldr	r2, [pc, #200]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d023      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a31      	ldr	r2, [pc, #196]	@ (80059c0 <TIM_Base_SetConfig+0x134>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01f      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a30      	ldr	r2, [pc, #192]	@ (80059c4 <TIM_Base_SetConfig+0x138>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2f      	ldr	r2, [pc, #188]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d017      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2e      	ldr	r2, [pc, #184]	@ (80059cc <TIM_Base_SetConfig+0x140>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2d      	ldr	r2, [pc, #180]	@ (80059d0 <TIM_Base_SetConfig+0x144>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2c      	ldr	r2, [pc, #176]	@ (80059d4 <TIM_Base_SetConfig+0x148>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2b      	ldr	r2, [pc, #172]	@ (80059d8 <TIM_Base_SetConfig+0x14c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2a      	ldr	r2, [pc, #168]	@ (80059dc <TIM_Base_SetConfig+0x150>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a29      	ldr	r2, [pc, #164]	@ (80059e0 <TIM_Base_SetConfig+0x154>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a10      	ldr	r2, [pc, #64]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0xf8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a12      	ldr	r2, [pc, #72]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d105      	bne.n	80059aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	611a      	str	r2, [r3, #16]
  }
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40010400 	.word	0x40010400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400
 80059d4:	40014800 	.word	0x40014800
 80059d8:	40001800 	.word	0x40001800
 80059dc:	40001c00 	.word	0x40001c00
 80059e0:	40002000 	.word	0x40002000

080059e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 0201 	bic.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0302 	bic.w	r3, r3, #2
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a20      	ldr	r2, [pc, #128]	@ (8005abc <TIM_OC1_SetConfig+0xd8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_OC1_SetConfig+0x64>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac0 <TIM_OC1_SetConfig+0xdc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d10c      	bne.n	8005a62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0308 	bic.w	r3, r3, #8
 8005a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <TIM_OC1_SetConfig+0xd8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_OC1_SetConfig+0x8e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a14      	ldr	r2, [pc, #80]	@ (8005ac0 <TIM_OC1_SetConfig+0xdc>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d111      	bne.n	8005a96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	621a      	str	r2, [r3, #32]
}
 8005ab0:	bf00      	nop
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40010400 	.word	0x40010400

08005ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f023 0210 	bic.w	r2, r3, #16
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0320 	bic.w	r3, r3, #32
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ba8 <TIM_OC2_SetConfig+0xe4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC2_SetConfig+0x68>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a21      	ldr	r2, [pc, #132]	@ (8005bac <TIM_OC2_SetConfig+0xe8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d10d      	bne.n	8005b48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ba8 <TIM_OC2_SetConfig+0xe4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_OC2_SetConfig+0x94>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <TIM_OC2_SetConfig+0xe8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d113      	bne.n	8005b80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40010000 	.word	0x40010000
 8005bac:	40010400 	.word	0x40010400

08005bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a21      	ldr	r2, [pc, #132]	@ (8005c90 <TIM_OC3_SetConfig+0xe0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_OC3_SetConfig+0x66>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a20      	ldr	r2, [pc, #128]	@ (8005c94 <TIM_OC3_SetConfig+0xe4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10d      	bne.n	8005c32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a16      	ldr	r2, [pc, #88]	@ (8005c90 <TIM_OC3_SetConfig+0xe0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC3_SetConfig+0x92>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a15      	ldr	r2, [pc, #84]	@ (8005c94 <TIM_OC3_SetConfig+0xe4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d113      	bne.n	8005c6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	621a      	str	r2, [r3, #32]
}
 8005c84:	bf00      	nop
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40010400 	.word	0x40010400

08005c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	031b      	lsls	r3, r3, #12
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <TIM_OC4_SetConfig+0xa4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC4_SetConfig+0x68>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a11      	ldr	r2, [pc, #68]	@ (8005d40 <TIM_OC4_SetConfig+0xa8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d109      	bne.n	8005d14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40010000 	.word	0x40010000
 8005d40:	40010400 	.word	0x40010400

08005d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	f023 0201 	bic.w	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 030a 	bic.w	r3, r3, #10
 8005d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b087      	sub	sp, #28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f023 0210 	bic.w	r2, r3, #16
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	031b      	lsls	r3, r3, #12
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f043 0307 	orr.w	r3, r3, #7
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	021a      	lsls	r2, r3, #8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	609a      	str	r2, [r3, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e05a      	b.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a21      	ldr	r2, [pc, #132]	@ (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005edc:	d01d      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d018      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1b      	ldr	r2, [pc, #108]	@ (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a18      	ldr	r2, [pc, #96]	@ (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a17      	ldr	r2, [pc, #92]	@ (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a15      	ldr	r2, [pc, #84]	@ (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d10c      	bne.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40001800 	.word	0x40001800

08005f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e03d      	b.n	8006008 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e042      	b.n	80060d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fb fc5a 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2224      	movs	r2, #36	@ 0x24
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800607e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fc85 	bl	8006990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b0ba      	sub	sp, #232	@ 0xe8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006102:	2300      	movs	r3, #0
 8006104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006108:	2300      	movs	r3, #0
 800610a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800611a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10f      	bne.n	8006142 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_UART_IRQHandler+0x66>
 800612e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fb69 	bl	8006812 <UART_Receive_IT>
      return;
 8006140:	e25b      	b.n	80065fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80de 	beq.w	8006308 <HAL_UART_IRQHandler+0x22c>
 800614c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800615c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80d1 	beq.w	8006308 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <HAL_UART_IRQHandler+0xae>
 8006172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	f043 0201 	orr.w	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <HAL_UART_IRQHandler+0xd2>
 8006196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a6:	f043 0202 	orr.w	r2, r3, #2
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <HAL_UART_IRQHandler+0xf6>
 80061ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ca:	f043 0204 	orr.w	r2, r3, #4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d011      	beq.n	8006202 <HAL_UART_IRQHandler+0x126>
 80061de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d105      	bne.n	80061f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fa:	f043 0208 	orr.w	r2, r3, #8
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 81f2 	beq.w	80065f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_UART_IRQHandler+0x14e>
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 faf4 	bl	8006812 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	bf0c      	ite	eq
 8006238:	2301      	moveq	r3, #1
 800623a:	2300      	movne	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <HAL_UART_IRQHandler+0x17a>
 800624e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d04f      	beq.n	80062f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9fc 	bl	8006654 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006266:	2b40      	cmp	r3, #64	@ 0x40
 8006268:	d141      	bne.n	80062ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3314      	adds	r3, #20
 8006270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3314      	adds	r3, #20
 8006292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006296:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800629a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1d9      	bne.n	800626a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d013      	beq.n	80062e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c2:	4a7e      	ldr	r2, [pc, #504]	@ (80064bc <HAL_UART_IRQHandler+0x3e0>)
 80062c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fb ffc4 	bl	8002258 <HAL_DMA_Abort_IT>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e4:	e00e      	b.n	8006304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f99e 	bl	8006628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	e00a      	b.n	8006304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f99a 	bl	8006628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	e006      	b.n	8006304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f996 	bl	8006628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006302:	e175      	b.n	80065f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	bf00      	nop
    return;
 8006306:	e173      	b.n	80065f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630c:	2b01      	cmp	r3, #1
 800630e:	f040 814f 	bne.w	80065b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8148 	beq.w	80065b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8141 	beq.w	80065b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	60bb      	str	r3, [r7, #8]
 8006342:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634e:	2b40      	cmp	r3, #64	@ 0x40
 8006350:	f040 80b6 	bne.w	80064c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8145 	beq.w	80065f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800636e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006372:	429a      	cmp	r2, r3
 8006374:	f080 813e 	bcs.w	80065f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800637e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800638a:	f000 8088 	beq.w	800649e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	330c      	adds	r3, #12
 80063b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1d9      	bne.n	800638e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3314      	adds	r3, #20
 80063e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3314      	adds	r3, #20
 80063fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006402:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006406:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e1      	bne.n	80063da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3314      	adds	r3, #20
 800641c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3314      	adds	r3, #20
 8006436:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800643a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800643c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006440:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e3      	bne.n	8006416 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800646c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800646e:	f023 0310 	bic.w	r3, r3, #16
 8006472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006480:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006482:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006486:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800648e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e3      	bne.n	800645c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006498:	4618      	mov	r0, r3
 800649a:	f7fb fe6d 	bl	8002178 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f8c1 	bl	800663c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064ba:	e09b      	b.n	80065f4 <HAL_UART_IRQHandler+0x518>
 80064bc:	0800671b 	.word	0x0800671b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 808e 	beq.w	80065f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80064dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8089 	beq.w	80065f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	330c      	adds	r3, #12
 80064ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800650a:	647a      	str	r2, [r7, #68]	@ 0x44
 800650c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e3      	bne.n	80064e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3314      	adds	r3, #20
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	623b      	str	r3, [r7, #32]
   return(result);
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f023 0301 	bic.w	r3, r3, #1
 8006534:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3314      	adds	r3, #20
 800653e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006542:	633a      	str	r2, [r7, #48]	@ 0x30
 8006544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e3      	bne.n	800651e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	330c      	adds	r3, #12
 800656a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	60fb      	str	r3, [r7, #12]
   return(result);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0310 	bic.w	r3, r3, #16
 800657a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006588:	61fa      	str	r2, [r7, #28]
 800658a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	69b9      	ldr	r1, [r7, #24]
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	617b      	str	r3, [r7, #20]
   return(result);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e3      	bne.n	8006564 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f847 	bl	800663c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065ae:	e023      	b.n	80065f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <HAL_UART_IRQHandler+0x4f4>
 80065bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8ba 	bl	8006742 <UART_Transmit_IT>
    return;
 80065ce:	e014      	b.n	80065fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00e      	beq.n	80065fa <HAL_UART_IRQHandler+0x51e>
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d008      	beq.n	80065fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8fa 	bl	80067e2 <UART_EndTransmit_IT>
    return;
 80065ee:	e004      	b.n	80065fa <HAL_UART_IRQHandler+0x51e>
    return;
 80065f0:	bf00      	nop
 80065f2:	e002      	b.n	80065fa <HAL_UART_IRQHandler+0x51e>
      return;
 80065f4:	bf00      	nop
 80065f6:	e000      	b.n	80065fa <HAL_UART_IRQHandler+0x51e>
      return;
 80065f8:	bf00      	nop
  }
}
 80065fa:	37e8      	adds	r7, #232	@ 0xe8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b095      	sub	sp, #84	@ 0x54
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800666c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800667c:	643a      	str	r2, [r7, #64]	@ 0x40
 800667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800668a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e5      	bne.n	800665c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3314      	adds	r3, #20
 8006696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	61fb      	str	r3, [r7, #28]
   return(result);
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f023 0301 	bic.w	r3, r3, #1
 80066a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3314      	adds	r3, #20
 80066ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e5      	bne.n	8006690 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d119      	bne.n	8006700 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	60bb      	str	r3, [r7, #8]
   return(result);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f023 0310 	bic.w	r3, r3, #16
 80066e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ec:	61ba      	str	r2, [r7, #24]
 80066ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6979      	ldr	r1, [r7, #20]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	613b      	str	r3, [r7, #16]
   return(result);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800670e:	bf00      	nop
 8006710:	3754      	adds	r7, #84	@ 0x54
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006726:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff ff77 	bl	8006628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b21      	cmp	r3, #33	@ 0x21
 8006754:	d13e      	bne.n	80067d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675e:	d114      	bne.n	800678a <UART_Transmit_IT+0x48>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d110      	bne.n	800678a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800677c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	1c9a      	adds	r2, r3, #2
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	621a      	str	r2, [r3, #32]
 8006788:	e008      	b.n	800679c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	1c59      	adds	r1, r3, #1
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6211      	str	r1, [r2, #32]
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4619      	mov	r1, r3
 80067aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10f      	bne.n	80067d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
  }
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fefc 	bl	8006600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b08c      	sub	sp, #48	@ 0x30
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b22      	cmp	r3, #34	@ 0x22
 8006824:	f040 80ae 	bne.w	8006984 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006830:	d117      	bne.n	8006862 <UART_Receive_IT+0x50>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d113      	bne.n	8006862 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006842:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006850:	b29a      	uxth	r2, r3
 8006852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006854:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006860:	e026      	b.n	80068b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006866:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006868:	2300      	movs	r3, #0
 800686a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006874:	d007      	beq.n	8006886 <UART_Receive_IT+0x74>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10a      	bne.n	8006894 <UART_Receive_IT+0x82>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	e008      	b.n	80068a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	4619      	mov	r1, r3
 80068be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d15d      	bne.n	8006980 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0220 	bic.w	r2, r2, #32
 80068d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0201 	bic.w	r2, r2, #1
 80068f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006906:	2b01      	cmp	r3, #1
 8006908:	d135      	bne.n	8006976 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	613b      	str	r3, [r7, #16]
   return(result);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f023 0310 	bic.w	r3, r3, #16
 8006926:	627b      	str	r3, [r7, #36]	@ 0x24
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	330c      	adds	r3, #12
 800692e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006930:	623a      	str	r2, [r7, #32]
 8006932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	69f9      	ldr	r1, [r7, #28]
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	61bb      	str	r3, [r7, #24]
   return(result);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e5      	bne.n	8006910 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b10      	cmp	r3, #16
 8006950:	d10a      	bne.n	8006968 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fe64 	bl	800663c <HAL_UARTEx_RxEventCallback>
 8006974:	e002      	b.n	800697c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fe4c 	bl	8006614 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	e002      	b.n	8006986 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3730      	adds	r7, #48	@ 0x30
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006994:	b0c0      	sub	sp, #256	@ 0x100
 8006996:	af00      	add	r7, sp, #0
 8006998:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ac:	68d9      	ldr	r1, [r3, #12]
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	ea40 0301 	orr.w	r3, r0, r1
 80069b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80069e8:	f021 010c 	bic.w	r1, r1, #12
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069f6:	430b      	orrs	r3, r1
 80069f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0a:	6999      	ldr	r1, [r3, #24]
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	ea40 0301 	orr.w	r3, r0, r1
 8006a16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c5c <UART_SetConfig+0x2cc>)
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d005      	beq.n	8006a30 <UART_SetConfig+0xa0>
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006c60 <UART_SetConfig+0x2d0>)
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d104      	bne.n	8006a3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a30:	f7fd fefc 	bl	800482c <HAL_RCC_GetPCLK2Freq>
 8006a34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a38:	e003      	b.n	8006a42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a3a:	f7fd fee3 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 8006a3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a4c:	f040 810c 	bne.w	8006c68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a62:	4622      	mov	r2, r4
 8006a64:	462b      	mov	r3, r5
 8006a66:	1891      	adds	r1, r2, r2
 8006a68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a6a:	415b      	adcs	r3, r3
 8006a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a72:	4621      	mov	r1, r4
 8006a74:	eb12 0801 	adds.w	r8, r2, r1
 8006a78:	4629      	mov	r1, r5
 8006a7a:	eb43 0901 	adc.w	r9, r3, r1
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a92:	4690      	mov	r8, r2
 8006a94:	4699      	mov	r9, r3
 8006a96:	4623      	mov	r3, r4
 8006a98:	eb18 0303 	adds.w	r3, r8, r3
 8006a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	eb49 0303 	adc.w	r3, r9, r3
 8006aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ab6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006aba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006abe:	460b      	mov	r3, r1
 8006ac0:	18db      	adds	r3, r3, r3
 8006ac2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	eb42 0303 	adc.w	r3, r2, r3
 8006aca:	657b      	str	r3, [r7, #84]	@ 0x54
 8006acc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ad0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ad4:	f7fa f8b8 	bl	8000c48 <__aeabi_uldivmod>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4b61      	ldr	r3, [pc, #388]	@ (8006c64 <UART_SetConfig+0x2d4>)
 8006ade:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	011c      	lsls	r4, r3, #4
 8006ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006af0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006af4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	1891      	adds	r1, r2, r2
 8006afe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b00:	415b      	adcs	r3, r3
 8006b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b08:	4641      	mov	r1, r8
 8006b0a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b0e:	4649      	mov	r1, r9
 8006b10:	eb43 0b01 	adc.w	fp, r3, r1
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b28:	4692      	mov	sl, r2
 8006b2a:	469b      	mov	fp, r3
 8006b2c:	4643      	mov	r3, r8
 8006b2e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b36:	464b      	mov	r3, r9
 8006b38:	eb4b 0303 	adc.w	r3, fp, r3
 8006b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b54:	460b      	mov	r3, r1
 8006b56:	18db      	adds	r3, r3, r3
 8006b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	eb42 0303 	adc.w	r3, r2, r3
 8006b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b6a:	f7fa f86d 	bl	8000c48 <__aeabi_uldivmod>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	4b3b      	ldr	r3, [pc, #236]	@ (8006c64 <UART_SetConfig+0x2d4>)
 8006b76:	fba3 2301 	umull	r2, r3, r3, r1
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	2264      	movs	r2, #100	@ 0x64
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	1acb      	subs	r3, r1, r3
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b8a:	4b36      	ldr	r3, [pc, #216]	@ (8006c64 <UART_SetConfig+0x2d4>)
 8006b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b98:	441c      	add	r4, r3
 8006b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ba4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ba8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	1891      	adds	r1, r2, r2
 8006bb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bb4:	415b      	adcs	r3, r3
 8006bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bbc:	4641      	mov	r1, r8
 8006bbe:	1851      	adds	r1, r2, r1
 8006bc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	414b      	adcs	r3, r1
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bd4:	4659      	mov	r1, fp
 8006bd6:	00cb      	lsls	r3, r1, #3
 8006bd8:	4651      	mov	r1, sl
 8006bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bde:	4651      	mov	r1, sl
 8006be0:	00ca      	lsls	r2, r1, #3
 8006be2:	4610      	mov	r0, r2
 8006be4:	4619      	mov	r1, r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	4642      	mov	r2, r8
 8006bea:	189b      	adds	r3, r3, r2
 8006bec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	460a      	mov	r2, r1
 8006bf4:	eb42 0303 	adc.w	r3, r2, r3
 8006bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c10:	460b      	mov	r3, r1
 8006c12:	18db      	adds	r3, r3, r3
 8006c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c16:	4613      	mov	r3, r2
 8006c18:	eb42 0303 	adc.w	r3, r2, r3
 8006c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c26:	f7fa f80f 	bl	8000c48 <__aeabi_uldivmod>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c64 <UART_SetConfig+0x2d4>)
 8006c30:	fba3 1302 	umull	r1, r3, r3, r2
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	2164      	movs	r1, #100	@ 0x64
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	3332      	adds	r3, #50	@ 0x32
 8006c42:	4a08      	ldr	r2, [pc, #32]	@ (8006c64 <UART_SetConfig+0x2d4>)
 8006c44:	fba2 2303 	umull	r2, r3, r2, r3
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	f003 0207 	and.w	r2, r3, #7
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4422      	add	r2, r4
 8006c56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c58:	e106      	b.n	8006e68 <UART_SetConfig+0x4d8>
 8006c5a:	bf00      	nop
 8006c5c:	40011000 	.word	0x40011000
 8006c60:	40011400 	.word	0x40011400
 8006c64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	1891      	adds	r1, r2, r2
 8006c80:	6239      	str	r1, [r7, #32]
 8006c82:	415b      	adcs	r3, r3
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c8a:	4641      	mov	r1, r8
 8006c8c:	1854      	adds	r4, r2, r1
 8006c8e:	4649      	mov	r1, r9
 8006c90:	eb43 0501 	adc.w	r5, r3, r1
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	00eb      	lsls	r3, r5, #3
 8006c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ca2:	00e2      	lsls	r2, r4, #3
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	461d      	mov	r5, r3
 8006ca8:	4643      	mov	r3, r8
 8006caa:	18e3      	adds	r3, r4, r3
 8006cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	eb45 0303 	adc.w	r3, r5, r3
 8006cb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	008b      	lsls	r3, r1, #2
 8006cda:	4621      	mov	r1, r4
 8006cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	008a      	lsls	r2, r1, #2
 8006ce4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ce8:	f7f9 ffae 	bl	8000c48 <__aeabi_uldivmod>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4b60      	ldr	r3, [pc, #384]	@ (8006e74 <UART_SetConfig+0x4e4>)
 8006cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	011c      	lsls	r4, r3, #4
 8006cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	464b      	mov	r3, r9
 8006d10:	1891      	adds	r1, r2, r2
 8006d12:	61b9      	str	r1, [r7, #24]
 8006d14:	415b      	adcs	r3, r3
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	1851      	adds	r1, r2, r1
 8006d20:	6139      	str	r1, [r7, #16]
 8006d22:	4649      	mov	r1, r9
 8006d24:	414b      	adcs	r3, r1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d34:	4659      	mov	r1, fp
 8006d36:	00cb      	lsls	r3, r1, #3
 8006d38:	4651      	mov	r1, sl
 8006d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d3e:	4651      	mov	r1, sl
 8006d40:	00ca      	lsls	r2, r1, #3
 8006d42:	4610      	mov	r0, r2
 8006d44:	4619      	mov	r1, r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	4642      	mov	r2, r8
 8006d4a:	189b      	adds	r3, r3, r2
 8006d4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d50:	464b      	mov	r3, r9
 8006d52:	460a      	mov	r2, r1
 8006d54:	eb42 0303 	adc.w	r3, r2, r3
 8006d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d74:	4649      	mov	r1, r9
 8006d76:	008b      	lsls	r3, r1, #2
 8006d78:	4641      	mov	r1, r8
 8006d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d7e:	4641      	mov	r1, r8
 8006d80:	008a      	lsls	r2, r1, #2
 8006d82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d86:	f7f9 ff5f 	bl	8000c48 <__aeabi_uldivmod>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4b38      	ldr	r3, [pc, #224]	@ (8006e74 <UART_SetConfig+0x4e4>)
 8006d92:	fba3 2301 	umull	r2, r3, r3, r1
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	2264      	movs	r2, #100	@ 0x64
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	1acb      	subs	r3, r1, r3
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	3332      	adds	r3, #50	@ 0x32
 8006da4:	4a33      	ldr	r2, [pc, #204]	@ (8006e74 <UART_SetConfig+0x4e4>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006db0:	441c      	add	r4, r3
 8006db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006db6:	2200      	movs	r2, #0
 8006db8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dba:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	1891      	adds	r1, r2, r2
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	415b      	adcs	r3, r3
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	1851      	adds	r1, r2, r1
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	414b      	adcs	r3, r1
 8006dda:	607b      	str	r3, [r7, #4]
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006de8:	4659      	mov	r1, fp
 8006dea:	00cb      	lsls	r3, r1, #3
 8006dec:	4651      	mov	r1, sl
 8006dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006df2:	4651      	mov	r1, sl
 8006df4:	00ca      	lsls	r2, r1, #3
 8006df6:	4610      	mov	r0, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	189b      	adds	r3, r3, r2
 8006e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e02:	464b      	mov	r3, r9
 8006e04:	460a      	mov	r2, r1
 8006e06:	eb42 0303 	adc.w	r3, r2, r3
 8006e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e16:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e24:	4649      	mov	r1, r9
 8006e26:	008b      	lsls	r3, r1, #2
 8006e28:	4641      	mov	r1, r8
 8006e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e2e:	4641      	mov	r1, r8
 8006e30:	008a      	lsls	r2, r1, #2
 8006e32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e36:	f7f9 ff07 	bl	8000c48 <__aeabi_uldivmod>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e74 <UART_SetConfig+0x4e4>)
 8006e40:	fba3 1302 	umull	r1, r3, r3, r2
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	2164      	movs	r1, #100	@ 0x64
 8006e48:	fb01 f303 	mul.w	r3, r1, r3
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	3332      	adds	r3, #50	@ 0x32
 8006e52:	4a08      	ldr	r2, [pc, #32]	@ (8006e74 <UART_SetConfig+0x4e4>)
 8006e54:	fba2 2303 	umull	r2, r3, r2, r3
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	f003 020f 	and.w	r2, r3, #15
 8006e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4422      	add	r2, r4
 8006e66:	609a      	str	r2, [r3, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e74:	51eb851f 	.word	0x51eb851f

08006e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e78:	b084      	sub	sp, #16
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	f107 001c 	add.w	r0, r7, #28
 8006e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d123      	bne.n	8006eda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d105      	bne.n	8006ece <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fae8 	bl	80084a4 <USB_CoreReset>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
 8006ed8:	e01b      	b.n	8006f12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fadc 	bl	80084a4 <USB_CoreReset>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ef0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d106      	bne.n	8006f06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f04:	e005      	b.n	8006f12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f12:	7fbb      	ldrb	r3, [r7, #30]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10b      	bne.n	8006f30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f043 0206 	orr.w	r2, r3, #6
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f3c:	b004      	add	sp, #16
 8006f3e:	4770      	bx	lr

08006f40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d165      	bne.n	8007020 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a41      	ldr	r2, [pc, #260]	@ (800705c <USB_SetTurnaroundTime+0x11c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d906      	bls.n	8006f6a <USB_SetTurnaroundTime+0x2a>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4a40      	ldr	r2, [pc, #256]	@ (8007060 <USB_SetTurnaroundTime+0x120>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d202      	bcs.n	8006f6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f64:	230f      	movs	r3, #15
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e062      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8007060 <USB_SetTurnaroundTime+0x120>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d306      	bcc.n	8006f80 <USB_SetTurnaroundTime+0x40>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	4a3b      	ldr	r2, [pc, #236]	@ (8007064 <USB_SetTurnaroundTime+0x124>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d202      	bcs.n	8006f80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f7a:	230e      	movs	r3, #14
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	e057      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a38      	ldr	r2, [pc, #224]	@ (8007064 <USB_SetTurnaroundTime+0x124>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d306      	bcc.n	8006f96 <USB_SetTurnaroundTime+0x56>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4a37      	ldr	r2, [pc, #220]	@ (8007068 <USB_SetTurnaroundTime+0x128>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d202      	bcs.n	8006f96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f90:	230d      	movs	r3, #13
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e04c      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4a33      	ldr	r2, [pc, #204]	@ (8007068 <USB_SetTurnaroundTime+0x128>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d306      	bcc.n	8006fac <USB_SetTurnaroundTime+0x6c>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	@ (800706c <USB_SetTurnaroundTime+0x12c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d802      	bhi.n	8006fac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e041      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4a2f      	ldr	r2, [pc, #188]	@ (800706c <USB_SetTurnaroundTime+0x12c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d906      	bls.n	8006fc2 <USB_SetTurnaroundTime+0x82>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8007070 <USB_SetTurnaroundTime+0x130>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d802      	bhi.n	8006fc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fbc:	230b      	movs	r3, #11
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e036      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8007070 <USB_SetTurnaroundTime+0x130>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d906      	bls.n	8006fd8 <USB_SetTurnaroundTime+0x98>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4a29      	ldr	r2, [pc, #164]	@ (8007074 <USB_SetTurnaroundTime+0x134>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d802      	bhi.n	8006fd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	e02b      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4a26      	ldr	r2, [pc, #152]	@ (8007074 <USB_SetTurnaroundTime+0x134>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d906      	bls.n	8006fee <USB_SetTurnaroundTime+0xae>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a25      	ldr	r2, [pc, #148]	@ (8007078 <USB_SetTurnaroundTime+0x138>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d202      	bcs.n	8006fee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fe8:	2309      	movs	r3, #9
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e020      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4a21      	ldr	r2, [pc, #132]	@ (8007078 <USB_SetTurnaroundTime+0x138>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d306      	bcc.n	8007004 <USB_SetTurnaroundTime+0xc4>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4a20      	ldr	r2, [pc, #128]	@ (800707c <USB_SetTurnaroundTime+0x13c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d802      	bhi.n	8007004 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ffe:	2308      	movs	r3, #8
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	e015      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4a1d      	ldr	r2, [pc, #116]	@ (800707c <USB_SetTurnaroundTime+0x13c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d906      	bls.n	800701a <USB_SetTurnaroundTime+0xda>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a1c      	ldr	r2, [pc, #112]	@ (8007080 <USB_SetTurnaroundTime+0x140>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d202      	bcs.n	800701a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007014:	2307      	movs	r3, #7
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e00a      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800701a:	2306      	movs	r3, #6
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e007      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007026:	2309      	movs	r3, #9
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e001      	b.n	8007030 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800702c:	2309      	movs	r3, #9
 800702e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	029b      	lsls	r3, r3, #10
 8007044:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007048:	431a      	orrs	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	00d8acbf 	.word	0x00d8acbf
 8007060:	00e4e1c0 	.word	0x00e4e1c0
 8007064:	00f42400 	.word	0x00f42400
 8007068:	01067380 	.word	0x01067380
 800706c:	011a499f 	.word	0x011a499f
 8007070:	01312cff 	.word	0x01312cff
 8007074:	014ca43f 	.word	0x014ca43f
 8007078:	016e3600 	.word	0x016e3600
 800707c:	01a6ab1f 	.word	0x01a6ab1f
 8007080:	01e84800 	.word	0x01e84800

08007084 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f043 0201 	orr.w	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f023 0201 	bic.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d115      	bne.n	8007116 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070f6:	200a      	movs	r0, #10
 80070f8:	f7fa fe5a 	bl	8001db0 <HAL_Delay>
      ms += 10U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	330a      	adds	r3, #10
 8007100:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f93f 	bl	8008386 <USB_GetMode>
 8007108:	4603      	mov	r3, r0
 800710a:	2b01      	cmp	r3, #1
 800710c:	d01e      	beq.n	800714c <USB_SetCurrentMode+0x84>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2bc7      	cmp	r3, #199	@ 0xc7
 8007112:	d9f0      	bls.n	80070f6 <USB_SetCurrentMode+0x2e>
 8007114:	e01a      	b.n	800714c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d115      	bne.n	8007148 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007128:	200a      	movs	r0, #10
 800712a:	f7fa fe41 	bl	8001db0 <HAL_Delay>
      ms += 10U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	330a      	adds	r3, #10
 8007132:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 f926 	bl	8008386 <USB_GetMode>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <USB_SetCurrentMode+0x84>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2bc7      	cmp	r3, #199	@ 0xc7
 8007144:	d9f0      	bls.n	8007128 <USB_SetCurrentMode+0x60>
 8007146:	e001      	b.n	800714c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e005      	b.n	8007158 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007150:	d101      	bne.n	8007156 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007160:	b084      	sub	sp, #16
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800716e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800717a:	2300      	movs	r3, #0
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	e009      	b.n	8007194 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3340      	adds	r3, #64	@ 0x40
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	2200      	movs	r2, #0
 800718c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	3301      	adds	r3, #1
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b0e      	cmp	r3, #14
 8007198:	d9f2      	bls.n	8007180 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800719a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d11c      	bne.n	80071dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80071da:	e00b      	b.n	80071f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071fa:	461a      	mov	r2, r3
 80071fc:	2300      	movs	r3, #0
 80071fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007200:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007204:	2b01      	cmp	r3, #1
 8007206:	d10d      	bne.n	8007224 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007210:	2100      	movs	r1, #0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f968 	bl	80074e8 <USB_SetDevSpeed>
 8007218:	e008      	b.n	800722c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800721a:	2101      	movs	r1, #1
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f963 	bl	80074e8 <USB_SetDevSpeed>
 8007222:	e003      	b.n	800722c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007224:	2103      	movs	r1, #3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f95e 	bl	80074e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800722c:	2110      	movs	r1, #16
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8fa 	bl	8007428 <USB_FlushTxFifo>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f924 	bl	800748c <USB_FlushRxFifo>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007254:	461a      	mov	r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007260:	461a      	mov	r2, r3
 8007262:	2300      	movs	r3, #0
 8007264:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726c:	461a      	mov	r2, r3
 800726e:	2300      	movs	r3, #0
 8007270:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007272:	2300      	movs	r3, #0
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	e043      	b.n	8007300 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800728a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800728e:	d118      	bne.n	80072c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a2:	461a      	mov	r2, r3
 80072a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	e013      	b.n	80072d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b8:	461a      	mov	r2, r3
 80072ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	e008      	b.n	80072d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ce:	461a      	mov	r2, r3
 80072d0:	2300      	movs	r3, #0
 80072d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e0:	461a      	mov	r2, r3
 80072e2:	2300      	movs	r3, #0
 80072e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f2:	461a      	mov	r2, r3
 80072f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	3301      	adds	r3, #1
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007304:	461a      	mov	r2, r3
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	4293      	cmp	r3, r2
 800730a:	d3b5      	bcc.n	8007278 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	e043      	b.n	800739a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007328:	d118      	bne.n	800735c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733c:	461a      	mov	r2, r3
 800733e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	e013      	b.n	800736e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007352:	461a      	mov	r2, r3
 8007354:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	e008      	b.n	800736e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007368:	461a      	mov	r2, r3
 800736a:	2300      	movs	r3, #0
 800736c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737a:	461a      	mov	r2, r3
 800737c:	2300      	movs	r3, #0
 800737e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738c:	461a      	mov	r2, r3
 800738e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007392:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3301      	adds	r3, #1
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800739e:	461a      	mov	r2, r3
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d3b5      	bcc.n	8007312 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f043 0210 	orr.w	r2, r3, #16
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699a      	ldr	r2, [r3, #24]
 80073e0:	4b10      	ldr	r3, [pc, #64]	@ (8007424 <USB_DevInit+0x2c4>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f043 0208 	orr.w	r2, r3, #8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007400:	2b01      	cmp	r3, #1
 8007402:	d107      	bne.n	8007414 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800740c:	f043 0304 	orr.w	r3, r3, #4
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007420:	b004      	add	sp, #16
 8007422:	4770      	bx	lr
 8007424:	803c3800 	.word	0x803c3800

08007428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007442:	d901      	bls.n	8007448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e01b      	b.n	8007480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	daf2      	bge.n	8007436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	019b      	lsls	r3, r3, #6
 8007458:	f043 0220 	orr.w	r2, r3, #32
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800746c:	d901      	bls.n	8007472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e006      	b.n	8007480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b20      	cmp	r3, #32
 800747c:	d0f0      	beq.n	8007460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074a4:	d901      	bls.n	80074aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e018      	b.n	80074dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	daf2      	bge.n	8007498 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2210      	movs	r2, #16
 80074ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074c8:	d901      	bls.n	80074ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e006      	b.n	80074dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d0f0      	beq.n	80074bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007508:	4313      	orrs	r3, r2
 800750a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800751a:	b480      	push	{r7}
 800751c:	b087      	sub	sp, #28
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 0306 	and.w	r3, r3, #6
 8007532:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
 800753e:	e00a      	b.n	8007556 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d002      	beq.n	800754c <USB_GetDevSpeed+0x32>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b06      	cmp	r3, #6
 800754a:	d102      	bne.n	8007552 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800754c:	2302      	movs	r3, #2
 800754e:	75fb      	strb	r3, [r7, #23]
 8007550:	e001      	b.n	8007556 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007552:	230f      	movs	r3, #15
 8007554:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
}
 8007558:	4618      	mov	r0, r3
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d13a      	bne.n	80075f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007586:	69da      	ldr	r2, [r3, #28]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	2101      	movs	r1, #1
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	b29b      	uxth	r3, r3
 8007598:	68f9      	ldr	r1, [r7, #12]
 800759a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800759e:	4313      	orrs	r3, r2
 80075a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d155      	bne.n	8007664 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	791b      	ldrb	r3, [r3, #4]
 80075d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	059b      	lsls	r3, r3, #22
 80075da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075dc:	4313      	orrs	r3, r2
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	e036      	b.n	8007664 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	2101      	movs	r1, #1
 8007608:	fa01 f303 	lsl.w	r3, r1, r3
 800760c:	041b      	lsls	r3, r3, #16
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007614:	4313      	orrs	r3, r2
 8007616:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11a      	bne.n	8007664 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	791b      	ldrb	r3, [r3, #4]
 8007648:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800764a:	430b      	orrs	r3, r1
 800764c:	4313      	orrs	r3, r2
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	440a      	add	r2, r1
 8007656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800765a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800765e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007662:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d161      	bne.n	8007754 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076a6:	d11f      	bne.n	80076e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	2101      	movs	r1, #1
 80076fa:	fa01 f303 	lsl.w	r3, r1, r3
 80076fe:	b29b      	uxth	r3, r3
 8007700:	43db      	mvns	r3, r3
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007708:	4013      	ands	r3, r2
 800770a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	2101      	movs	r1, #1
 800771e:	fa01 f303 	lsl.w	r3, r1, r3
 8007722:	b29b      	uxth	r3, r3
 8007724:	43db      	mvns	r3, r3
 8007726:	68f9      	ldr	r1, [r7, #12]
 8007728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800772c:	4013      	ands	r3, r2
 800772e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	0159      	lsls	r1, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	440b      	add	r3, r1
 8007746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774a:	4619      	mov	r1, r3
 800774c:	4b35      	ldr	r3, [pc, #212]	@ (8007824 <USB_DeactivateEndpoint+0x1b0>)
 800774e:	4013      	ands	r3, r2
 8007750:	600b      	str	r3, [r1, #0]
 8007752:	e060      	b.n	8007816 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800776a:	d11f      	bne.n	80077ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007786:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800778a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 030f 	and.w	r3, r3, #15
 80077bc:	2101      	movs	r1, #1
 80077be:	fa01 f303 	lsl.w	r3, r1, r3
 80077c2:	041b      	lsls	r3, r3, #16
 80077c4:	43db      	mvns	r3, r3
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077cc:	4013      	ands	r3, r2
 80077ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	2101      	movs	r1, #1
 80077e2:	fa01 f303 	lsl.w	r3, r1, r3
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	43db      	mvns	r3, r3
 80077ea:	68f9      	ldr	r1, [r7, #12]
 80077ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077f0:	4013      	ands	r3, r2
 80077f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	0159      	lsls	r1, r3, #5
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	440b      	add	r3, r1
 800780a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780e:	4619      	mov	r1, r3
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <USB_DeactivateEndpoint+0x1b4>)
 8007812:	4013      	ands	r3, r2
 8007814:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	ec337800 	.word	0xec337800
 8007828:	eff37800 	.word	0xeff37800

0800782c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	2b01      	cmp	r3, #1
 800784a:	f040 817f 	bne.w	8007b4c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d132      	bne.n	80078bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	69fa      	ldr	r2, [r7, #28]
 800786a:	440a      	add	r2, r1
 800786c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007870:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007874:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	440a      	add	r2, r1
 8007890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007894:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078b4:	0cdb      	lsrs	r3, r3, #19
 80078b6:	04db      	lsls	r3, r3, #19
 80078b8:	6113      	str	r3, [r2, #16]
 80078ba:	e097      	b.n	80079ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	0151      	lsls	r1, r2, #5
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	440a      	add	r2, r1
 80078d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078d6:	0cdb      	lsrs	r3, r3, #19
 80078d8:	04db      	lsls	r3, r3, #19
 80078da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d11a      	bne.n	800793c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	691a      	ldr	r2, [r3, #16]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	429a      	cmp	r2, r3
 8007910:	d903      	bls.n	800791a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	440a      	add	r2, r1
 8007930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007934:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007938:	6113      	str	r3, [r2, #16]
 800793a:	e044      	b.n	80079c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	691a      	ldr	r2, [r3, #16]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	4413      	add	r3, r2
 8007946:	1e5a      	subs	r2, r3, #1
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	8afb      	ldrh	r3, [r7, #22]
 8007962:	04d9      	lsls	r1, r3, #19
 8007964:	4ba4      	ldr	r3, [pc, #656]	@ (8007bf8 <USB_EPStartXfer+0x3cc>)
 8007966:	400b      	ands	r3, r1
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	0148      	lsls	r0, r1, #5
 800796c:	69f9      	ldr	r1, [r7, #28]
 800796e:	4401      	add	r1, r0
 8007970:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007974:	4313      	orrs	r3, r2
 8007976:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	791b      	ldrb	r3, [r3, #4]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d122      	bne.n	80079c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800799a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800799e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ac:	691a      	ldr	r2, [r3, #16]
 80079ae:	8afb      	ldrh	r3, [r7, #22]
 80079b0:	075b      	lsls	r3, r3, #29
 80079b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80079b6:	69b9      	ldr	r1, [r7, #24]
 80079b8:	0148      	lsls	r0, r1, #5
 80079ba:	69f9      	ldr	r1, [r7, #28]
 80079bc:	4401      	add	r1, r0
 80079be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079c2:	4313      	orrs	r3, r2
 80079c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	0148      	lsls	r0, r1, #5
 80079e0:	69f9      	ldr	r1, [r7, #28]
 80079e2:	4401      	add	r1, r0
 80079e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079e8:	4313      	orrs	r3, r2
 80079ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d14b      	bne.n	8007a8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a06:	461a      	mov	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	791b      	ldrb	r3, [r3, #4]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d128      	bne.n	8007a68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d110      	bne.n	8007a48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	e00f      	b.n	8007a68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	e166      	b.n	8007d58 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aa4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007aa8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	791b      	ldrb	r3, [r3, #4]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d015      	beq.n	8007ade <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 814e 	beq.w	8007d58 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	2101      	movs	r1, #1
 8007ace:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad2:	69f9      	ldr	r1, [r7, #28]
 8007ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	634b      	str	r3, [r1, #52]	@ 0x34
 8007adc:	e13c      	b.n	8007d58 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d110      	bne.n	8007b10 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	0151      	lsls	r1, r2, #5
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	440a      	add	r2, r1
 8007b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	e00f      	b.n	8007b30 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b2e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	68d9      	ldr	r1, [r3, #12]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	b298      	uxth	r0, r3
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	4603      	mov	r3, r0
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f9b9 	bl	8007ebc <USB_WritePacket>
 8007b4a:	e105      	b.n	8007d58 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b66:	0cdb      	lsrs	r3, r3, #19
 8007b68:	04db      	lsls	r3, r3, #19
 8007b6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	0151      	lsls	r1, r2, #5
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	440a      	add	r2, r1
 8007b82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b8e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d132      	bne.n	8007bfc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bc4:	69b9      	ldr	r1, [r7, #24]
 8007bc6:	0148      	lsls	r0, r1, #5
 8007bc8:	69f9      	ldr	r1, [r7, #28]
 8007bca:	4401      	add	r1, r0
 8007bcc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bf2:	6113      	str	r3, [r2, #16]
 8007bf4:	e062      	b.n	8007cbc <USB_EPStartXfer+0x490>
 8007bf6:	bf00      	nop
 8007bf8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d123      	bne.n	8007c4c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c10:	691a      	ldr	r2, [r3, #16]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c1a:	69b9      	ldr	r1, [r7, #24]
 8007c1c:	0148      	lsls	r0, r1, #5
 8007c1e:	69f9      	ldr	r1, [r7, #28]
 8007c20:	4401      	add	r1, r0
 8007c22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c26:	4313      	orrs	r3, r2
 8007c28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c48:	6113      	str	r3, [r2, #16]
 8007c4a:	e037      	b.n	8007cbc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	4413      	add	r3, r2
 8007c56:	1e5a      	subs	r2, r3, #1
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	8afa      	ldrh	r2, [r7, #22]
 8007c68:	fb03 f202 	mul.w	r2, r3, r2
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	8afb      	ldrh	r3, [r7, #22]
 8007c80:	04d9      	lsls	r1, r3, #19
 8007c82:	4b38      	ldr	r3, [pc, #224]	@ (8007d64 <USB_EPStartXfer+0x538>)
 8007c84:	400b      	ands	r3, r1
 8007c86:	69b9      	ldr	r1, [r7, #24]
 8007c88:	0148      	lsls	r0, r1, #5
 8007c8a:	69f9      	ldr	r1, [r7, #28]
 8007c8c:	4401      	add	r1, r0
 8007c8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c92:	4313      	orrs	r3, r2
 8007c94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cac:	69b9      	ldr	r1, [r7, #24]
 8007cae:	0148      	lsls	r0, r1, #5
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	4401      	add	r1, r0
 8007cb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d10d      	bne.n	8007cde <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	68d9      	ldr	r1, [r3, #12]
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cda:	460a      	mov	r2, r1
 8007cdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	791b      	ldrb	r3, [r3, #4]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d128      	bne.n	8007d38 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d110      	bne.n	8007d18 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	0151      	lsls	r1, r2, #5
 8007d08:	69fa      	ldr	r2, [r7, #28]
 8007d0a:	440a      	add	r2, r1
 8007d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	e00f      	b.n	8007d38 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	0151      	lsls	r1, r2, #5
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	440a      	add	r2, r1
 8007d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	0151      	lsls	r1, r2, #5
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	440a      	add	r2, r1
 8007d4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3720      	adds	r7, #32
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	1ff80000 	.word	0x1ff80000

08007d68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d14a      	bne.n	8007e1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d9e:	f040 8086 	bne.w	8007eae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007dc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007de4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007de8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d902      	bls.n	8007e00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dfe:	e056      	b.n	8007eae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e18:	d0e7      	beq.n	8007dea <USB_EPStopXfer+0x82>
 8007e1a:	e048      	b.n	8007eae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e34:	d13b      	bne.n	8007eae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	7812      	ldrb	r2, [r2, #0]
 8007e4a:	0151      	lsls	r1, r2, #5
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	440a      	add	r2, r1
 8007e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	7812      	ldrb	r2, [r2, #0]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3301      	adds	r3, #1
 8007e82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d902      	bls.n	8007e94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	75fb      	strb	r3, [r7, #23]
          break;
 8007e92:	e00c      	b.n	8007eae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007eac:	d0e7      	beq.n	8007e7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	@ 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	461a      	mov	r2, r3
 8007eca:	460b      	mov	r3, r1
 8007ecc:	71fb      	strb	r3, [r7, #7]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007eda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d123      	bne.n	8007f2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ee2:	88bb      	ldrh	r3, [r7, #4]
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	089b      	lsrs	r3, r3, #2
 8007ee8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	e018      	b.n	8007f22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	031a      	lsls	r2, r3, #12
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007efc:	461a      	mov	r2, r3
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	3301      	adds	r3, #1
 8007f08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	3301      	adds	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d3e2      	bcc.n	8007ef0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3724      	adds	r7, #36	@ 0x24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b08b      	sub	sp, #44	@ 0x2c
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	089b      	lsrs	r3, r3, #2
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f5e:	2300      	movs	r3, #0
 8007f60:	623b      	str	r3, [r7, #32]
 8007f62:	e014      	b.n	8007f8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	3301      	adds	r3, #1
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	3301      	adds	r3, #1
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	3301      	adds	r3, #1
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	3301      	adds	r3, #1
 8007f86:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	623b      	str	r3, [r7, #32]
 8007f8e:	6a3a      	ldr	r2, [r7, #32]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d3e6      	bcc.n	8007f64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f96:	8bfb      	ldrh	r3, [r7, #30]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01e      	beq.n	8007fda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f107 0310 	add.w	r3, r7, #16
 8007fac:	6812      	ldr	r2, [r2, #0]
 8007fae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	701a      	strb	r2, [r3, #0]
      i++;
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	3301      	adds	r3, #1
 8007fcc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007fce:	8bfb      	ldrh	r3, [r7, #30]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fd4:	8bfb      	ldrh	r3, [r7, #30]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1ea      	bne.n	8007fb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	372c      	adds	r7, #44	@ 0x2c
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d12c      	bne.n	800805e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	db12      	blt.n	800803c <USB_EPSetStall+0x54>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00f      	beq.n	800803c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	0151      	lsls	r1, r2, #5
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	440a      	add	r2, r1
 8008032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008036:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800803a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008056:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	e02b      	b.n	80080b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	db12      	blt.n	8008096 <USB_EPSetStall+0xae>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00f      	beq.n	8008096 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	440a      	add	r2, r1
 800808c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008090:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008094:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d128      	bne.n	8008132 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	791b      	ldrb	r3, [r3, #4]
 8008104:	2b03      	cmp	r3, #3
 8008106:	d003      	beq.n	8008110 <USB_EPClearStall+0x4c>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	791b      	ldrb	r3, [r3, #4]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d138      	bne.n	8008182 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	440a      	add	r2, r1
 8008126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800812a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	e027      	b.n	8008182 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	0151      	lsls	r1, r2, #5
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	440a      	add	r2, r1
 8008148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800814c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008150:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	791b      	ldrb	r3, [r3, #4]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d003      	beq.n	8008162 <USB_EPClearStall+0x9e>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	791b      	ldrb	r3, [r3, #4]
 800815e:	2b02      	cmp	r3, #2
 8008160:	d10f      	bne.n	8008182 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	0151      	lsls	r1, r2, #5
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	440a      	add	r2, r1
 8008178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800817c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008180:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80081b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081ca:	4313      	orrs	r3, r2
 80081cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081f6:	f023 0303 	bic.w	r3, r3, #3
 80081fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800820a:	f023 0302 	bic.w	r3, r3, #2
 800820e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008238:	f023 0303 	bic.w	r3, r3, #3
 800823c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800824c:	f043 0302 	orr.w	r3, r3, #2
 8008250:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4013      	ands	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008278:	68fb      	ldr	r3, [r7, #12]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	4013      	ands	r3, r2
 80082a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	0c1b      	lsrs	r3, r3, #16
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	4013      	ands	r3, r2
 80082dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	b29b      	uxth	r3, r3
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	4013      	ands	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800831c:	68bb      	ldr	r3, [r7, #8]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800832a:	b480      	push	{r7}
 800832c:	b087      	sub	sp, #28
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800834a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800834c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	fa22 f303 	lsr.w	r3, r2, r3
 800835a:	01db      	lsls	r3, r3, #7
 800835c:	b2db      	uxtb	r3, r3
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4013      	ands	r3, r2
 8008376:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008378:	68bb      	ldr	r3, [r7, #8]
}
 800837a:	4618      	mov	r0, r3
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f003 0301 	and.w	r3, r3, #1
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80083c0:	f023 0307 	bic.w	r3, r3, #7
 80083c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	460b      	mov	r3, r1
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	333c      	adds	r3, #60	@ 0x3c
 80083fe:	3304      	adds	r3, #4
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	4a26      	ldr	r2, [pc, #152]	@ (80084a0 <USB_EP0_OutStart+0xb8>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d90a      	bls.n	8008422 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008418:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800841c:	d101      	bne.n	8008422 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	e037      	b.n	8008492 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008428:	461a      	mov	r2, r3
 800842a:	2300      	movs	r3, #0
 800842c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800843c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008450:	f043 0318 	orr.w	r3, r3, #24
 8008454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008464:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008468:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d10f      	bne.n	8008490 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800848a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800848e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	4f54300a 	.word	0x4f54300a

080084a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3301      	adds	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084bc:	d901      	bls.n	80084c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e01b      	b.n	80084fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	daf2      	bge.n	80084b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f043 0201 	orr.w	r2, r3, #1
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084e6:	d901      	bls.n	80084ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e006      	b.n	80084fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d0f0      	beq.n	80084da <USB_CoreReset+0x36>

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
	...

08008508 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008514:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008518:	f002 fcee 	bl	800aef8 <USBD_static_malloc>
 800851c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	32b0      	adds	r2, #176	@ 0xb0
 800852e:	2100      	movs	r1, #0
 8008530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008534:	2302      	movs	r3, #2
 8008536:	e0d4      	b.n	80086e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008538:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f002 fe43 	bl	800b1ca <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	32b0      	adds	r2, #176	@ 0xb0
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	32b0      	adds	r2, #176	@ 0xb0
 800855e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7c1b      	ldrb	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d138      	bne.n	80085e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008570:	4b5e      	ldr	r3, [pc, #376]	@ (80086ec <USBD_CDC_Init+0x1e4>)
 8008572:	7819      	ldrb	r1, [r3, #0]
 8008574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008578:	2202      	movs	r2, #2
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f002 fb99 	bl	800acb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008580:	4b5a      	ldr	r3, [pc, #360]	@ (80086ec <USBD_CDC_Init+0x1e4>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	f003 020f 	and.w	r2, r3, #15
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	3324      	adds	r3, #36	@ 0x24
 8008596:	2201      	movs	r2, #1
 8008598:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800859a:	4b55      	ldr	r3, [pc, #340]	@ (80086f0 <USBD_CDC_Init+0x1e8>)
 800859c:	7819      	ldrb	r1, [r3, #0]
 800859e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085a2:	2202      	movs	r2, #2
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f002 fb84 	bl	800acb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085aa:	4b51      	ldr	r3, [pc, #324]	@ (80086f0 <USBD_CDC_Init+0x1e8>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	f003 020f 	and.w	r2, r3, #15
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085c2:	2201      	movs	r2, #1
 80085c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085c6:	4b4b      	ldr	r3, [pc, #300]	@ (80086f4 <USBD_CDC_Init+0x1ec>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	f003 020f 	and.w	r2, r3, #15
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	3326      	adds	r3, #38	@ 0x26
 80085dc:	2210      	movs	r2, #16
 80085de:	801a      	strh	r2, [r3, #0]
 80085e0:	e035      	b.n	800864e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085e2:	4b42      	ldr	r3, [pc, #264]	@ (80086ec <USBD_CDC_Init+0x1e4>)
 80085e4:	7819      	ldrb	r1, [r3, #0]
 80085e6:	2340      	movs	r3, #64	@ 0x40
 80085e8:	2202      	movs	r2, #2
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f002 fb61 	bl	800acb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085f0:	4b3e      	ldr	r3, [pc, #248]	@ (80086ec <USBD_CDC_Init+0x1e4>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	f003 020f 	and.w	r2, r3, #15
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3324      	adds	r3, #36	@ 0x24
 8008606:	2201      	movs	r2, #1
 8008608:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800860a:	4b39      	ldr	r3, [pc, #228]	@ (80086f0 <USBD_CDC_Init+0x1e8>)
 800860c:	7819      	ldrb	r1, [r3, #0]
 800860e:	2340      	movs	r3, #64	@ 0x40
 8008610:	2202      	movs	r2, #2
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f002 fb4d 	bl	800acb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008618:	4b35      	ldr	r3, [pc, #212]	@ (80086f0 <USBD_CDC_Init+0x1e8>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 020f 	and.w	r2, r3, #15
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008630:	2201      	movs	r2, #1
 8008632:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008634:	4b2f      	ldr	r3, [pc, #188]	@ (80086f4 <USBD_CDC_Init+0x1ec>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	f003 020f 	and.w	r2, r3, #15
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	440b      	add	r3, r1
 8008648:	3326      	adds	r3, #38	@ 0x26
 800864a:	2210      	movs	r2, #16
 800864c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800864e:	4b29      	ldr	r3, [pc, #164]	@ (80086f4 <USBD_CDC_Init+0x1ec>)
 8008650:	7819      	ldrb	r1, [r3, #0]
 8008652:	2308      	movs	r3, #8
 8008654:	2203      	movs	r2, #3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f002 fb2b 	bl	800acb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800865c:	4b25      	ldr	r3, [pc, #148]	@ (80086f4 <USBD_CDC_Init+0x1ec>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 020f 	and.w	r2, r3, #15
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	3324      	adds	r3, #36	@ 0x24
 8008672:	2201      	movs	r2, #1
 8008674:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	33b0      	adds	r3, #176	@ 0xb0
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80086ac:	2302      	movs	r3, #2
 80086ae:	e018      	b.n	80086e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	7c1b      	ldrb	r3, [r3, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086b8:	4b0d      	ldr	r3, [pc, #52]	@ (80086f0 <USBD_CDC_Init+0x1e8>)
 80086ba:	7819      	ldrb	r1, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f002 fbe2 	bl	800ae90 <USBD_LL_PrepareReceive>
 80086cc:	e008      	b.n	80086e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086ce:	4b08      	ldr	r3, [pc, #32]	@ (80086f0 <USBD_CDC_Init+0x1e8>)
 80086d0:	7819      	ldrb	r1, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086d8:	2340      	movs	r3, #64	@ 0x40
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f002 fbd8 	bl	800ae90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000093 	.word	0x20000093
 80086f0:	20000094 	.word	0x20000094
 80086f4:	20000095 	.word	0x20000095

080086f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008704:	4b3a      	ldr	r3, [pc, #232]	@ (80087f0 <USBD_CDC_DeInit+0xf8>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f002 faf7 	bl	800acfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008710:	4b37      	ldr	r3, [pc, #220]	@ (80087f0 <USBD_CDC_DeInit+0xf8>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 020f 	and.w	r2, r3, #15
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	3324      	adds	r3, #36	@ 0x24
 8008726:	2200      	movs	r2, #0
 8008728:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800872a:	4b32      	ldr	r3, [pc, #200]	@ (80087f4 <USBD_CDC_DeInit+0xfc>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f002 fae4 	bl	800acfe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008736:	4b2f      	ldr	r3, [pc, #188]	@ (80087f4 <USBD_CDC_DeInit+0xfc>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	f003 020f 	and.w	r2, r3, #15
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800874e:	2200      	movs	r2, #0
 8008750:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008752:	4b29      	ldr	r3, [pc, #164]	@ (80087f8 <USBD_CDC_DeInit+0x100>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f002 fad0 	bl	800acfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800875e:	4b26      	ldr	r3, [pc, #152]	@ (80087f8 <USBD_CDC_DeInit+0x100>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	f003 020f 	and.w	r2, r3, #15
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	440b      	add	r3, r1
 8008772:	3324      	adds	r3, #36	@ 0x24
 8008774:	2200      	movs	r2, #0
 8008776:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008778:	4b1f      	ldr	r3, [pc, #124]	@ (80087f8 <USBD_CDC_DeInit+0x100>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	f003 020f 	and.w	r2, r3, #15
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	3326      	adds	r3, #38	@ 0x26
 800878e:	2200      	movs	r2, #0
 8008790:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	32b0      	adds	r2, #176	@ 0xb0
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01f      	beq.n	80087e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	33b0      	adds	r3, #176	@ 0xb0
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32b0      	adds	r2, #176	@ 0xb0
 80087c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f002 fba4 	bl	800af14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	32b0      	adds	r2, #176	@ 0xb0
 80087d6:	2100      	movs	r1, #0
 80087d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000093 	.word	0x20000093
 80087f4:	20000094 	.word	0x20000094
 80087f8:	20000095 	.word	0x20000095

080087fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	32b0      	adds	r2, #176	@ 0xb0
 8008810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008814:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008828:	2303      	movs	r3, #3
 800882a:	e0bf      	b.n	80089ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008834:	2b00      	cmp	r3, #0
 8008836:	d050      	beq.n	80088da <USBD_CDC_Setup+0xde>
 8008838:	2b20      	cmp	r3, #32
 800883a:	f040 80af 	bne.w	800899c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d03a      	beq.n	80088bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	b25b      	sxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	da1b      	bge.n	8008888 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	33b0      	adds	r3, #176	@ 0xb0
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008866:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	88d2      	ldrh	r2, [r2, #6]
 800886c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	88db      	ldrh	r3, [r3, #6]
 8008872:	2b07      	cmp	r3, #7
 8008874:	bf28      	it	cs
 8008876:	2307      	movcs	r3, #7
 8008878:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	89fa      	ldrh	r2, [r7, #14]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 fd93 	bl	800a3ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008886:	e090      	b.n	80089aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	785a      	ldrb	r2, [r3, #1]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	2b3f      	cmp	r3, #63	@ 0x3f
 8008898:	d803      	bhi.n	80088a2 <USBD_CDC_Setup+0xa6>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	e000      	b.n	80088a4 <USBD_CDC_Setup+0xa8>
 80088a2:	2240      	movs	r2, #64	@ 0x40
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80088aa:	6939      	ldr	r1, [r7, #16]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80088b2:	461a      	mov	r2, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fda5 	bl	800a404 <USBD_CtlPrepareRx>
      break;
 80088ba:	e076      	b.n	80089aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	33b0      	adds	r3, #176	@ 0xb0
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	7850      	ldrb	r0, [r2, #1]
 80088d2:	2200      	movs	r2, #0
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	4798      	blx	r3
      break;
 80088d8:	e067      	b.n	80089aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	2b0b      	cmp	r3, #11
 80088e0:	d851      	bhi.n	8008986 <USBD_CDC_Setup+0x18a>
 80088e2:	a201      	add	r2, pc, #4	@ (adr r2, 80088e8 <USBD_CDC_Setup+0xec>)
 80088e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e8:	08008919 	.word	0x08008919
 80088ec:	08008995 	.word	0x08008995
 80088f0:	08008987 	.word	0x08008987
 80088f4:	08008987 	.word	0x08008987
 80088f8:	08008987 	.word	0x08008987
 80088fc:	08008987 	.word	0x08008987
 8008900:	08008987 	.word	0x08008987
 8008904:	08008987 	.word	0x08008987
 8008908:	08008987 	.word	0x08008987
 800890c:	08008987 	.word	0x08008987
 8008910:	08008943 	.word	0x08008943
 8008914:	0800896d 	.word	0x0800896d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b03      	cmp	r3, #3
 8008922:	d107      	bne.n	8008934 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008924:	f107 030a 	add.w	r3, r7, #10
 8008928:	2202      	movs	r2, #2
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fd3d 	bl	800a3ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008932:	e032      	b.n	800899a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 fcbb 	bl	800a2b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800893c:	2303      	movs	r3, #3
 800893e:	75fb      	strb	r3, [r7, #23]
          break;
 8008940:	e02b      	b.n	800899a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b03      	cmp	r3, #3
 800894c:	d107      	bne.n	800895e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800894e:	f107 030d 	add.w	r3, r7, #13
 8008952:	2201      	movs	r2, #1
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 fd28 	bl	800a3ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800895c:	e01d      	b.n	800899a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 fca6 	bl	800a2b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008966:	2303      	movs	r3, #3
 8008968:	75fb      	strb	r3, [r7, #23]
          break;
 800896a:	e016      	b.n	800899a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b03      	cmp	r3, #3
 8008976:	d00f      	beq.n	8008998 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 fc99 	bl	800a2b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008980:	2303      	movs	r3, #3
 8008982:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008984:	e008      	b.n	8008998 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 fc92 	bl	800a2b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800898e:	2303      	movs	r3, #3
 8008990:	75fb      	strb	r3, [r7, #23]
          break;
 8008992:	e002      	b.n	800899a <USBD_CDC_Setup+0x19e>
          break;
 8008994:	bf00      	nop
 8008996:	e008      	b.n	80089aa <USBD_CDC_Setup+0x1ae>
          break;
 8008998:	bf00      	nop
      }
      break;
 800899a:	e006      	b.n	80089aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fc87 	bl	800a2b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80089a4:	2303      	movs	r3, #3
 80089a6:	75fb      	strb	r3, [r7, #23]
      break;
 80089a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32b0      	adds	r2, #176	@ 0xb0
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80089da:	2303      	movs	r3, #3
 80089dc:	e065      	b.n	8008aaa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	32b0      	adds	r2, #176	@ 0xb0
 80089e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	6879      	ldr	r1, [r7, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	440b      	add	r3, r1
 8008a00:	3318      	adds	r3, #24
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d02f      	beq.n	8008a68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008a08:	78fb      	ldrb	r3, [r7, #3]
 8008a0a:	f003 020f 	and.w	r2, r3, #15
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	440b      	add	r3, r1
 8008a1a:	3318      	adds	r3, #24
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	f003 010f 	and.w	r1, r3, #15
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	460b      	mov	r3, r1
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	440b      	add	r3, r1
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4403      	add	r3, r0
 8008a30:	331c      	adds	r3, #28
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a38:	fb01 f303 	mul.w	r3, r1, r3
 8008a3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d112      	bne.n	8008a68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	f003 020f 	and.w	r2, r3, #15
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	3318      	adds	r3, #24
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a5a:	78f9      	ldrb	r1, [r7, #3]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2200      	movs	r2, #0
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f002 f9f4 	bl	800ae4e <USBD_LL_Transmit>
 8008a66:	e01f      	b.n	8008aa8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	33b0      	adds	r3, #176	@ 0xb0
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d010      	beq.n	8008aa8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	33b0      	adds	r3, #176	@ 0xb0
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	32b0      	adds	r2, #176	@ 0xb0
 8008ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008acc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	32b0      	adds	r2, #176	@ 0xb0
 8008ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e01a      	b.n	8008b1a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f002 f9f2 	bl	800aed2 <USBD_LL_GetRxDataSize>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	33b0      	adds	r3, #176	@ 0xb0
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b14:	4611      	mov	r1, r2
 8008b16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	32b0      	adds	r2, #176	@ 0xb0
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e024      	b.n	8008b8e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	33b0      	adds	r3, #176	@ 0xb0
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d019      	beq.n	8008b8c <USBD_CDC_EP0_RxReady+0x6a>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b5e:	2bff      	cmp	r3, #255	@ 0xff
 8008b60:	d014      	beq.n	8008b8c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	33b0      	adds	r3, #176	@ 0xb0
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b7a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	22ff      	movs	r2, #255	@ 0xff
 8008b88:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ba0:	2182      	movs	r1, #130	@ 0x82
 8008ba2:	4818      	ldr	r0, [pc, #96]	@ (8008c04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ba4:	f000 fd4f 	bl	8009646 <USBD_GetEpDesc>
 8008ba8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008baa:	2101      	movs	r1, #1
 8008bac:	4815      	ldr	r0, [pc, #84]	@ (8008c04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008bae:	f000 fd4a 	bl	8009646 <USBD_GetEpDesc>
 8008bb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008bb4:	2181      	movs	r1, #129	@ 0x81
 8008bb6:	4813      	ldr	r0, [pc, #76]	@ (8008c04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008bb8:	f000 fd45 	bl	8009646 <USBD_GetEpDesc>
 8008bbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2210      	movs	r2, #16
 8008bc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bd8:	711a      	strb	r2, [r3, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d006      	beq.n	8008bf2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bec:	711a      	strb	r2, [r3, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2243      	movs	r2, #67	@ 0x43
 8008bf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008bf8:	4b02      	ldr	r3, [pc, #8]	@ (8008c04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000050 	.word	0x20000050

08008c08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c10:	2182      	movs	r1, #130	@ 0x82
 8008c12:	4818      	ldr	r0, [pc, #96]	@ (8008c74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c14:	f000 fd17 	bl	8009646 <USBD_GetEpDesc>
 8008c18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4815      	ldr	r0, [pc, #84]	@ (8008c74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c1e:	f000 fd12 	bl	8009646 <USBD_GetEpDesc>
 8008c22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c24:	2181      	movs	r1, #129	@ 0x81
 8008c26:	4813      	ldr	r0, [pc, #76]	@ (8008c74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c28:	f000 fd0d 	bl	8009646 <USBD_GetEpDesc>
 8008c2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2210      	movs	r2, #16
 8008c38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	2200      	movs	r2, #0
 8008c44:	711a      	strb	r2, [r3, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f042 0202 	orr.w	r2, r2, #2
 8008c4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d006      	beq.n	8008c62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	711a      	strb	r2, [r3, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f042 0202 	orr.w	r2, r2, #2
 8008c60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2243      	movs	r2, #67	@ 0x43
 8008c66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c68:	4b02      	ldr	r3, [pc, #8]	@ (8008c74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000050 	.word	0x20000050

08008c78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c80:	2182      	movs	r1, #130	@ 0x82
 8008c82:	4818      	ldr	r0, [pc, #96]	@ (8008ce4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c84:	f000 fcdf 	bl	8009646 <USBD_GetEpDesc>
 8008c88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	4815      	ldr	r0, [pc, #84]	@ (8008ce4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c8e:	f000 fcda 	bl	8009646 <USBD_GetEpDesc>
 8008c92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c94:	2181      	movs	r1, #129	@ 0x81
 8008c96:	4813      	ldr	r0, [pc, #76]	@ (8008ce4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c98:	f000 fcd5 	bl	8009646 <USBD_GetEpDesc>
 8008c9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2210      	movs	r2, #16
 8008ca8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d006      	beq.n	8008cbe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cb8:	711a      	strb	r2, [r3, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d006      	beq.n	8008cd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ccc:	711a      	strb	r2, [r3, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2243      	movs	r2, #67	@ 0x43
 8008cd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cd8:	4b02      	ldr	r3, [pc, #8]	@ (8008ce4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000050 	.word	0x20000050

08008ce8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	220a      	movs	r2, #10
 8008cf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008cf6:	4b03      	ldr	r3, [pc, #12]	@ (8008d04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	2000000c 	.word	0x2000000c

08008d08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e009      	b.n	8008d30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	33b0      	adds	r3, #176	@ 0xb0
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	32b0      	adds	r2, #176	@ 0xb0
 8008d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d56:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e008      	b.n	8008d74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	32b0      	adds	r2, #176	@ 0xb0
 8008d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e004      	b.n	8008dae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	32b0      	adds	r2, #176	@ 0xb0
 8008dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e025      	b.n	8008e2e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d11f      	bne.n	8008e2c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008df4:	4b10      	ldr	r3, [pc, #64]	@ (8008e38 <USBD_CDC_TransmitPacket+0x7c>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	f003 020f 	and.w	r2, r3, #15
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4403      	add	r3, r0
 8008e0e:	3318      	adds	r3, #24
 8008e10:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008e12:	4b09      	ldr	r3, [pc, #36]	@ (8008e38 <USBD_CDC_TransmitPacket+0x7c>)
 8008e14:	7819      	ldrb	r1, [r3, #0]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f002 f813 	bl	800ae4e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000093 	.word	0x20000093

08008e3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	32b0      	adds	r2, #176	@ 0xb0
 8008e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	32b0      	adds	r2, #176	@ 0xb0
 8008e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e018      	b.n	8008e9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7c1b      	ldrb	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea4 <USBD_CDC_ReceivePacket+0x68>)
 8008e74:	7819      	ldrb	r1, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f002 f805 	bl	800ae90 <USBD_LL_PrepareReceive>
 8008e86:	e008      	b.n	8008e9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e88:	4b06      	ldr	r3, [pc, #24]	@ (8008ea4 <USBD_CDC_ReceivePacket+0x68>)
 8008e8a:	7819      	ldrb	r1, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e92:	2340      	movs	r3, #64	@ 0x40
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fffb 	bl	800ae90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20000094 	.word	0x20000094

08008ea8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e01f      	b.n	8008f00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	79fa      	ldrb	r2, [r7, #7]
 8008ef2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f001 fe6f 	bl	800abd8 <USBD_LL_Init>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e025      	b.n	8008f6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	32ae      	adds	r2, #174	@ 0xae
 8008f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00f      	beq.n	8008f5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	32ae      	adds	r2, #174	@ 0xae
 8008f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	f107 020e 	add.w	r2, r7, #14
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3
 8008f54:	4602      	mov	r2, r0
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fe7d 	bl	800ac7c <USBD_LL_Start>
 8008f82:	4603      	mov	r3, r0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	460b      	mov	r3, r1
 8008fac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d009      	beq.n	8008fd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	78fa      	ldrb	r2, [r7, #3]
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	4798      	blx	r3
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	4798      	blx	r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009000:	2303      	movs	r3, #3
 8009002:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f001 f90c 	bl	800a23e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009034:	461a      	mov	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009042:	f003 031f 	and.w	r3, r3, #31
 8009046:	2b02      	cmp	r3, #2
 8009048:	d01a      	beq.n	8009080 <USBD_LL_SetupStage+0x72>
 800904a:	2b02      	cmp	r3, #2
 800904c:	d822      	bhi.n	8009094 <USBD_LL_SetupStage+0x86>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <USBD_LL_SetupStage+0x4a>
 8009052:	2b01      	cmp	r3, #1
 8009054:	d00a      	beq.n	800906c <USBD_LL_SetupStage+0x5e>
 8009056:	e01d      	b.n	8009094 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fb63 	bl	800972c <USBD_StdDevReq>
 8009066:	4603      	mov	r3, r0
 8009068:	73fb      	strb	r3, [r7, #15]
      break;
 800906a:	e020      	b.n	80090ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fbcb 	bl	8009810 <USBD_StdItfReq>
 800907a:	4603      	mov	r3, r0
 800907c:	73fb      	strb	r3, [r7, #15]
      break;
 800907e:	e016      	b.n	80090ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fc2d 	bl	80098e8 <USBD_StdEPReq>
 800908e:	4603      	mov	r3, r0
 8009090:	73fb      	strb	r3, [r7, #15]
      break;
 8009092:	e00c      	b.n	80090ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800909a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 fe4a 	bl	800ad3c <USBD_LL_StallEP>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
      break;
 80090ac:	bf00      	nop
  }

  return ret;
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	460b      	mov	r3, r1
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d16e      	bne.n	80091ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80090d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090de:	2b03      	cmp	r3, #3
 80090e0:	f040 8098 	bne.w	8009214 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d913      	bls.n	8009118 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	1ad2      	subs	r2, r2, r3
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	4293      	cmp	r3, r2
 8009108:	bf28      	it	cs
 800910a:	4613      	movcs	r3, r2
 800910c:	461a      	mov	r2, r3
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f001 f994 	bl	800a43e <USBD_CtlContinueRx>
 8009116:	e07d      	b.n	8009214 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	2b02      	cmp	r3, #2
 8009124:	d014      	beq.n	8009150 <USBD_LL_DataOutStage+0x98>
 8009126:	2b02      	cmp	r3, #2
 8009128:	d81d      	bhi.n	8009166 <USBD_LL_DataOutStage+0xae>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <USBD_LL_DataOutStage+0x7c>
 800912e:	2b01      	cmp	r3, #1
 8009130:	d003      	beq.n	800913a <USBD_LL_DataOutStage+0x82>
 8009132:	e018      	b.n	8009166 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	75bb      	strb	r3, [r7, #22]
            break;
 8009138:	e018      	b.n	800916c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009140:	b2db      	uxtb	r3, r3
 8009142:	4619      	mov	r1, r3
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fa64 	bl	8009612 <USBD_CoreFindIF>
 800914a:	4603      	mov	r3, r0
 800914c:	75bb      	strb	r3, [r7, #22]
            break;
 800914e:	e00d      	b.n	800916c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009156:	b2db      	uxtb	r3, r3
 8009158:	4619      	mov	r1, r3
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 fa66 	bl	800962c <USBD_CoreFindEP>
 8009160:	4603      	mov	r3, r0
 8009162:	75bb      	strb	r3, [r7, #22]
            break;
 8009164:	e002      	b.n	800916c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	75bb      	strb	r3, [r7, #22]
            break;
 800916a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800916c:	7dbb      	ldrb	r3, [r7, #22]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d119      	bne.n	80091a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b03      	cmp	r3, #3
 800917c:	d113      	bne.n	80091a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800917e:	7dba      	ldrb	r2, [r7, #22]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	32ae      	adds	r2, #174	@ 0xae
 8009184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800918e:	7dba      	ldrb	r2, [r7, #22]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009196:	7dba      	ldrb	r2, [r7, #22]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	32ae      	adds	r2, #174	@ 0xae
 800919c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f001 f95a 	bl	800a460 <USBD_CtlSendStatus>
 80091ac:	e032      	b.n	8009214 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	4619      	mov	r1, r3
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fa37 	bl	800962c <USBD_CoreFindEP>
 80091be:	4603      	mov	r3, r0
 80091c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091c2:	7dbb      	ldrb	r3, [r7, #22]
 80091c4:	2bff      	cmp	r3, #255	@ 0xff
 80091c6:	d025      	beq.n	8009214 <USBD_LL_DataOutStage+0x15c>
 80091c8:	7dbb      	ldrb	r3, [r7, #22]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d122      	bne.n	8009214 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d117      	bne.n	800920a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80091da:	7dba      	ldrb	r2, [r7, #22]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	32ae      	adds	r2, #174	@ 0xae
 80091e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00f      	beq.n	800920a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80091ea:	7dba      	ldrb	r2, [r7, #22]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80091f2:	7dba      	ldrb	r2, [r7, #22]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	32ae      	adds	r2, #174	@ 0xae
 80091f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	7afa      	ldrb	r2, [r7, #11]
 8009200:	4611      	mov	r1, r2
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	e000      	b.n	8009216 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b086      	sub	sp, #24
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	460b      	mov	r3, r1
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d16f      	bne.n	8009312 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3314      	adds	r3, #20
 8009236:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800923e:	2b02      	cmp	r3, #2
 8009240:	d15a      	bne.n	80092f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	689a      	ldr	r2, [r3, #8]
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	429a      	cmp	r2, r3
 800924c:	d914      	bls.n	8009278 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	1ad2      	subs	r2, r2, r3
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	461a      	mov	r2, r3
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f001 f8bc 	bl	800a3e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800926a:	2300      	movs	r3, #0
 800926c:	2200      	movs	r2, #0
 800926e:	2100      	movs	r1, #0
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f001 fe0d 	bl	800ae90 <USBD_LL_PrepareReceive>
 8009276:	e03f      	b.n	80092f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	68da      	ldr	r2, [r3, #12]
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	429a      	cmp	r2, r3
 8009282:	d11c      	bne.n	80092be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800928c:	429a      	cmp	r2, r3
 800928e:	d316      	bcc.n	80092be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800929a:	429a      	cmp	r2, r3
 800929c:	d20f      	bcs.n	80092be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800929e:	2200      	movs	r2, #0
 80092a0:	2100      	movs	r1, #0
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f001 f89d 	bl	800a3e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092b0:	2300      	movs	r3, #0
 80092b2:	2200      	movs	r2, #0
 80092b4:	2100      	movs	r1, #0
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f001 fdea 	bl	800ae90 <USBD_LL_PrepareReceive>
 80092bc:	e01c      	b.n	80092f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d10f      	bne.n	80092ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092ea:	2180      	movs	r1, #128	@ 0x80
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f001 fd25 	bl	800ad3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f001 f8c7 	bl	800a486 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d03a      	beq.n	8009378 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7ff fe42 	bl	8008f8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009310:	e032      	b.n	8009378 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009312:	7afb      	ldrb	r3, [r7, #11]
 8009314:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4619      	mov	r1, r3
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 f985 	bl	800962c <USBD_CoreFindEP>
 8009322:	4603      	mov	r3, r0
 8009324:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	2bff      	cmp	r3, #255	@ 0xff
 800932a:	d025      	beq.n	8009378 <USBD_LL_DataInStage+0x15a>
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d122      	bne.n	8009378 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b03      	cmp	r3, #3
 800933c:	d11c      	bne.n	8009378 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800933e:	7dfa      	ldrb	r2, [r7, #23]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	32ae      	adds	r2, #174	@ 0xae
 8009344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d014      	beq.n	8009378 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800934e:	7dfa      	ldrb	r2, [r7, #23]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009356:	7dfa      	ldrb	r2, [r7, #23]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	32ae      	adds	r2, #174	@ 0xae
 800935c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	7afa      	ldrb	r2, [r7, #11]
 8009364:	4611      	mov	r1, r2
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	4798      	blx	r3
 800936a:	4603      	mov	r3, r0
 800936c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800936e:	7dbb      	ldrb	r3, [r7, #22]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009374:	7dbb      	ldrb	r3, [r7, #22]
 8009376:	e000      	b.n	800937a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d014      	beq.n	80093e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00e      	beq.n	80093e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6852      	ldr	r2, [r2, #4]
 80093d6:	b2d2      	uxtb	r2, r2
 80093d8:	4611      	mov	r1, r2
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093e8:	2340      	movs	r3, #64	@ 0x40
 80093ea:	2200      	movs	r2, #0
 80093ec:	2100      	movs	r1, #0
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fc5f 	bl	800acb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2240      	movs	r2, #64	@ 0x40
 8009400:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009404:	2340      	movs	r3, #64	@ 0x40
 8009406:	2200      	movs	r2, #0
 8009408:	2180      	movs	r1, #128	@ 0x80
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 fc51 	bl	800acb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2240      	movs	r2, #64	@ 0x40
 800941a:	621a      	str	r2, [r3, #32]

  return ret;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	460b      	mov	r3, r1
 8009430:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009446:	b480      	push	{r7}
 8009448:	b083      	sub	sp, #12
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b04      	cmp	r3, #4
 8009458:	d006      	beq.n	8009468 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009460:	b2da      	uxtb	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2204      	movs	r2, #4
 800946c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b04      	cmp	r3, #4
 8009490:	d106      	bne.n	80094a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009498:	b2da      	uxtb	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d110      	bne.n	80094e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d005      	beq.n	80094e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	32ae      	adds	r2, #174	@ 0xae
 8009504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800950c:	2303      	movs	r3, #3
 800950e:	e01c      	b.n	800954a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b03      	cmp	r3, #3
 800951a:	d115      	bne.n	8009548 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	32ae      	adds	r2, #174	@ 0xae
 8009526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00b      	beq.n	8009548 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	32ae      	adds	r2, #174	@ 0xae
 800953a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	4611      	mov	r1, r2
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	32ae      	adds	r2, #174	@ 0xae
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009570:	2303      	movs	r3, #3
 8009572:	e01c      	b.n	80095ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b03      	cmp	r3, #3
 800957e:	d115      	bne.n	80095ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	32ae      	adds	r2, #174	@ 0xae
 800958a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800958e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	32ae      	adds	r2, #174	@ 0xae
 800959e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	4611      	mov	r1, r2
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00e      	beq.n	8009608 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	6852      	ldr	r2, [r2, #4]
 80095f6:	b2d2      	uxtb	r2, r2
 80095f8:	4611      	mov	r1, r2
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	4798      	blx	r3
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009604:	2303      	movs	r3, #3
 8009606:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800961e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009638:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800963a:	4618      	mov	r0, r3
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b086      	sub	sp, #24
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	460b      	mov	r3, r1
 8009650:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	885b      	ldrh	r3, [r3, #2]
 8009662:	b29b      	uxth	r3, r3
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	7812      	ldrb	r2, [r2, #0]
 8009668:	4293      	cmp	r3, r2
 800966a:	d91f      	bls.n	80096ac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009672:	e013      	b.n	800969c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009674:	f107 030a 	add.w	r3, r7, #10
 8009678:	4619      	mov	r1, r3
 800967a:	6978      	ldr	r0, [r7, #20]
 800967c:	f000 f81b 	bl	80096b6 <USBD_GetNextDesc>
 8009680:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	785b      	ldrb	r3, [r3, #1]
 8009686:	2b05      	cmp	r3, #5
 8009688:	d108      	bne.n	800969c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	789b      	ldrb	r3, [r3, #2]
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	429a      	cmp	r2, r3
 8009696:	d008      	beq.n	80096aa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009698:	2300      	movs	r3, #0
 800969a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	885b      	ldrh	r3, [r3, #2]
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	897b      	ldrh	r3, [r7, #10]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d8e5      	bhi.n	8009674 <USBD_GetEpDesc+0x2e>
 80096a8:	e000      	b.n	80096ac <USBD_GetEpDesc+0x66>
          break;
 80096aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80096ac:	693b      	ldr	r3, [r7, #16]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b085      	sub	sp, #20
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	7812      	ldrb	r2, [r2, #0]
 80096cc:	4413      	add	r3, r2
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4413      	add	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80096e0:	68fb      	ldr	r3, [r7, #12]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b087      	sub	sp, #28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	3301      	adds	r3, #1
 8009704:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800970c:	8a3b      	ldrh	r3, [r7, #16]
 800970e:	021b      	lsls	r3, r3, #8
 8009710:	b21a      	sxth	r2, r3
 8009712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009716:	4313      	orrs	r3, r2
 8009718:	b21b      	sxth	r3, r3
 800971a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800971c:	89fb      	ldrh	r3, [r7, #14]
}
 800971e:	4618      	mov	r0, r3
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
	...

0800972c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009742:	2b40      	cmp	r3, #64	@ 0x40
 8009744:	d005      	beq.n	8009752 <USBD_StdDevReq+0x26>
 8009746:	2b40      	cmp	r3, #64	@ 0x40
 8009748:	d857      	bhi.n	80097fa <USBD_StdDevReq+0xce>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00f      	beq.n	800976e <USBD_StdDevReq+0x42>
 800974e:	2b20      	cmp	r3, #32
 8009750:	d153      	bne.n	80097fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	32ae      	adds	r2, #174	@ 0xae
 800975c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	4798      	blx	r3
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
      break;
 800976c:	e04a      	b.n	8009804 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	2b09      	cmp	r3, #9
 8009774:	d83b      	bhi.n	80097ee <USBD_StdDevReq+0xc2>
 8009776:	a201      	add	r2, pc, #4	@ (adr r2, 800977c <USBD_StdDevReq+0x50>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	080097d1 	.word	0x080097d1
 8009780:	080097e5 	.word	0x080097e5
 8009784:	080097ef 	.word	0x080097ef
 8009788:	080097db 	.word	0x080097db
 800978c:	080097ef 	.word	0x080097ef
 8009790:	080097af 	.word	0x080097af
 8009794:	080097a5 	.word	0x080097a5
 8009798:	080097ef 	.word	0x080097ef
 800979c:	080097c7 	.word	0x080097c7
 80097a0:	080097b9 	.word	0x080097b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa3c 	bl	8009c24 <USBD_GetDescriptor>
          break;
 80097ac:	e024      	b.n	80097f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fba1 	bl	8009ef8 <USBD_SetAddress>
          break;
 80097b6:	e01f      	b.n	80097f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fbe0 	bl	8009f80 <USBD_SetConfig>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]
          break;
 80097c4:	e018      	b.n	80097f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fc83 	bl	800a0d4 <USBD_GetConfig>
          break;
 80097ce:	e013      	b.n	80097f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fcb4 	bl	800a140 <USBD_GetStatus>
          break;
 80097d8:	e00e      	b.n	80097f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fce3 	bl	800a1a8 <USBD_SetFeature>
          break;
 80097e2:	e009      	b.n	80097f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fd07 	bl	800a1fa <USBD_ClrFeature>
          break;
 80097ec:	e004      	b.n	80097f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fd5e 	bl	800a2b2 <USBD_CtlError>
          break;
 80097f6:	bf00      	nop
      }
      break;
 80097f8:	e004      	b.n	8009804 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fd58 	bl	800a2b2 <USBD_CtlError>
      break;
 8009802:	bf00      	nop
  }

  return ret;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop

08009810 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009826:	2b40      	cmp	r3, #64	@ 0x40
 8009828:	d005      	beq.n	8009836 <USBD_StdItfReq+0x26>
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d852      	bhi.n	80098d4 <USBD_StdItfReq+0xc4>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <USBD_StdItfReq+0x26>
 8009832:	2b20      	cmp	r3, #32
 8009834:	d14e      	bne.n	80098d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983c:	b2db      	uxtb	r3, r3
 800983e:	3b01      	subs	r3, #1
 8009840:	2b02      	cmp	r3, #2
 8009842:	d840      	bhi.n	80098c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	889b      	ldrh	r3, [r3, #4]
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b01      	cmp	r3, #1
 800984c:	d836      	bhi.n	80098bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	889b      	ldrh	r3, [r3, #4]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fedb 	bl	8009612 <USBD_CoreFindIF>
 800985c:	4603      	mov	r3, r0
 800985e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2bff      	cmp	r3, #255	@ 0xff
 8009864:	d01d      	beq.n	80098a2 <USBD_StdItfReq+0x92>
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d11a      	bne.n	80098a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800986c:	7bba      	ldrb	r2, [r7, #14]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	32ae      	adds	r2, #174	@ 0xae
 8009872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00f      	beq.n	800989c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800987c:	7bba      	ldrb	r2, [r7, #14]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009884:	7bba      	ldrb	r2, [r7, #14]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	32ae      	adds	r2, #174	@ 0xae
 800988a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	4798      	blx	r3
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800989a:	e004      	b.n	80098a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800989c:	2303      	movs	r3, #3
 800989e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80098a0:	e001      	b.n	80098a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80098a2:	2303      	movs	r3, #3
 80098a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	88db      	ldrh	r3, [r3, #6]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d110      	bne.n	80098d0 <USBD_StdItfReq+0xc0>
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10d      	bne.n	80098d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fdd3 	bl	800a460 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098ba:	e009      	b.n	80098d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fcf7 	bl	800a2b2 <USBD_CtlError>
          break;
 80098c4:	e004      	b.n	80098d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fcf2 	bl	800a2b2 <USBD_CtlError>
          break;
 80098ce:	e000      	b.n	80098d2 <USBD_StdItfReq+0xc2>
          break;
 80098d0:	bf00      	nop
      }
      break;
 80098d2:	e004      	b.n	80098de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fceb 	bl	800a2b2 <USBD_CtlError>
      break;
 80098dc:	bf00      	nop
  }

  return ret;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	889b      	ldrh	r3, [r3, #4]
 80098fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009904:	2b40      	cmp	r3, #64	@ 0x40
 8009906:	d007      	beq.n	8009918 <USBD_StdEPReq+0x30>
 8009908:	2b40      	cmp	r3, #64	@ 0x40
 800990a:	f200 817f 	bhi.w	8009c0c <USBD_StdEPReq+0x324>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d02a      	beq.n	8009968 <USBD_StdEPReq+0x80>
 8009912:	2b20      	cmp	r3, #32
 8009914:	f040 817a 	bne.w	8009c0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff fe85 	bl	800962c <USBD_CoreFindEP>
 8009922:	4603      	mov	r3, r0
 8009924:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009926:	7b7b      	ldrb	r3, [r7, #13]
 8009928:	2bff      	cmp	r3, #255	@ 0xff
 800992a:	f000 8174 	beq.w	8009c16 <USBD_StdEPReq+0x32e>
 800992e:	7b7b      	ldrb	r3, [r7, #13]
 8009930:	2b00      	cmp	r3, #0
 8009932:	f040 8170 	bne.w	8009c16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009936:	7b7a      	ldrb	r2, [r7, #13]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800993e:	7b7a      	ldrb	r2, [r7, #13]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	32ae      	adds	r2, #174	@ 0xae
 8009944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8163 	beq.w	8009c16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009950:	7b7a      	ldrb	r2, [r7, #13]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	32ae      	adds	r2, #174	@ 0xae
 8009956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009966:	e156      	b.n	8009c16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	785b      	ldrb	r3, [r3, #1]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d008      	beq.n	8009982 <USBD_StdEPReq+0x9a>
 8009970:	2b03      	cmp	r3, #3
 8009972:	f300 8145 	bgt.w	8009c00 <USBD_StdEPReq+0x318>
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 809b 	beq.w	8009ab2 <USBD_StdEPReq+0x1ca>
 800997c:	2b01      	cmp	r3, #1
 800997e:	d03c      	beq.n	80099fa <USBD_StdEPReq+0x112>
 8009980:	e13e      	b.n	8009c00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b02      	cmp	r3, #2
 800998c:	d002      	beq.n	8009994 <USBD_StdEPReq+0xac>
 800998e:	2b03      	cmp	r3, #3
 8009990:	d016      	beq.n	80099c0 <USBD_StdEPReq+0xd8>
 8009992:	e02c      	b.n	80099ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00d      	beq.n	80099b6 <USBD_StdEPReq+0xce>
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	2b80      	cmp	r3, #128	@ 0x80
 800999e:	d00a      	beq.n	80099b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f9c9 	bl	800ad3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099aa:	2180      	movs	r1, #128	@ 0x80
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 f9c5 	bl	800ad3c <USBD_LL_StallEP>
 80099b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099b4:	e020      	b.n	80099f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fc7a 	bl	800a2b2 <USBD_CtlError>
              break;
 80099be:	e01b      	b.n	80099f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	885b      	ldrh	r3, [r3, #2]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10e      	bne.n	80099e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <USBD_StdEPReq+0xfe>
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	2b80      	cmp	r3, #128	@ 0x80
 80099d2:	d008      	beq.n	80099e6 <USBD_StdEPReq+0xfe>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	88db      	ldrh	r3, [r3, #6]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 f9ab 	bl	800ad3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fd3a 	bl	800a460 <USBD_CtlSendStatus>

              break;
 80099ec:	e004      	b.n	80099f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fc5e 	bl	800a2b2 <USBD_CtlError>
              break;
 80099f6:	bf00      	nop
          }
          break;
 80099f8:	e107      	b.n	8009c0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d002      	beq.n	8009a0c <USBD_StdEPReq+0x124>
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d016      	beq.n	8009a38 <USBD_StdEPReq+0x150>
 8009a0a:	e04b      	b.n	8009aa4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00d      	beq.n	8009a2e <USBD_StdEPReq+0x146>
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b80      	cmp	r3, #128	@ 0x80
 8009a16:	d00a      	beq.n	8009a2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 f98d 	bl	800ad3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a22:	2180      	movs	r1, #128	@ 0x80
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f001 f989 	bl	800ad3c <USBD_LL_StallEP>
 8009a2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a2c:	e040      	b.n	8009ab0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fc3e 	bl	800a2b2 <USBD_CtlError>
              break;
 8009a36:	e03b      	b.n	8009ab0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	885b      	ldrh	r3, [r3, #2]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d136      	bne.n	8009aae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d004      	beq.n	8009a54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f001 f993 	bl	800ad7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fd03 	bl	800a460 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a5a:	7bbb      	ldrb	r3, [r7, #14]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff fde4 	bl	800962c <USBD_CoreFindEP>
 8009a64:	4603      	mov	r3, r0
 8009a66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a68:	7b7b      	ldrb	r3, [r7, #13]
 8009a6a:	2bff      	cmp	r3, #255	@ 0xff
 8009a6c:	d01f      	beq.n	8009aae <USBD_StdEPReq+0x1c6>
 8009a6e:	7b7b      	ldrb	r3, [r7, #13]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d11c      	bne.n	8009aae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009a74:	7b7a      	ldrb	r2, [r7, #13]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a7c:	7b7a      	ldrb	r2, [r7, #13]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	32ae      	adds	r2, #174	@ 0xae
 8009a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d010      	beq.n	8009aae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a8c:	7b7a      	ldrb	r2, [r7, #13]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	32ae      	adds	r2, #174	@ 0xae
 8009a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	4798      	blx	r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009aa2:	e004      	b.n	8009aae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fc03 	bl	800a2b2 <USBD_CtlError>
              break;
 8009aac:	e000      	b.n	8009ab0 <USBD_StdEPReq+0x1c8>
              break;
 8009aae:	bf00      	nop
          }
          break;
 8009ab0:	e0ab      	b.n	8009c0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d002      	beq.n	8009ac4 <USBD_StdEPReq+0x1dc>
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d032      	beq.n	8009b28 <USBD_StdEPReq+0x240>
 8009ac2:	e097      	b.n	8009bf4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <USBD_StdEPReq+0x1f2>
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b80      	cmp	r3, #128	@ 0x80
 8009ace:	d004      	beq.n	8009ada <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fbed 	bl	800a2b2 <USBD_CtlError>
                break;
 8009ad8:	e091      	b.n	8009bfe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	da0b      	bge.n	8009afa <USBD_StdEPReq+0x212>
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	3310      	adds	r3, #16
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	3304      	adds	r3, #4
 8009af8:	e00b      	b.n	8009b12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	4413      	add	r3, r2
 8009b10:	3304      	adds	r3, #4
 8009b12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fc43 	bl	800a3ac <USBD_CtlSendData>
              break;
 8009b26:	e06a      	b.n	8009bfe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da11      	bge.n	8009b54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	f003 020f 	and.w	r2, r3, #15
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	440b      	add	r3, r1
 8009b42:	3324      	adds	r3, #36	@ 0x24
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d117      	bne.n	8009b7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fbb0 	bl	800a2b2 <USBD_CtlError>
                  break;
 8009b52:	e054      	b.n	8009bfe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	f003 020f 	and.w	r2, r3, #15
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	440b      	add	r3, r1
 8009b66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d104      	bne.n	8009b7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fb9d 	bl	800a2b2 <USBD_CtlError>
                  break;
 8009b78:	e041      	b.n	8009bfe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da0b      	bge.n	8009b9a <USBD_StdEPReq+0x2b2>
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b88:	4613      	mov	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	3310      	adds	r3, #16
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	4413      	add	r3, r2
 8009b96:	3304      	adds	r3, #4
 8009b98:	e00b      	b.n	8009bb2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	4413      	add	r3, r2
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <USBD_StdEPReq+0x2d8>
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	2b80      	cmp	r3, #128	@ 0x80
 8009bbe:	d103      	bne.n	8009bc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
 8009bc6:	e00e      	b.n	8009be6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 f8f3 	bl	800adb8 <USBD_LL_IsStallEP>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	e002      	b.n	8009be6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2202      	movs	r2, #2
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fbdd 	bl	800a3ac <USBD_CtlSendData>
              break;
 8009bf2:	e004      	b.n	8009bfe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fb5b 	bl	800a2b2 <USBD_CtlError>
              break;
 8009bfc:	bf00      	nop
          }
          break;
 8009bfe:	e004      	b.n	8009c0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fb55 	bl	800a2b2 <USBD_CtlError>
          break;
 8009c08:	bf00      	nop
      }
      break;
 8009c0a:	e005      	b.n	8009c18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fb4f 	bl	800a2b2 <USBD_CtlError>
      break;
 8009c14:	e000      	b.n	8009c18 <USBD_StdEPReq+0x330>
      break;
 8009c16:	bf00      	nop
  }

  return ret;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	0a1b      	lsrs	r3, r3, #8
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	3b01      	subs	r3, #1
 8009c44:	2b06      	cmp	r3, #6
 8009c46:	f200 8128 	bhi.w	8009e9a <USBD_GetDescriptor+0x276>
 8009c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c50 <USBD_GetDescriptor+0x2c>)
 8009c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c50:	08009c6d 	.word	0x08009c6d
 8009c54:	08009c85 	.word	0x08009c85
 8009c58:	08009cc5 	.word	0x08009cc5
 8009c5c:	08009e9b 	.word	0x08009e9b
 8009c60:	08009e9b 	.word	0x08009e9b
 8009c64:	08009e3b 	.word	0x08009e3b
 8009c68:	08009e67 	.word	0x08009e67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	7c12      	ldrb	r2, [r2, #16]
 8009c78:	f107 0108 	add.w	r1, r7, #8
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
 8009c80:	60f8      	str	r0, [r7, #12]
      break;
 8009c82:	e112      	b.n	8009eaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	7c1b      	ldrb	r3, [r3, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10d      	bne.n	8009ca8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c94:	f107 0208 	add.w	r2, r7, #8
 8009c98:	4610      	mov	r0, r2
 8009c9a:	4798      	blx	r3
 8009c9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ca6:	e100      	b.n	8009eaa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb0:	f107 0208 	add.w	r2, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	701a      	strb	r2, [r3, #0]
      break;
 8009cc2:	e0f2      	b.n	8009eaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	885b      	ldrh	r3, [r3, #2]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b05      	cmp	r3, #5
 8009ccc:	f200 80ac 	bhi.w	8009e28 <USBD_GetDescriptor+0x204>
 8009cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd8 <USBD_GetDescriptor+0xb4>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009cf1 	.word	0x08009cf1
 8009cdc:	08009d25 	.word	0x08009d25
 8009ce0:	08009d59 	.word	0x08009d59
 8009ce4:	08009d8d 	.word	0x08009d8d
 8009ce8:	08009dc1 	.word	0x08009dc1
 8009cec:	08009df5 	.word	0x08009df5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7c12      	ldrb	r2, [r2, #16]
 8009d08:	f107 0108 	add.w	r1, r7, #8
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
 8009d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d12:	e091      	b.n	8009e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 facb 	bl	800a2b2 <USBD_CtlError>
            err++;
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	72fb      	strb	r3, [r7, #11]
          break;
 8009d22:	e089      	b.n	8009e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	7c12      	ldrb	r2, [r2, #16]
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d46:	e077      	b.n	8009e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fab1 	bl	800a2b2 <USBD_CtlError>
            err++;
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	3301      	adds	r3, #1
 8009d54:	72fb      	strb	r3, [r7, #11]
          break;
 8009d56:	e06f      	b.n	8009e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00b      	beq.n	8009d7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	7c12      	ldrb	r2, [r2, #16]
 8009d70:	f107 0108 	add.w	r1, r7, #8
 8009d74:	4610      	mov	r0, r2
 8009d76:	4798      	blx	r3
 8009d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d7a:	e05d      	b.n	8009e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fa97 	bl	800a2b2 <USBD_CtlError>
            err++;
 8009d84:	7afb      	ldrb	r3, [r7, #11]
 8009d86:	3301      	adds	r3, #1
 8009d88:	72fb      	strb	r3, [r7, #11]
          break;
 8009d8a:	e055      	b.n	8009e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	7c12      	ldrb	r2, [r2, #16]
 8009da4:	f107 0108 	add.w	r1, r7, #8
 8009da8:	4610      	mov	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dae:	e043      	b.n	8009e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fa7d 	bl	800a2b2 <USBD_CtlError>
            err++;
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009dbe:	e03b      	b.n	8009e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00b      	beq.n	8009de4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	7c12      	ldrb	r2, [r2, #16]
 8009dd8:	f107 0108 	add.w	r1, r7, #8
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
 8009de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009de2:	e029      	b.n	8009e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fa63 	bl	800a2b2 <USBD_CtlError>
            err++;
 8009dec:	7afb      	ldrb	r3, [r7, #11]
 8009dee:	3301      	adds	r3, #1
 8009df0:	72fb      	strb	r3, [r7, #11]
          break;
 8009df2:	e021      	b.n	8009e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	7c12      	ldrb	r2, [r2, #16]
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	4610      	mov	r0, r2
 8009e12:	4798      	blx	r3
 8009e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e16:	e00f      	b.n	8009e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa49 	bl	800a2b2 <USBD_CtlError>
            err++;
 8009e20:	7afb      	ldrb	r3, [r7, #11]
 8009e22:	3301      	adds	r3, #1
 8009e24:	72fb      	strb	r3, [r7, #11]
          break;
 8009e26:	e007      	b.n	8009e38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa41 	bl	800a2b2 <USBD_CtlError>
          err++;
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	3301      	adds	r3, #1
 8009e34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009e36:	bf00      	nop
      }
      break;
 8009e38:	e037      	b.n	8009eaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	7c1b      	ldrb	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d109      	bne.n	8009e56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e4a:	f107 0208 	add.w	r2, r7, #8
 8009e4e:	4610      	mov	r0, r2
 8009e50:	4798      	blx	r3
 8009e52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e54:	e029      	b.n	8009eaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fa2a 	bl	800a2b2 <USBD_CtlError>
        err++;
 8009e5e:	7afb      	ldrb	r3, [r7, #11]
 8009e60:	3301      	adds	r3, #1
 8009e62:	72fb      	strb	r3, [r7, #11]
      break;
 8009e64:	e021      	b.n	8009eaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	7c1b      	ldrb	r3, [r3, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10d      	bne.n	8009e8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e76:	f107 0208 	add.w	r2, r7, #8
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4798      	blx	r3
 8009e7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3301      	adds	r3, #1
 8009e84:	2207      	movs	r2, #7
 8009e86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e88:	e00f      	b.n	8009eaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fa10 	bl	800a2b2 <USBD_CtlError>
        err++;
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	3301      	adds	r3, #1
 8009e96:	72fb      	strb	r3, [r7, #11]
      break;
 8009e98:	e007      	b.n	8009eaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fa08 	bl	800a2b2 <USBD_CtlError>
      err++;
 8009ea2:	7afb      	ldrb	r3, [r7, #11]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ea8:	bf00      	nop
  }

  if (err != 0U)
 8009eaa:	7afb      	ldrb	r3, [r7, #11]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d11e      	bne.n	8009eee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	88db      	ldrh	r3, [r3, #6]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d016      	beq.n	8009ee6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009eb8:	893b      	ldrh	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00e      	beq.n	8009edc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	88da      	ldrh	r2, [r3, #6]
 8009ec2:	893b      	ldrh	r3, [r7, #8]
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	bf28      	it	cs
 8009ec8:	4613      	movcs	r3, r2
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ece:	893b      	ldrh	r3, [r7, #8]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	68f9      	ldr	r1, [r7, #12]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fa69 	bl	800a3ac <USBD_CtlSendData>
 8009eda:	e009      	b.n	8009ef0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f9e7 	bl	800a2b2 <USBD_CtlError>
 8009ee4:	e004      	b.n	8009ef0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 faba 	bl	800a460 <USBD_CtlSendStatus>
 8009eec:	e000      	b.n	8009ef0 <USBD_GetDescriptor+0x2cc>
    return;
 8009eee:	bf00      	nop
  }
}
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop

08009ef8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	889b      	ldrh	r3, [r3, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d131      	bne.n	8009f6e <USBD_SetAddress+0x76>
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d12d      	bne.n	8009f6e <USBD_SetAddress+0x76>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	885b      	ldrh	r3, [r3, #2]
 8009f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f18:	d829      	bhi.n	8009f6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	885b      	ldrh	r3, [r3, #2]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d104      	bne.n	8009f3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f9bc 	bl	800a2b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f3a:	e01d      	b.n	8009f78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7bfa      	ldrb	r2, [r7, #15]
 8009f40:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 ff61 	bl	800ae10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa86 	bl	800a460 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d004      	beq.n	8009f64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f62:	e009      	b.n	8009f78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f6c:	e004      	b.n	8009f78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f99e 	bl	800a2b2 <USBD_CtlError>
  }
}
 8009f76:	bf00      	nop
 8009f78:	bf00      	nop
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	885b      	ldrh	r3, [r3, #2]
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	4b4e      	ldr	r3, [pc, #312]	@ (800a0d0 <USBD_SetConfig+0x150>)
 8009f96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f98:	4b4d      	ldr	r3, [pc, #308]	@ (800a0d0 <USBD_SetConfig+0x150>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d905      	bls.n	8009fac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f985 	bl	800a2b2 <USBD_CtlError>
    return USBD_FAIL;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e08c      	b.n	800a0c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d002      	beq.n	8009fbe <USBD_SetConfig+0x3e>
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d029      	beq.n	800a010 <USBD_SetConfig+0x90>
 8009fbc:	e075      	b.n	800a0aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009fbe:	4b44      	ldr	r3, [pc, #272]	@ (800a0d0 <USBD_SetConfig+0x150>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d020      	beq.n	800a008 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009fc6:	4b42      	ldr	r3, [pc, #264]	@ (800a0d0 <USBD_SetConfig+0x150>)
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fd0:	4b3f      	ldr	r3, [pc, #252]	@ (800a0d0 <USBD_SetConfig+0x150>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7fe ffe3 	bl	8008fa2 <USBD_SetClassConfig>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d008      	beq.n	8009ff8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f962 	bl	800a2b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ff6:	e065      	b.n	800a0c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fa31 	bl	800a460 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2203      	movs	r2, #3
 800a002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a006:	e05d      	b.n	800a0c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fa29 	bl	800a460 <USBD_CtlSendStatus>
      break;
 800a00e:	e059      	b.n	800a0c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a010:	4b2f      	ldr	r3, [pc, #188]	@ (800a0d0 <USBD_SetConfig+0x150>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d112      	bne.n	800a03e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2202      	movs	r2, #2
 800a01c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a020:	4b2b      	ldr	r3, [pc, #172]	@ (800a0d0 <USBD_SetConfig+0x150>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a02a:	4b29      	ldr	r3, [pc, #164]	@ (800a0d0 <USBD_SetConfig+0x150>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7fe ffd2 	bl	8008fda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa12 	bl	800a460 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a03c:	e042      	b.n	800a0c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a03e:	4b24      	ldr	r3, [pc, #144]	@ (800a0d0 <USBD_SetConfig+0x150>)
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d02a      	beq.n	800a0a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7fe ffc0 	bl	8008fda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a05a:	4b1d      	ldr	r3, [pc, #116]	@ (800a0d0 <USBD_SetConfig+0x150>)
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a064:	4b1a      	ldr	r3, [pc, #104]	@ (800a0d0 <USBD_SetConfig+0x150>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fe ff99 	bl	8008fa2 <USBD_SetClassConfig>
 800a070:	4603      	mov	r3, r0
 800a072:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00f      	beq.n	800a09a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f918 	bl	800a2b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7fe ffa5 	bl	8008fda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a098:	e014      	b.n	800a0c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f9e0 	bl	800a460 <USBD_CtlSendStatus>
      break;
 800a0a0:	e010      	b.n	800a0c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f9dc 	bl	800a460 <USBD_CtlSendStatus>
      break;
 800a0a8:	e00c      	b.n	800a0c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f900 	bl	800a2b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0b2:	4b07      	ldr	r3, [pc, #28]	@ (800a0d0 <USBD_SetConfig+0x150>)
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7fe ff8e 	bl	8008fda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c2:	bf00      	nop
  }

  return ret;
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20000988 	.word	0x20000988

0800a0d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	88db      	ldrh	r3, [r3, #6]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d004      	beq.n	800a0f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f8e2 	bl	800a2b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a0ee:	e023      	b.n	800a138 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	dc02      	bgt.n	800a102 <USBD_GetConfig+0x2e>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	dc03      	bgt.n	800a108 <USBD_GetConfig+0x34>
 800a100:	e015      	b.n	800a12e <USBD_GetConfig+0x5a>
 800a102:	2b03      	cmp	r3, #3
 800a104:	d00b      	beq.n	800a11e <USBD_GetConfig+0x4a>
 800a106:	e012      	b.n	800a12e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3308      	adds	r3, #8
 800a112:	2201      	movs	r2, #1
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f948 	bl	800a3ac <USBD_CtlSendData>
        break;
 800a11c:	e00c      	b.n	800a138 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3304      	adds	r3, #4
 800a122:	2201      	movs	r2, #1
 800a124:	4619      	mov	r1, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f940 	bl	800a3ac <USBD_CtlSendData>
        break;
 800a12c:	e004      	b.n	800a138 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f8be 	bl	800a2b2 <USBD_CtlError>
        break;
 800a136:	bf00      	nop
}
 800a138:	bf00      	nop
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a150:	b2db      	uxtb	r3, r3
 800a152:	3b01      	subs	r3, #1
 800a154:	2b02      	cmp	r3, #2
 800a156:	d81e      	bhi.n	800a196 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	88db      	ldrh	r3, [r3, #6]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d004      	beq.n	800a16a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f8a5 	bl	800a2b2 <USBD_CtlError>
        break;
 800a168:	e01a      	b.n	800a1a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a176:	2b00      	cmp	r3, #0
 800a178:	d005      	beq.n	800a186 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	f043 0202 	orr.w	r2, r3, #2
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	330c      	adds	r3, #12
 800a18a:	2202      	movs	r2, #2
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f90c 	bl	800a3ac <USBD_CtlSendData>
      break;
 800a194:	e004      	b.n	800a1a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f88a 	bl	800a2b2 <USBD_CtlError>
      break;
 800a19e:	bf00      	nop
  }
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	885b      	ldrh	r3, [r3, #2]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d107      	bne.n	800a1ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f94c 	bl	800a460 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a1c8:	e013      	b.n	800a1f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d10b      	bne.n	800a1ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	889b      	ldrh	r3, [r3, #4]
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f93c 	bl	800a460 <USBD_CtlSendStatus>
}
 800a1e8:	e003      	b.n	800a1f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f860 	bl	800a2b2 <USBD_CtlError>
}
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	3b01      	subs	r3, #1
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d80b      	bhi.n	800a22a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	885b      	ldrh	r3, [r3, #2]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d10c      	bne.n	800a234 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f91c 	bl	800a460 <USBD_CtlSendStatus>
      }
      break;
 800a228:	e004      	b.n	800a234 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f840 	bl	800a2b2 <USBD_CtlError>
      break;
 800a232:	e000      	b.n	800a236 <USBD_ClrFeature+0x3c>
      break;
 800a234:	bf00      	nop
  }
}
 800a236:	bf00      	nop
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	781a      	ldrb	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3301      	adds	r3, #1
 800a258:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	781a      	ldrb	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3301      	adds	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff fa40 	bl	80096ee <SWAPBYTE>
 800a26e:	4603      	mov	r3, r0
 800a270:	461a      	mov	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3301      	adds	r3, #1
 800a27a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	3301      	adds	r3, #1
 800a280:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7ff fa33 	bl	80096ee <SWAPBYTE>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3301      	adds	r3, #1
 800a294:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3301      	adds	r3, #1
 800a29a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fa26 	bl	80096ee <SWAPBYTE>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	80da      	strh	r2, [r3, #6]
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2bc:	2180      	movs	r1, #128	@ 0x80
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fd3c 	bl	800ad3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fd38 	bl	800ad3c <USBD_LL_StallEP>
}
 800a2cc:	bf00      	nop
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d042      	beq.n	800a370 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a2ee:	6938      	ldr	r0, [r7, #16]
 800a2f0:	f000 f842 	bl	800a378 <USBD_GetLen>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2fe:	d808      	bhi.n	800a312 <USBD_GetString+0x3e>
 800a300:	6938      	ldr	r0, [r7, #16]
 800a302:	f000 f839 	bl	800a378 <USBD_GetLen>
 800a306:	4603      	mov	r3, r0
 800a308:	3301      	adds	r3, #1
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	b29a      	uxth	r2, r3
 800a310:	e001      	b.n	800a316 <USBD_GetString+0x42>
 800a312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	4413      	add	r3, r2
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	7812      	ldrb	r2, [r2, #0]
 800a324:	701a      	strb	r2, [r3, #0]
  idx++;
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	3301      	adds	r3, #1
 800a32a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	4413      	add	r3, r2
 800a332:	2203      	movs	r2, #3
 800a334:	701a      	strb	r2, [r3, #0]
  idx++;
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	3301      	adds	r3, #1
 800a33a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a33c:	e013      	b.n	800a366 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	4413      	add	r3, r2
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	7812      	ldrb	r2, [r2, #0]
 800a348:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	3301      	adds	r3, #1
 800a34e:	613b      	str	r3, [r7, #16]
    idx++;
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	3301      	adds	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a356:	7dfb      	ldrb	r3, [r7, #23]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	4413      	add	r3, r2
 800a35c:	2200      	movs	r2, #0
 800a35e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	3301      	adds	r3, #1
 800a364:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e7      	bne.n	800a33e <USBD_GetString+0x6a>
 800a36e:	e000      	b.n	800a372 <USBD_GetString+0x9e>
    return;
 800a370:	bf00      	nop
  }
}
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a388:	e005      	b.n	800a396 <USBD_GetLen+0x1e>
  {
    len++;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	3301      	adds	r3, #1
 800a38e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3301      	adds	r3, #1
 800a394:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1f5      	bne.n	800a38a <USBD_GetLen+0x12>
  }

  return len;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 fd3b 	bl	800ae4e <USBD_LL_Transmit>

  return USBD_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 fd2a 	bl	800ae4e <USBD_LL_Transmit>

  return USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2203      	movs	r2, #3
 800a414:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	2100      	movs	r1, #0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fd2e 	bl	800ae90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	60b9      	str	r1, [r7, #8]
 800a448:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	2100      	movs	r1, #0
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fd1d 	bl	800ae90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2204      	movs	r2, #4
 800a46c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a470:	2300      	movs	r3, #0
 800a472:	2200      	movs	r2, #0
 800a474:	2100      	movs	r1, #0
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fce9 	bl	800ae4e <USBD_LL_Transmit>

  return USBD_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2205      	movs	r2, #5
 800a492:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a496:	2300      	movs	r3, #0
 800a498:	2200      	movs	r2, #0
 800a49a:	2100      	movs	r1, #0
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fcf7 	bl	800ae90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	4912      	ldr	r1, [pc, #72]	@ (800a4fc <MX_USB_DEVICE_Init+0x50>)
 800a4b4:	4812      	ldr	r0, [pc, #72]	@ (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4b6:	f7fe fcf7 	bl	8008ea8 <USBD_Init>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4c0:	f7f7 f8ec 	bl	800169c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a4c4:	490f      	ldr	r1, [pc, #60]	@ (800a504 <MX_USB_DEVICE_Init+0x58>)
 800a4c6:	480e      	ldr	r0, [pc, #56]	@ (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4c8:	f7fe fd1e 	bl	8008f08 <USBD_RegisterClass>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4d2:	f7f7 f8e3 	bl	800169c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a4d6:	490c      	ldr	r1, [pc, #48]	@ (800a508 <MX_USB_DEVICE_Init+0x5c>)
 800a4d8:	4809      	ldr	r0, [pc, #36]	@ (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4da:	f7fe fc15 	bl	8008d08 <USBD_CDC_RegisterInterface>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4e4:	f7f7 f8da 	bl	800169c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a4e8:	4805      	ldr	r0, [pc, #20]	@ (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4ea:	f7fe fd43 	bl	8008f74 <USBD_Start>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4f4:	f7f7 f8d2 	bl	800169c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4f8:	bf00      	nop
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	200000ac 	.word	0x200000ac
 800a500:	2000098c 	.word	0x2000098c
 800a504:	20000018 	.word	0x20000018
 800a508:	20000098 	.word	0x20000098

0800a50c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a510:	2200      	movs	r2, #0
 800a512:	4905      	ldr	r1, [pc, #20]	@ (800a528 <CDC_Init_HS+0x1c>)
 800a514:	4805      	ldr	r0, [pc, #20]	@ (800a52c <CDC_Init_HS+0x20>)
 800a516:	f7fe fc11 	bl	8008d3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a51a:	4905      	ldr	r1, [pc, #20]	@ (800a530 <CDC_Init_HS+0x24>)
 800a51c:	4803      	ldr	r0, [pc, #12]	@ (800a52c <CDC_Init_HS+0x20>)
 800a51e:	f7fe fc2f 	bl	8008d80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a522:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a524:	4618      	mov	r0, r3
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20001468 	.word	0x20001468
 800a52c:	2000098c 	.word	0x2000098c
 800a530:	20000c68 	.word	0x20000c68

0800a534 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a534:	b480      	push	{r7}
 800a536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a538:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
 800a550:	4613      	mov	r3, r2
 800a552:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	2b23      	cmp	r3, #35	@ 0x23
 800a558:	d84a      	bhi.n	800a5f0 <CDC_Control_HS+0xac>
 800a55a:	a201      	add	r2, pc, #4	@ (adr r2, 800a560 <CDC_Control_HS+0x1c>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a5f1 	.word	0x0800a5f1
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a5f1 	.word	0x0800a5f1
 800a574:	0800a5f1 	.word	0x0800a5f1
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5f1 	.word	0x0800a5f1
 800a580:	0800a5f1 	.word	0x0800a5f1
 800a584:	0800a5f1 	.word	0x0800a5f1
 800a588:	0800a5f1 	.word	0x0800a5f1
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a5f1 	.word	0x0800a5f1
 800a594:	0800a5f1 	.word	0x0800a5f1
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a5f1 	.word	0x0800a5f1
 800a5a0:	0800a5f1 	.word	0x0800a5f1
 800a5a4:	0800a5f1 	.word	0x0800a5f1
 800a5a8:	0800a5f1 	.word	0x0800a5f1
 800a5ac:	0800a5f1 	.word	0x0800a5f1
 800a5b0:	0800a5f1 	.word	0x0800a5f1
 800a5b4:	0800a5f1 	.word	0x0800a5f1
 800a5b8:	0800a5f1 	.word	0x0800a5f1
 800a5bc:	0800a5f1 	.word	0x0800a5f1
 800a5c0:	0800a5f1 	.word	0x0800a5f1
 800a5c4:	0800a5f1 	.word	0x0800a5f1
 800a5c8:	0800a5f1 	.word	0x0800a5f1
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f1 	.word	0x0800a5f1
 800a5d4:	0800a5f1 	.word	0x0800a5f1
 800a5d8:	0800a5f1 	.word	0x0800a5f1
 800a5dc:	0800a5f1 	.word	0x0800a5f1
 800a5e0:	0800a5f1 	.word	0x0800a5f1
 800a5e4:	0800a5f1 	.word	0x0800a5f1
 800a5e8:	0800a5f1 	.word	0x0800a5f1
 800a5ec:	0800a5f1 	.word	0x0800a5f1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a5f0:	bf00      	nop
  }

  return (USBD_OK);
 800a5f2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	4805      	ldr	r0, [pc, #20]	@ (800a624 <CDC_Receive_HS+0x24>)
 800a60e:	f7fe fbb7 	bl	8008d80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a612:	4804      	ldr	r0, [pc, #16]	@ (800a624 <CDC_Receive_HS+0x24>)
 800a614:	f7fe fc12 	bl	8008e3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a618:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	2000098c 	.word	0x2000098c

0800a628 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800a638:	4b0d      	ldr	r3, [pc, #52]	@ (800a670 <CDC_Transmit_HS+0x48>)
 800a63a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a63e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e00b      	b.n	800a666 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800a64e:	887b      	ldrh	r3, [r7, #2]
 800a650:	461a      	mov	r2, r3
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	4806      	ldr	r0, [pc, #24]	@ (800a670 <CDC_Transmit_HS+0x48>)
 800a656:	f7fe fb71 	bl	8008d3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800a65a:	4805      	ldr	r0, [pc, #20]	@ (800a670 <CDC_Transmit_HS+0x48>)
 800a65c:	f7fe fbae 	bl	8008dbc <USBD_CDC_TransmitPacket>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	2000098c 	.word	0x2000098c

0800a674 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a674:	b480      	push	{r7}
 800a676:	b087      	sub	sp, #28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	4613      	mov	r3, r2
 800a680:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a686:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
	...

0800a698 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	6039      	str	r1, [r7, #0]
 800a6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2212      	movs	r2, #18
 800a6a8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a6aa:	4b03      	ldr	r3, [pc, #12]	@ (800a6b8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	200000c8 	.word	0x200000c8

0800a6bc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	6039      	str	r1, [r7, #0]
 800a6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6ce:	4b03      	ldr	r3, [pc, #12]	@ (800a6dc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	200000dc 	.word	0x200000dc

0800a6e0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d105      	bne.n	800a6fe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	4907      	ldr	r1, [pc, #28]	@ (800a714 <USBD_HS_ProductStrDescriptor+0x34>)
 800a6f6:	4808      	ldr	r0, [pc, #32]	@ (800a718 <USBD_HS_ProductStrDescriptor+0x38>)
 800a6f8:	f7ff fdec 	bl	800a2d4 <USBD_GetString>
 800a6fc:	e004      	b.n	800a708 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	4904      	ldr	r1, [pc, #16]	@ (800a714 <USBD_HS_ProductStrDescriptor+0x34>)
 800a702:	4805      	ldr	r0, [pc, #20]	@ (800a718 <USBD_HS_ProductStrDescriptor+0x38>)
 800a704:	f7ff fde6 	bl	800a2d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a708:	4b02      	ldr	r3, [pc, #8]	@ (800a714 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20001c68 	.word	0x20001c68
 800a718:	0800f9f8 	.word	0x0800f9f8

0800a71c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	6039      	str	r1, [r7, #0]
 800a726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	4904      	ldr	r1, [pc, #16]	@ (800a73c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a72c:	4804      	ldr	r0, [pc, #16]	@ (800a740 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a72e:	f7ff fdd1 	bl	800a2d4 <USBD_GetString>
  return USBD_StrDesc;
 800a732:	4b02      	ldr	r3, [pc, #8]	@ (800a73c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	20001c68 	.word	0x20001c68
 800a740:	0800fa10 	.word	0x0800fa10

0800a744 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	6039      	str	r1, [r7, #0]
 800a74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	221a      	movs	r2, #26
 800a754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a756:	f000 f843 	bl	800a7e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a75a:	4b02      	ldr	r3, [pc, #8]	@ (800a764 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	200000e0 	.word	0x200000e0

0800a768 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	6039      	str	r1, [r7, #0]
 800a772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d105      	bne.n	800a786 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	4907      	ldr	r1, [pc, #28]	@ (800a79c <USBD_HS_ConfigStrDescriptor+0x34>)
 800a77e:	4808      	ldr	r0, [pc, #32]	@ (800a7a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a780:	f7ff fda8 	bl	800a2d4 <USBD_GetString>
 800a784:	e004      	b.n	800a790 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	4904      	ldr	r1, [pc, #16]	@ (800a79c <USBD_HS_ConfigStrDescriptor+0x34>)
 800a78a:	4805      	ldr	r0, [pc, #20]	@ (800a7a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a78c:	f7ff fda2 	bl	800a2d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a790:	4b02      	ldr	r3, [pc, #8]	@ (800a79c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20001c68 	.word	0x20001c68
 800a7a0:	0800fa24 	.word	0x0800fa24

0800a7a4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d105      	bne.n	800a7c2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	4907      	ldr	r1, [pc, #28]	@ (800a7d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a7ba:	4808      	ldr	r0, [pc, #32]	@ (800a7dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a7bc:	f7ff fd8a 	bl	800a2d4 <USBD_GetString>
 800a7c0:	e004      	b.n	800a7cc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	4904      	ldr	r1, [pc, #16]	@ (800a7d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a7c6:	4805      	ldr	r0, [pc, #20]	@ (800a7dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a7c8:	f7ff fd84 	bl	800a2d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7cc:	4b02      	ldr	r3, [pc, #8]	@ (800a7d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20001c68 	.word	0x20001c68
 800a7dc:	0800fa30 	.word	0x0800fa30

0800a7e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a824 <Get_SerialNum+0x44>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a828 <Get_SerialNum+0x48>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a82c <Get_SerialNum+0x4c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a806:	2208      	movs	r2, #8
 800a808:	4909      	ldr	r1, [pc, #36]	@ (800a830 <Get_SerialNum+0x50>)
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f000 f814 	bl	800a838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a810:	2204      	movs	r2, #4
 800a812:	4908      	ldr	r1, [pc, #32]	@ (800a834 <Get_SerialNum+0x54>)
 800a814:	68b8      	ldr	r0, [r7, #8]
 800a816:	f000 f80f 	bl	800a838 <IntToUnicode>
  }
}
 800a81a:	bf00      	nop
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	1fff7a10 	.word	0x1fff7a10
 800a828:	1fff7a14 	.word	0x1fff7a14
 800a82c:	1fff7a18 	.word	0x1fff7a18
 800a830:	200000e2 	.word	0x200000e2
 800a834:	200000f2 	.word	0x200000f2

0800a838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a84a:	2300      	movs	r3, #0
 800a84c:	75fb      	strb	r3, [r7, #23]
 800a84e:	e027      	b.n	800a8a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	0f1b      	lsrs	r3, r3, #28
 800a854:	2b09      	cmp	r3, #9
 800a856:	d80b      	bhi.n	800a870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	0f1b      	lsrs	r3, r3, #28
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	4619      	mov	r1, r3
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	440b      	add	r3, r1
 800a868:	3230      	adds	r2, #48	@ 0x30
 800a86a:	b2d2      	uxtb	r2, r2
 800a86c:	701a      	strb	r2, [r3, #0]
 800a86e:	e00a      	b.n	800a886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	0f1b      	lsrs	r3, r3, #28
 800a874:	b2da      	uxtb	r2, r3
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	4619      	mov	r1, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	440b      	add	r3, r1
 800a880:	3237      	adds	r2, #55	@ 0x37
 800a882:	b2d2      	uxtb	r2, r2
 800a884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	011b      	lsls	r3, r3, #4
 800a88a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	3301      	adds	r3, #1
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	4413      	add	r3, r2
 800a896:	2200      	movs	r2, #0
 800a898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	3301      	adds	r3, #1
 800a89e:	75fb      	strb	r3, [r7, #23]
 800a8a0:	7dfa      	ldrb	r2, [r7, #23]
 800a8a2:	79fb      	ldrb	r3, [r7, #7]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d3d3      	bcc.n	800a850 <IntToUnicode+0x18>
  }
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	371c      	adds	r7, #28
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
	...

0800a8b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08c      	sub	sp, #48	@ 0x30
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8c0:	f107 031c 	add.w	r3, r7, #28
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	601a      	str	r2, [r3, #0]
 800a8c8:	605a      	str	r2, [r3, #4]
 800a8ca:	609a      	str	r2, [r3, #8]
 800a8cc:	60da      	str	r2, [r3, #12]
 800a8ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a42      	ldr	r2, [pc, #264]	@ (800a9e0 <HAL_PCD_MspInit+0x128>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d17e      	bne.n	800a9d8 <HAL_PCD_MspInit+0x120>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8da:	2300      	movs	r3, #0
 800a8dc:	61bb      	str	r3, [r7, #24]
 800a8de:	4b41      	ldr	r3, [pc, #260]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a8e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e2:	4a40      	ldr	r2, [pc, #256]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a8e4:	f043 0304 	orr.w	r3, r3, #4
 800a8e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8ea:	4b3e      	ldr	r3, [pc, #248]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	61bb      	str	r3, [r7, #24]
 800a8f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	4b3a      	ldr	r3, [pc, #232]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8fe:	4a39      	ldr	r2, [pc, #228]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a900:	f043 0301 	orr.w	r3, r3, #1
 800a904:	6313      	str	r3, [r2, #48]	@ 0x30
 800a906:	4b37      	ldr	r3, [pc, #220]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a912:	2300      	movs	r3, #0
 800a914:	613b      	str	r3, [r7, #16]
 800a916:	4b33      	ldr	r3, [pc, #204]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91a:	4a32      	ldr	r2, [pc, #200]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a91c:	f043 0302 	orr.w	r3, r3, #2
 800a920:	6313      	str	r3, [r2, #48]	@ 0x30
 800a922:	4b30      	ldr	r3, [pc, #192]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	613b      	str	r3, [r7, #16]
 800a92c:	693b      	ldr	r3, [r7, #16]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a92e:	230d      	movs	r3, #13
 800a930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a932:	2302      	movs	r3, #2
 800a934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a936:	2300      	movs	r3, #0
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a93a:	2303      	movs	r3, #3
 800a93c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a93e:	230a      	movs	r3, #10
 800a940:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a942:	f107 031c 	add.w	r3, r7, #28
 800a946:	4619      	mov	r1, r3
 800a948:	4827      	ldr	r0, [pc, #156]	@ (800a9e8 <HAL_PCD_MspInit+0x130>)
 800a94a:	f7f7 fee3 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800a94e:	2328      	movs	r3, #40	@ 0x28
 800a950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a952:	2302      	movs	r3, #2
 800a954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a956:	2300      	movs	r3, #0
 800a958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a95a:	2303      	movs	r3, #3
 800a95c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a95e:	230a      	movs	r3, #10
 800a960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a962:	f107 031c 	add.w	r3, r7, #28
 800a966:	4619      	mov	r1, r3
 800a968:	4820      	ldr	r0, [pc, #128]	@ (800a9ec <HAL_PCD_MspInit+0x134>)
 800a96a:	f7f7 fed3 	bl	8002714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800a96e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800a972:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a974:	2302      	movs	r3, #2
 800a976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a97c:	2303      	movs	r3, #3
 800a97e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a980:	230a      	movs	r3, #10
 800a982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a984:	f107 031c 	add.w	r3, r7, #28
 800a988:	4619      	mov	r1, r3
 800a98a:	4819      	ldr	r0, [pc, #100]	@ (800a9f0 <HAL_PCD_MspInit+0x138>)
 800a98c:	f7f7 fec2 	bl	8002714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a990:	2300      	movs	r3, #0
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	4b13      	ldr	r3, [pc, #76]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a998:	4a12      	ldr	r2, [pc, #72]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a99a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a99e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a9a0:	4b10      	ldr	r3, [pc, #64]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60bb      	str	r3, [r7, #8]
 800a9b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a9b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9ba:	6313      	str	r3, [r2, #48]	@ 0x30
 800a9bc:	4b09      	ldr	r3, [pc, #36]	@ (800a9e4 <HAL_PCD_MspInit+0x12c>)
 800a9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a9c4:	60bb      	str	r3, [r7, #8]
 800a9c6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	204d      	movs	r0, #77	@ 0x4d
 800a9ce:	f7f7 faee 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a9d2:	204d      	movs	r0, #77	@ 0x4d
 800a9d4:	f7f7 fb07 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a9d8:	bf00      	nop
 800a9da:	3730      	adds	r7, #48	@ 0x30
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	40040000 	.word	0x40040000
 800a9e4:	40023800 	.word	0x40023800
 800a9e8:	40020800 	.word	0x40020800
 800a9ec:	40020000 	.word	0x40020000
 800a9f0:	40020400 	.word	0x40020400

0800a9f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	f7fe faff 	bl	800900e <USBD_LL_SetupStage>
}
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	460b      	mov	r3, r1
 800aa22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa2a:	78fa      	ldrb	r2, [r7, #3]
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	440b      	add	r3, r1
 800aa38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	4619      	mov	r1, r3
 800aa42:	f7fe fb39 	bl	80090b8 <USBD_LL_DataOutStage>
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa60:	78fa      	ldrb	r2, [r7, #3]
 800aa62:	6879      	ldr	r1, [r7, #4]
 800aa64:	4613      	mov	r3, r2
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	4413      	add	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	440b      	add	r3, r1
 800aa6e:	3320      	adds	r3, #32
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	4619      	mov	r1, r3
 800aa76:	f7fe fbd2 	bl	800921e <USBD_LL_DataInStage>
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fd0c 	bl	80094ae <USBD_LL_SOF>
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	79db      	ldrb	r3, [r3, #7]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d102      	bne.n	800aab8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aab2:	2300      	movs	r3, #0
 800aab4:	73fb      	strb	r3, [r7, #15]
 800aab6:	e008      	b.n	800aaca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	79db      	ldrb	r3, [r3, #7]
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d102      	bne.n	800aac6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aac0:	2301      	movs	r3, #1
 800aac2:	73fb      	strb	r3, [r7, #15]
 800aac4:	e001      	b.n	800aaca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aac6:	f7f6 fde9 	bl	800169c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aad0:	7bfa      	ldrb	r2, [r7, #15]
 800aad2:	4611      	mov	r1, r2
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fe fca6 	bl	8009426 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe fc4e 	bl	8009382 <USBD_LL_Reset>
}
 800aae6:	bf00      	nop
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe fca1 	bl	8009446 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab16:	f043 0301 	orr.w	r3, r3, #1
 800ab1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7adb      	ldrb	r3, [r3, #11]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab24:	4b04      	ldr	r3, [pc, #16]	@ (800ab38 <HAL_PCD_SuspendCallback+0x48>)
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	4a03      	ldr	r2, [pc, #12]	@ (800ab38 <HAL_PCD_SuspendCallback+0x48>)
 800ab2a:	f043 0306 	orr.w	r3, r3, #6
 800ab2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	e000ed00 	.word	0xe000ed00

0800ab3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fe fc97 	bl	800947e <USBD_LL_Resume>
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab6a:	78fa      	ldrb	r2, [r7, #3]
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fe fcef 	bl	8009552 <USBD_LL_IsoOUTIncomplete>
}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab8e:	78fa      	ldrb	r2, [r7, #3]
 800ab90:	4611      	mov	r1, r2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fcab 	bl	80094ee <USBD_LL_IsoINIncomplete>
}
 800ab98:	bf00      	nop
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe fd01 	bl	80095b6 <USBD_LL_DevConnected>
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fcfe 	bl	80095cc <USBD_LL_DevDisconnected>
}
 800abd0:	bf00      	nop
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d140      	bne.n	800ac6a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800abe8:	4a22      	ldr	r2, [pc, #136]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a20      	ldr	r2, [pc, #128]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800abf4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800abf8:	4b1e      	ldr	r3, [pc, #120]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800abfa:	4a1f      	ldr	r2, [pc, #124]	@ (800ac78 <USBD_LL_Init+0xa0>)
 800abfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800abfe:	4b1d      	ldr	r3, [pc, #116]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac00:	2206      	movs	r2, #6
 800ac02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800ac04:	4b1b      	ldr	r3, [pc, #108]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ac0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800ac10:	4b18      	ldr	r3, [pc, #96]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ac16:	4b17      	ldr	r3, [pc, #92]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ac1c:	4b15      	ldr	r3, [pc, #84]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ac22:	4b14      	ldr	r3, [pc, #80]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ac28:	4b12      	ldr	r3, [pc, #72]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ac2e:	4b11      	ldr	r3, [pc, #68]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ac34:	4b0f      	ldr	r3, [pc, #60]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ac3a:	480e      	ldr	r0, [pc, #56]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac3c:	f7f7 ff1f 	bl	8002a7e <HAL_PCD_Init>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ac46:	f7f6 fd29 	bl	800169c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ac4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ac4e:	4809      	ldr	r0, [pc, #36]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac50:	f7f9 f94b 	bl	8003eea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800ac54:	2280      	movs	r2, #128	@ 0x80
 800ac56:	2100      	movs	r1, #0
 800ac58:	4806      	ldr	r0, [pc, #24]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac5a:	f7f9 f8ff 	bl	8003e5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ac5e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800ac62:	2101      	movs	r1, #1
 800ac64:	4803      	ldr	r0, [pc, #12]	@ (800ac74 <USBD_LL_Init+0x9c>)
 800ac66:	f7f9 f8f9 	bl	8003e5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	20001e68 	.word	0x20001e68
 800ac78:	40040000 	.word	0x40040000

0800ac7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7f8 f802 	bl	8002c9c <HAL_PCD_Start>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 f942 	bl	800af28 <USBD_Get_USB_Status>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	4608      	mov	r0, r1
 800acbc:	4611      	mov	r1, r2
 800acbe:	461a      	mov	r2, r3
 800acc0:	4603      	mov	r3, r0
 800acc2:	70fb      	strb	r3, [r7, #3]
 800acc4:	460b      	mov	r3, r1
 800acc6:	70bb      	strb	r3, [r7, #2]
 800acc8:	4613      	mov	r3, r2
 800acca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800acda:	78bb      	ldrb	r3, [r7, #2]
 800acdc:	883a      	ldrh	r2, [r7, #0]
 800acde:	78f9      	ldrb	r1, [r7, #3]
 800ace0:	f7f8 fcd6 	bl	8003690 <HAL_PCD_EP_Open>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	4618      	mov	r0, r3
 800acec:	f000 f91c 	bl	800af28 <USBD_Get_USB_Status>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad18:	78fa      	ldrb	r2, [r7, #3]
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7f8 fd21 	bl	8003764 <HAL_PCD_EP_Close>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 f8fd 	bl	800af28 <USBD_Get_USB_Status>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad56:	78fa      	ldrb	r2, [r7, #3]
 800ad58:	4611      	mov	r1, r2
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7f8 fdd9 	bl	8003912 <HAL_PCD_EP_SetStall>
 800ad60:	4603      	mov	r3, r0
 800ad62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 f8de 	bl	800af28 <USBD_Get_USB_Status>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b084      	sub	sp, #16
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	460b      	mov	r3, r1
 800ad84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad94:	78fa      	ldrb	r2, [r7, #3]
 800ad96:	4611      	mov	r1, r2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7f8 fe1d 	bl	80039d8 <HAL_PCD_EP_ClrStall>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 f8bf 	bl	800af28 <USBD_Get_USB_Status>
 800adaa:	4603      	mov	r3, r0
 800adac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adae:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800adcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800add0:	2b00      	cmp	r3, #0
 800add2:	da0b      	bge.n	800adec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adda:	68f9      	ldr	r1, [r7, #12]
 800addc:	4613      	mov	r3, r2
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	4413      	add	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	440b      	add	r3, r1
 800ade6:	3316      	adds	r3, #22
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	e00b      	b.n	800ae04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adec:	78fb      	ldrb	r3, [r7, #3]
 800adee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adf2:	68f9      	ldr	r1, [r7, #12]
 800adf4:	4613      	mov	r3, r2
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	440b      	add	r3, r1
 800adfe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ae02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae2a:	78fa      	ldrb	r2, [r7, #3]
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7f8 fc0a 	bl	8003648 <HAL_PCD_SetAddress>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 f874 	bl	800af28 <USBD_Get_USB_Status>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b086      	sub	sp, #24
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae6c:	7af9      	ldrb	r1, [r7, #11]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	f7f8 fd14 	bl	800389e <HAL_PCD_EP_Transmit>
 800ae76:	4603      	mov	r3, r0
 800ae78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae7a:	7dfb      	ldrb	r3, [r7, #23]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 f853 	bl	800af28 <USBD_Get_USB_Status>
 800ae82:	4603      	mov	r3, r0
 800ae84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae86:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3718      	adds	r7, #24
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	607a      	str	r2, [r7, #4]
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aeae:	7af9      	ldrb	r1, [r7, #11]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	f7f8 fca0 	bl	80037f8 <HAL_PCD_EP_Receive>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aebc:	7dfb      	ldrb	r3, [r7, #23]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 f832 	bl	800af28 <USBD_Get_USB_Status>
 800aec4:	4603      	mov	r3, r0
 800aec6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aec8:	7dbb      	ldrb	r3, [r7, #22]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	460b      	mov	r3, r1
 800aedc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aee4:	78fa      	ldrb	r2, [r7, #3]
 800aee6:	4611      	mov	r1, r2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7f8 fcc0 	bl	800386e <HAL_PCD_EP_GetRxCount>
 800aeee:	4603      	mov	r3, r0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af00:	4b03      	ldr	r3, [pc, #12]	@ (800af10 <USBD_static_malloc+0x18>)
}
 800af02:	4618      	mov	r0, r3
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	2000234c 	.word	0x2000234c

0800af14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]

}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	4603      	mov	r3, r0
 800af30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af36:	79fb      	ldrb	r3, [r7, #7]
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d817      	bhi.n	800af6c <USBD_Get_USB_Status+0x44>
 800af3c:	a201      	add	r2, pc, #4	@ (adr r2, 800af44 <USBD_Get_USB_Status+0x1c>)
 800af3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af42:	bf00      	nop
 800af44:	0800af55 	.word	0x0800af55
 800af48:	0800af5b 	.word	0x0800af5b
 800af4c:	0800af61 	.word	0x0800af61
 800af50:	0800af67 	.word	0x0800af67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	73fb      	strb	r3, [r7, #15]
    break;
 800af58:	e00b      	b.n	800af72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af5a:	2303      	movs	r3, #3
 800af5c:	73fb      	strb	r3, [r7, #15]
    break;
 800af5e:	e008      	b.n	800af72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af60:	2301      	movs	r3, #1
 800af62:	73fb      	strb	r3, [r7, #15]
    break;
 800af64:	e005      	b.n	800af72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af66:	2303      	movs	r3, #3
 800af68:	73fb      	strb	r3, [r7, #15]
    break;
 800af6a:	e002      	b.n	800af72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af6c:	2303      	movs	r3, #3
 800af6e:	73fb      	strb	r3, [r7, #15]
    break;
 800af70:	bf00      	nop
  }
  return usb_status;
 800af72:	7bfb      	ldrb	r3, [r7, #15]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <std>:
 800af80:	2300      	movs	r3, #0
 800af82:	b510      	push	{r4, lr}
 800af84:	4604      	mov	r4, r0
 800af86:	e9c0 3300 	strd	r3, r3, [r0]
 800af8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af8e:	6083      	str	r3, [r0, #8]
 800af90:	8181      	strh	r1, [r0, #12]
 800af92:	6643      	str	r3, [r0, #100]	@ 0x64
 800af94:	81c2      	strh	r2, [r0, #14]
 800af96:	6183      	str	r3, [r0, #24]
 800af98:	4619      	mov	r1, r3
 800af9a:	2208      	movs	r2, #8
 800af9c:	305c      	adds	r0, #92	@ 0x5c
 800af9e:	f000 f914 	bl	800b1ca <memset>
 800afa2:	4b0d      	ldr	r3, [pc, #52]	@ (800afd8 <std+0x58>)
 800afa4:	6223      	str	r3, [r4, #32]
 800afa6:	4b0d      	ldr	r3, [pc, #52]	@ (800afdc <std+0x5c>)
 800afa8:	6263      	str	r3, [r4, #36]	@ 0x24
 800afaa:	4b0d      	ldr	r3, [pc, #52]	@ (800afe0 <std+0x60>)
 800afac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <std+0x64>)
 800afb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afb2:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <std+0x68>)
 800afb4:	61e4      	str	r4, [r4, #28]
 800afb6:	429c      	cmp	r4, r3
 800afb8:	d006      	beq.n	800afc8 <std+0x48>
 800afba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afbe:	4294      	cmp	r4, r2
 800afc0:	d002      	beq.n	800afc8 <std+0x48>
 800afc2:	33d0      	adds	r3, #208	@ 0xd0
 800afc4:	429c      	cmp	r4, r3
 800afc6:	d105      	bne.n	800afd4 <std+0x54>
 800afc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd0:	f000 b974 	b.w	800b2bc <__retarget_lock_init_recursive>
 800afd4:	bd10      	pop	{r4, pc}
 800afd6:	bf00      	nop
 800afd8:	0800b145 	.word	0x0800b145
 800afdc:	0800b167 	.word	0x0800b167
 800afe0:	0800b19f 	.word	0x0800b19f
 800afe4:	0800b1c3 	.word	0x0800b1c3
 800afe8:	2000256c 	.word	0x2000256c

0800afec <stdio_exit_handler>:
 800afec:	4a02      	ldr	r2, [pc, #8]	@ (800aff8 <stdio_exit_handler+0xc>)
 800afee:	4903      	ldr	r1, [pc, #12]	@ (800affc <stdio_exit_handler+0x10>)
 800aff0:	4803      	ldr	r0, [pc, #12]	@ (800b000 <stdio_exit_handler+0x14>)
 800aff2:	f000 b869 	b.w	800b0c8 <_fwalk_sglue>
 800aff6:	bf00      	nop
 800aff8:	200000fc 	.word	0x200000fc
 800affc:	0800cd5d 	.word	0x0800cd5d
 800b000:	20000110 	.word	0x20000110

0800b004 <cleanup_stdio>:
 800b004:	6841      	ldr	r1, [r0, #4]
 800b006:	4b0c      	ldr	r3, [pc, #48]	@ (800b038 <cleanup_stdio+0x34>)
 800b008:	4299      	cmp	r1, r3
 800b00a:	b510      	push	{r4, lr}
 800b00c:	4604      	mov	r4, r0
 800b00e:	d001      	beq.n	800b014 <cleanup_stdio+0x10>
 800b010:	f001 fea4 	bl	800cd5c <_fclose_r>
 800b014:	68a1      	ldr	r1, [r4, #8]
 800b016:	4b09      	ldr	r3, [pc, #36]	@ (800b03c <cleanup_stdio+0x38>)
 800b018:	4299      	cmp	r1, r3
 800b01a:	d002      	beq.n	800b022 <cleanup_stdio+0x1e>
 800b01c:	4620      	mov	r0, r4
 800b01e:	f001 fe9d 	bl	800cd5c <_fclose_r>
 800b022:	68e1      	ldr	r1, [r4, #12]
 800b024:	4b06      	ldr	r3, [pc, #24]	@ (800b040 <cleanup_stdio+0x3c>)
 800b026:	4299      	cmp	r1, r3
 800b028:	d004      	beq.n	800b034 <cleanup_stdio+0x30>
 800b02a:	4620      	mov	r0, r4
 800b02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b030:	f001 be94 	b.w	800cd5c <_fclose_r>
 800b034:	bd10      	pop	{r4, pc}
 800b036:	bf00      	nop
 800b038:	2000256c 	.word	0x2000256c
 800b03c:	200025d4 	.word	0x200025d4
 800b040:	2000263c 	.word	0x2000263c

0800b044 <global_stdio_init.part.0>:
 800b044:	b510      	push	{r4, lr}
 800b046:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <global_stdio_init.part.0+0x30>)
 800b048:	4c0b      	ldr	r4, [pc, #44]	@ (800b078 <global_stdio_init.part.0+0x34>)
 800b04a:	4a0c      	ldr	r2, [pc, #48]	@ (800b07c <global_stdio_init.part.0+0x38>)
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	4620      	mov	r0, r4
 800b050:	2200      	movs	r2, #0
 800b052:	2104      	movs	r1, #4
 800b054:	f7ff ff94 	bl	800af80 <std>
 800b058:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b05c:	2201      	movs	r2, #1
 800b05e:	2109      	movs	r1, #9
 800b060:	f7ff ff8e 	bl	800af80 <std>
 800b064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b068:	2202      	movs	r2, #2
 800b06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b06e:	2112      	movs	r1, #18
 800b070:	f7ff bf86 	b.w	800af80 <std>
 800b074:	200026a4 	.word	0x200026a4
 800b078:	2000256c 	.word	0x2000256c
 800b07c:	0800afed 	.word	0x0800afed

0800b080 <__sfp_lock_acquire>:
 800b080:	4801      	ldr	r0, [pc, #4]	@ (800b088 <__sfp_lock_acquire+0x8>)
 800b082:	f000 b91d 	b.w	800b2c0 <__retarget_lock_acquire_recursive>
 800b086:	bf00      	nop
 800b088:	200026ae 	.word	0x200026ae

0800b08c <__sfp_lock_release>:
 800b08c:	4801      	ldr	r0, [pc, #4]	@ (800b094 <__sfp_lock_release+0x8>)
 800b08e:	f000 b918 	b.w	800b2c2 <__retarget_lock_release_recursive>
 800b092:	bf00      	nop
 800b094:	200026ae 	.word	0x200026ae

0800b098 <__sinit>:
 800b098:	b510      	push	{r4, lr}
 800b09a:	4604      	mov	r4, r0
 800b09c:	f7ff fff0 	bl	800b080 <__sfp_lock_acquire>
 800b0a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0a2:	b11b      	cbz	r3, 800b0ac <__sinit+0x14>
 800b0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0a8:	f7ff bff0 	b.w	800b08c <__sfp_lock_release>
 800b0ac:	4b04      	ldr	r3, [pc, #16]	@ (800b0c0 <__sinit+0x28>)
 800b0ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0b0:	4b04      	ldr	r3, [pc, #16]	@ (800b0c4 <__sinit+0x2c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1f5      	bne.n	800b0a4 <__sinit+0xc>
 800b0b8:	f7ff ffc4 	bl	800b044 <global_stdio_init.part.0>
 800b0bc:	e7f2      	b.n	800b0a4 <__sinit+0xc>
 800b0be:	bf00      	nop
 800b0c0:	0800b005 	.word	0x0800b005
 800b0c4:	200026a4 	.word	0x200026a4

0800b0c8 <_fwalk_sglue>:
 800b0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0cc:	4607      	mov	r7, r0
 800b0ce:	4688      	mov	r8, r1
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	2600      	movs	r6, #0
 800b0d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0d8:	f1b9 0901 	subs.w	r9, r9, #1
 800b0dc:	d505      	bpl.n	800b0ea <_fwalk_sglue+0x22>
 800b0de:	6824      	ldr	r4, [r4, #0]
 800b0e0:	2c00      	cmp	r4, #0
 800b0e2:	d1f7      	bne.n	800b0d4 <_fwalk_sglue+0xc>
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d907      	bls.n	800b100 <_fwalk_sglue+0x38>
 800b0f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	d003      	beq.n	800b100 <_fwalk_sglue+0x38>
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c0      	blx	r8
 800b0fe:	4306      	orrs	r6, r0
 800b100:	3568      	adds	r5, #104	@ 0x68
 800b102:	e7e9      	b.n	800b0d8 <_fwalk_sglue+0x10>

0800b104 <sprintf>:
 800b104:	b40e      	push	{r1, r2, r3}
 800b106:	b500      	push	{lr}
 800b108:	b09c      	sub	sp, #112	@ 0x70
 800b10a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b10c:	9002      	str	r0, [sp, #8]
 800b10e:	9006      	str	r0, [sp, #24]
 800b110:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b114:	4809      	ldr	r0, [pc, #36]	@ (800b13c <sprintf+0x38>)
 800b116:	9107      	str	r1, [sp, #28]
 800b118:	9104      	str	r1, [sp, #16]
 800b11a:	4909      	ldr	r1, [pc, #36]	@ (800b140 <sprintf+0x3c>)
 800b11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b120:	9105      	str	r1, [sp, #20]
 800b122:	6800      	ldr	r0, [r0, #0]
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	a902      	add	r1, sp, #8
 800b128:	f000 fc3a 	bl	800b9a0 <_svfprintf_r>
 800b12c:	9b02      	ldr	r3, [sp, #8]
 800b12e:	2200      	movs	r2, #0
 800b130:	701a      	strb	r2, [r3, #0]
 800b132:	b01c      	add	sp, #112	@ 0x70
 800b134:	f85d eb04 	ldr.w	lr, [sp], #4
 800b138:	b003      	add	sp, #12
 800b13a:	4770      	bx	lr
 800b13c:	20000108 	.word	0x20000108
 800b140:	ffff0208 	.word	0xffff0208

0800b144 <__sread>:
 800b144:	b510      	push	{r4, lr}
 800b146:	460c      	mov	r4, r1
 800b148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14c:	f000 f868 	bl	800b220 <_read_r>
 800b150:	2800      	cmp	r0, #0
 800b152:	bfab      	itete	ge
 800b154:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800b156:	89a3      	ldrhlt	r3, [r4, #12]
 800b158:	181b      	addge	r3, r3, r0
 800b15a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b15e:	bfac      	ite	ge
 800b160:	6523      	strge	r3, [r4, #80]	@ 0x50
 800b162:	81a3      	strhlt	r3, [r4, #12]
 800b164:	bd10      	pop	{r4, pc}

0800b166 <__swrite>:
 800b166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16a:	461f      	mov	r7, r3
 800b16c:	898b      	ldrh	r3, [r1, #12]
 800b16e:	05db      	lsls	r3, r3, #23
 800b170:	4605      	mov	r5, r0
 800b172:	460c      	mov	r4, r1
 800b174:	4616      	mov	r6, r2
 800b176:	d505      	bpl.n	800b184 <__swrite+0x1e>
 800b178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17c:	2302      	movs	r3, #2
 800b17e:	2200      	movs	r2, #0
 800b180:	f000 f83c 	bl	800b1fc <_lseek_r>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b18a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	4632      	mov	r2, r6
 800b192:	463b      	mov	r3, r7
 800b194:	4628      	mov	r0, r5
 800b196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b19a:	f000 b853 	b.w	800b244 <_write_r>

0800b19e <__sseek>:
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a6:	f000 f829 	bl	800b1fc <_lseek_r>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	bf15      	itete	ne
 800b1b0:	6520      	strne	r0, [r4, #80]	@ 0x50
 800b1b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1ba:	81a3      	strheq	r3, [r4, #12]
 800b1bc:	bf18      	it	ne
 800b1be:	81a3      	strhne	r3, [r4, #12]
 800b1c0:	bd10      	pop	{r4, pc}

0800b1c2 <__sclose>:
 800b1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c6:	f000 b809 	b.w	800b1dc <_close_r>

0800b1ca <memset>:
 800b1ca:	4402      	add	r2, r0
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d100      	bne.n	800b1d4 <memset+0xa>
 800b1d2:	4770      	bx	lr
 800b1d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d8:	e7f9      	b.n	800b1ce <memset+0x4>
	...

0800b1dc <_close_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4d06      	ldr	r5, [pc, #24]	@ (800b1f8 <_close_r+0x1c>)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	602b      	str	r3, [r5, #0]
 800b1e8:	f7f6 fcca 	bl	8001b80 <_close>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_close_r+0x1a>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_close_r+0x1a>
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	200026a8 	.word	0x200026a8

0800b1fc <_lseek_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4d07      	ldr	r5, [pc, #28]	@ (800b21c <_lseek_r+0x20>)
 800b200:	4604      	mov	r4, r0
 800b202:	4608      	mov	r0, r1
 800b204:	4611      	mov	r1, r2
 800b206:	2200      	movs	r2, #0
 800b208:	602a      	str	r2, [r5, #0]
 800b20a:	461a      	mov	r2, r3
 800b20c:	f7f6 fcdf 	bl	8001bce <_lseek>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_lseek_r+0x1e>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	b103      	cbz	r3, 800b21a <_lseek_r+0x1e>
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	200026a8 	.word	0x200026a8

0800b220 <_read_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d07      	ldr	r5, [pc, #28]	@ (800b240 <_read_r+0x20>)
 800b224:	4604      	mov	r4, r0
 800b226:	4608      	mov	r0, r1
 800b228:	4611      	mov	r1, r2
 800b22a:	2200      	movs	r2, #0
 800b22c:	602a      	str	r2, [r5, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	f7f6 fc6d 	bl	8001b0e <_read>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_read_r+0x1e>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_read_r+0x1e>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	200026a8 	.word	0x200026a8

0800b244 <_write_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	@ (800b264 <_write_r+0x20>)
 800b248:	4604      	mov	r4, r0
 800b24a:	4608      	mov	r0, r1
 800b24c:	4611      	mov	r1, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f7f6 fc78 	bl	8001b48 <_write>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_write_r+0x1e>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_write_r+0x1e>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	200026a8 	.word	0x200026a8

0800b268 <__errno>:
 800b268:	4b01      	ldr	r3, [pc, #4]	@ (800b270 <__errno+0x8>)
 800b26a:	6818      	ldr	r0, [r3, #0]
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000108 	.word	0x20000108

0800b274 <__libc_init_array>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	4d0d      	ldr	r5, [pc, #52]	@ (800b2ac <__libc_init_array+0x38>)
 800b278:	4c0d      	ldr	r4, [pc, #52]	@ (800b2b0 <__libc_init_array+0x3c>)
 800b27a:	1b64      	subs	r4, r4, r5
 800b27c:	10a4      	asrs	r4, r4, #2
 800b27e:	2600      	movs	r6, #0
 800b280:	42a6      	cmp	r6, r4
 800b282:	d109      	bne.n	800b298 <__libc_init_array+0x24>
 800b284:	4d0b      	ldr	r5, [pc, #44]	@ (800b2b4 <__libc_init_array+0x40>)
 800b286:	4c0c      	ldr	r4, [pc, #48]	@ (800b2b8 <__libc_init_array+0x44>)
 800b288:	f004 fba4 	bl	800f9d4 <_init>
 800b28c:	1b64      	subs	r4, r4, r5
 800b28e:	10a4      	asrs	r4, r4, #2
 800b290:	2600      	movs	r6, #0
 800b292:	42a6      	cmp	r6, r4
 800b294:	d105      	bne.n	800b2a2 <__libc_init_array+0x2e>
 800b296:	bd70      	pop	{r4, r5, r6, pc}
 800b298:	f855 3b04 	ldr.w	r3, [r5], #4
 800b29c:	4798      	blx	r3
 800b29e:	3601      	adds	r6, #1
 800b2a0:	e7ee      	b.n	800b280 <__libc_init_array+0xc>
 800b2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a6:	4798      	blx	r3
 800b2a8:	3601      	adds	r6, #1
 800b2aa:	e7f2      	b.n	800b292 <__libc_init_array+0x1e>
 800b2ac:	0800fdf0 	.word	0x0800fdf0
 800b2b0:	0800fdf0 	.word	0x0800fdf0
 800b2b4:	0800fdf0 	.word	0x0800fdf0
 800b2b8:	0800fdf8 	.word	0x0800fdf8

0800b2bc <__retarget_lock_init_recursive>:
 800b2bc:	4770      	bx	lr

0800b2be <__retarget_lock_close_recursive>:
 800b2be:	4770      	bx	lr

0800b2c0 <__retarget_lock_acquire_recursive>:
 800b2c0:	4770      	bx	lr

0800b2c2 <__retarget_lock_release_recursive>:
 800b2c2:	4770      	bx	lr

0800b2c4 <register_fini>:
 800b2c4:	4b02      	ldr	r3, [pc, #8]	@ (800b2d0 <register_fini+0xc>)
 800b2c6:	b113      	cbz	r3, 800b2ce <register_fini+0xa>
 800b2c8:	4802      	ldr	r0, [pc, #8]	@ (800b2d4 <register_fini+0x10>)
 800b2ca:	f000 b805 	b.w	800b2d8 <atexit>
 800b2ce:	4770      	bx	lr
 800b2d0:	00000000 	.word	0x00000000
 800b2d4:	0800cfb1 	.word	0x0800cfb1

0800b2d8 <atexit>:
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4601      	mov	r1, r0
 800b2dc:	461a      	mov	r2, r3
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f001 bebc 	b.w	800d05c <__register_exitproc>

0800b2e4 <_malloc_trim_r>:
 800b2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	2008      	movs	r0, #8
 800b2ec:	4689      	mov	r9, r1
 800b2ee:	f001 fe73 	bl	800cfd8 <sysconf>
 800b2f2:	4f24      	ldr	r7, [pc, #144]	@ (800b384 <_malloc_trim_r+0xa0>)
 800b2f4:	4680      	mov	r8, r0
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f000 fb44 	bl	800b984 <__malloc_lock>
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	685d      	ldr	r5, [r3, #4]
 800b300:	f025 0503 	bic.w	r5, r5, #3
 800b304:	f1a5 0411 	sub.w	r4, r5, #17
 800b308:	eba4 0409 	sub.w	r4, r4, r9
 800b30c:	4444      	add	r4, r8
 800b30e:	fbb4 f4f8 	udiv	r4, r4, r8
 800b312:	3c01      	subs	r4, #1
 800b314:	fb08 f404 	mul.w	r4, r8, r4
 800b318:	45a0      	cmp	r8, r4
 800b31a:	dd05      	ble.n	800b328 <_malloc_trim_r+0x44>
 800b31c:	4630      	mov	r0, r6
 800b31e:	f000 fb37 	bl	800b990 <__malloc_unlock>
 800b322:	2000      	movs	r0, #0
 800b324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b328:	2100      	movs	r1, #0
 800b32a:	4630      	mov	r0, r6
 800b32c:	f001 fe30 	bl	800cf90 <_sbrk_r>
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	442b      	add	r3, r5
 800b334:	4298      	cmp	r0, r3
 800b336:	d1f1      	bne.n	800b31c <_malloc_trim_r+0x38>
 800b338:	4261      	negs	r1, r4
 800b33a:	4630      	mov	r0, r6
 800b33c:	f001 fe28 	bl	800cf90 <_sbrk_r>
 800b340:	3001      	adds	r0, #1
 800b342:	d110      	bne.n	800b366 <_malloc_trim_r+0x82>
 800b344:	2100      	movs	r1, #0
 800b346:	4630      	mov	r0, r6
 800b348:	f001 fe22 	bl	800cf90 <_sbrk_r>
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	1a83      	subs	r3, r0, r2
 800b350:	2b0f      	cmp	r3, #15
 800b352:	dde3      	ble.n	800b31c <_malloc_trim_r+0x38>
 800b354:	490c      	ldr	r1, [pc, #48]	@ (800b388 <_malloc_trim_r+0xa4>)
 800b356:	6809      	ldr	r1, [r1, #0]
 800b358:	1a40      	subs	r0, r0, r1
 800b35a:	490c      	ldr	r1, [pc, #48]	@ (800b38c <_malloc_trim_r+0xa8>)
 800b35c:	f043 0301 	orr.w	r3, r3, #1
 800b360:	6008      	str	r0, [r1, #0]
 800b362:	6053      	str	r3, [r2, #4]
 800b364:	e7da      	b.n	800b31c <_malloc_trim_r+0x38>
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	4a08      	ldr	r2, [pc, #32]	@ (800b38c <_malloc_trim_r+0xa8>)
 800b36a:	1b2d      	subs	r5, r5, r4
 800b36c:	f045 0501 	orr.w	r5, r5, #1
 800b370:	605d      	str	r5, [r3, #4]
 800b372:	6813      	ldr	r3, [r2, #0]
 800b374:	4630      	mov	r0, r6
 800b376:	1b1b      	subs	r3, r3, r4
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	f000 fb09 	bl	800b990 <__malloc_unlock>
 800b37e:	2001      	movs	r0, #1
 800b380:	e7d0      	b.n	800b324 <_malloc_trim_r+0x40>
 800b382:	bf00      	nop
 800b384:	2000023c 	.word	0x2000023c
 800b388:	20000234 	.word	0x20000234
 800b38c:	200026b4 	.word	0x200026b4

0800b390 <_free_r>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	4604      	mov	r4, r0
 800b394:	460f      	mov	r7, r1
 800b396:	2900      	cmp	r1, #0
 800b398:	f000 80b1 	beq.w	800b4fe <_free_r+0x16e>
 800b39c:	f000 faf2 	bl	800b984 <__malloc_lock>
 800b3a0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b3a4:	4d56      	ldr	r5, [pc, #344]	@ (800b500 <_free_r+0x170>)
 800b3a6:	f022 0001 	bic.w	r0, r2, #1
 800b3aa:	f1a7 0308 	sub.w	r3, r7, #8
 800b3ae:	eb03 0c00 	add.w	ip, r3, r0
 800b3b2:	68a9      	ldr	r1, [r5, #8]
 800b3b4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800b3b8:	4561      	cmp	r1, ip
 800b3ba:	f026 0603 	bic.w	r6, r6, #3
 800b3be:	f002 0201 	and.w	r2, r2, #1
 800b3c2:	d11b      	bne.n	800b3fc <_free_r+0x6c>
 800b3c4:	4406      	add	r6, r0
 800b3c6:	b93a      	cbnz	r2, 800b3d8 <_free_r+0x48>
 800b3c8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800b3cc:	1a9b      	subs	r3, r3, r2
 800b3ce:	4416      	add	r6, r2
 800b3d0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800b3d4:	60ca      	str	r2, [r1, #12]
 800b3d6:	6091      	str	r1, [r2, #8]
 800b3d8:	f046 0201 	orr.w	r2, r6, #1
 800b3dc:	605a      	str	r2, [r3, #4]
 800b3de:	60ab      	str	r3, [r5, #8]
 800b3e0:	4b48      	ldr	r3, [pc, #288]	@ (800b504 <_free_r+0x174>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	42b3      	cmp	r3, r6
 800b3e6:	d804      	bhi.n	800b3f2 <_free_r+0x62>
 800b3e8:	4b47      	ldr	r3, [pc, #284]	@ (800b508 <_free_r+0x178>)
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	6819      	ldr	r1, [r3, #0]
 800b3ee:	f7ff ff79 	bl	800b2e4 <_malloc_trim_r>
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3f8:	f000 baca 	b.w	800b990 <__malloc_unlock>
 800b3fc:	f8cc 6004 	str.w	r6, [ip, #4]
 800b400:	2a00      	cmp	r2, #0
 800b402:	d138      	bne.n	800b476 <_free_r+0xe6>
 800b404:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800b408:	1a5b      	subs	r3, r3, r1
 800b40a:	4408      	add	r0, r1
 800b40c:	6899      	ldr	r1, [r3, #8]
 800b40e:	f105 0708 	add.w	r7, r5, #8
 800b412:	42b9      	cmp	r1, r7
 800b414:	d031      	beq.n	800b47a <_free_r+0xea>
 800b416:	68df      	ldr	r7, [r3, #12]
 800b418:	60cf      	str	r7, [r1, #12]
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	eb0c 0106 	add.w	r1, ip, r6
 800b420:	6849      	ldr	r1, [r1, #4]
 800b422:	07c9      	lsls	r1, r1, #31
 800b424:	d40b      	bmi.n	800b43e <_free_r+0xae>
 800b426:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b42a:	4430      	add	r0, r6
 800b42c:	bb3a      	cbnz	r2, 800b47e <_free_r+0xee>
 800b42e:	4e37      	ldr	r6, [pc, #220]	@ (800b50c <_free_r+0x17c>)
 800b430:	42b1      	cmp	r1, r6
 800b432:	d124      	bne.n	800b47e <_free_r+0xee>
 800b434:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800b438:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f040 0101 	orr.w	r1, r0, #1
 800b442:	6059      	str	r1, [r3, #4]
 800b444:	5018      	str	r0, [r3, r0]
 800b446:	2a00      	cmp	r2, #0
 800b448:	d1d3      	bne.n	800b3f2 <_free_r+0x62>
 800b44a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800b44e:	d21b      	bcs.n	800b488 <_free_r+0xf8>
 800b450:	08c2      	lsrs	r2, r0, #3
 800b452:	2101      	movs	r1, #1
 800b454:	0940      	lsrs	r0, r0, #5
 800b456:	4081      	lsls	r1, r0
 800b458:	6868      	ldr	r0, [r5, #4]
 800b45a:	3201      	adds	r2, #1
 800b45c:	4301      	orrs	r1, r0
 800b45e:	6069      	str	r1, [r5, #4]
 800b460:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800b464:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800b468:	3908      	subs	r1, #8
 800b46a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b46e:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800b472:	60c3      	str	r3, [r0, #12]
 800b474:	e7bd      	b.n	800b3f2 <_free_r+0x62>
 800b476:	2200      	movs	r2, #0
 800b478:	e7d0      	b.n	800b41c <_free_r+0x8c>
 800b47a:	2201      	movs	r2, #1
 800b47c:	e7ce      	b.n	800b41c <_free_r+0x8c>
 800b47e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800b482:	60ce      	str	r6, [r1, #12]
 800b484:	60b1      	str	r1, [r6, #8]
 800b486:	e7da      	b.n	800b43e <_free_r+0xae>
 800b488:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800b48c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800b490:	d214      	bcs.n	800b4bc <_free_r+0x12c>
 800b492:	0982      	lsrs	r2, r0, #6
 800b494:	3238      	adds	r2, #56	@ 0x38
 800b496:	1c51      	adds	r1, r2, #1
 800b498:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800b49c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800b4a0:	428e      	cmp	r6, r1
 800b4a2:	d125      	bne.n	800b4f0 <_free_r+0x160>
 800b4a4:	2001      	movs	r0, #1
 800b4a6:	1092      	asrs	r2, r2, #2
 800b4a8:	fa00 f202 	lsl.w	r2, r0, r2
 800b4ac:	6868      	ldr	r0, [r5, #4]
 800b4ae:	4302      	orrs	r2, r0
 800b4b0:	606a      	str	r2, [r5, #4]
 800b4b2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800b4b6:	60b3      	str	r3, [r6, #8]
 800b4b8:	60cb      	str	r3, [r1, #12]
 800b4ba:	e79a      	b.n	800b3f2 <_free_r+0x62>
 800b4bc:	2a14      	cmp	r2, #20
 800b4be:	d801      	bhi.n	800b4c4 <_free_r+0x134>
 800b4c0:	325b      	adds	r2, #91	@ 0x5b
 800b4c2:	e7e8      	b.n	800b496 <_free_r+0x106>
 800b4c4:	2a54      	cmp	r2, #84	@ 0x54
 800b4c6:	d802      	bhi.n	800b4ce <_free_r+0x13e>
 800b4c8:	0b02      	lsrs	r2, r0, #12
 800b4ca:	326e      	adds	r2, #110	@ 0x6e
 800b4cc:	e7e3      	b.n	800b496 <_free_r+0x106>
 800b4ce:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800b4d2:	d802      	bhi.n	800b4da <_free_r+0x14a>
 800b4d4:	0bc2      	lsrs	r2, r0, #15
 800b4d6:	3277      	adds	r2, #119	@ 0x77
 800b4d8:	e7dd      	b.n	800b496 <_free_r+0x106>
 800b4da:	f240 5154 	movw	r1, #1364	@ 0x554
 800b4de:	428a      	cmp	r2, r1
 800b4e0:	bf9a      	itte	ls
 800b4e2:	0c82      	lsrls	r2, r0, #18
 800b4e4:	327c      	addls	r2, #124	@ 0x7c
 800b4e6:	227e      	movhi	r2, #126	@ 0x7e
 800b4e8:	e7d5      	b.n	800b496 <_free_r+0x106>
 800b4ea:	6889      	ldr	r1, [r1, #8]
 800b4ec:	428e      	cmp	r6, r1
 800b4ee:	d004      	beq.n	800b4fa <_free_r+0x16a>
 800b4f0:	684a      	ldr	r2, [r1, #4]
 800b4f2:	f022 0203 	bic.w	r2, r2, #3
 800b4f6:	4282      	cmp	r2, r0
 800b4f8:	d8f7      	bhi.n	800b4ea <_free_r+0x15a>
 800b4fa:	68ce      	ldr	r6, [r1, #12]
 800b4fc:	e7d9      	b.n	800b4b2 <_free_r+0x122>
 800b4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b500:	2000023c 	.word	0x2000023c
 800b504:	20000238 	.word	0x20000238
 800b508:	200026e4 	.word	0x200026e4
 800b50c:	20000244 	.word	0x20000244

0800b510 <_malloc_r>:
 800b510:	f101 030b 	add.w	r3, r1, #11
 800b514:	2b16      	cmp	r3, #22
 800b516:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51a:	4605      	mov	r5, r0
 800b51c:	d906      	bls.n	800b52c <_malloc_r+0x1c>
 800b51e:	f033 0707 	bics.w	r7, r3, #7
 800b522:	d504      	bpl.n	800b52e <_malloc_r+0x1e>
 800b524:	230c      	movs	r3, #12
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	2400      	movs	r4, #0
 800b52a:	e1a3      	b.n	800b874 <_malloc_r+0x364>
 800b52c:	2710      	movs	r7, #16
 800b52e:	42b9      	cmp	r1, r7
 800b530:	d8f8      	bhi.n	800b524 <_malloc_r+0x14>
 800b532:	4628      	mov	r0, r5
 800b534:	f000 fa26 	bl	800b984 <__malloc_lock>
 800b538:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800b53c:	4eaf      	ldr	r6, [pc, #700]	@ (800b7fc <_malloc_r+0x2ec>)
 800b53e:	d237      	bcs.n	800b5b0 <_malloc_r+0xa0>
 800b540:	f107 0208 	add.w	r2, r7, #8
 800b544:	4432      	add	r2, r6
 800b546:	f1a2 0108 	sub.w	r1, r2, #8
 800b54a:	6854      	ldr	r4, [r2, #4]
 800b54c:	428c      	cmp	r4, r1
 800b54e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800b552:	d102      	bne.n	800b55a <_malloc_r+0x4a>
 800b554:	68d4      	ldr	r4, [r2, #12]
 800b556:	42a2      	cmp	r2, r4
 800b558:	d010      	beq.n	800b57c <_malloc_r+0x6c>
 800b55a:	6863      	ldr	r3, [r4, #4]
 800b55c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b560:	f023 0303 	bic.w	r3, r3, #3
 800b564:	60ca      	str	r2, [r1, #12]
 800b566:	4423      	add	r3, r4
 800b568:	6091      	str	r1, [r2, #8]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	f042 0201 	orr.w	r2, r2, #1
 800b570:	605a      	str	r2, [r3, #4]
 800b572:	4628      	mov	r0, r5
 800b574:	f000 fa0c 	bl	800b990 <__malloc_unlock>
 800b578:	3408      	adds	r4, #8
 800b57a:	e17b      	b.n	800b874 <_malloc_r+0x364>
 800b57c:	3302      	adds	r3, #2
 800b57e:	6934      	ldr	r4, [r6, #16]
 800b580:	499f      	ldr	r1, [pc, #636]	@ (800b800 <_malloc_r+0x2f0>)
 800b582:	428c      	cmp	r4, r1
 800b584:	d077      	beq.n	800b676 <_malloc_r+0x166>
 800b586:	6862      	ldr	r2, [r4, #4]
 800b588:	f022 0c03 	bic.w	ip, r2, #3
 800b58c:	ebac 0007 	sub.w	r0, ip, r7
 800b590:	280f      	cmp	r0, #15
 800b592:	dd48      	ble.n	800b626 <_malloc_r+0x116>
 800b594:	19e2      	adds	r2, r4, r7
 800b596:	f040 0301 	orr.w	r3, r0, #1
 800b59a:	f047 0701 	orr.w	r7, r7, #1
 800b59e:	6067      	str	r7, [r4, #4]
 800b5a0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800b5a4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800b5a8:	6053      	str	r3, [r2, #4]
 800b5aa:	f844 000c 	str.w	r0, [r4, ip]
 800b5ae:	e7e0      	b.n	800b572 <_malloc_r+0x62>
 800b5b0:	0a7b      	lsrs	r3, r7, #9
 800b5b2:	d02a      	beq.n	800b60a <_malloc_r+0xfa>
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	d812      	bhi.n	800b5de <_malloc_r+0xce>
 800b5b8:	09bb      	lsrs	r3, r7, #6
 800b5ba:	3338      	adds	r3, #56	@ 0x38
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800b5c2:	f1a2 0c08 	sub.w	ip, r2, #8
 800b5c6:	6854      	ldr	r4, [r2, #4]
 800b5c8:	4564      	cmp	r4, ip
 800b5ca:	d006      	beq.n	800b5da <_malloc_r+0xca>
 800b5cc:	6862      	ldr	r2, [r4, #4]
 800b5ce:	f022 0203 	bic.w	r2, r2, #3
 800b5d2:	1bd0      	subs	r0, r2, r7
 800b5d4:	280f      	cmp	r0, #15
 800b5d6:	dd1c      	ble.n	800b612 <_malloc_r+0x102>
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	3301      	adds	r3, #1
 800b5dc:	e7cf      	b.n	800b57e <_malloc_r+0x6e>
 800b5de:	2b14      	cmp	r3, #20
 800b5e0:	d801      	bhi.n	800b5e6 <_malloc_r+0xd6>
 800b5e2:	335b      	adds	r3, #91	@ 0x5b
 800b5e4:	e7ea      	b.n	800b5bc <_malloc_r+0xac>
 800b5e6:	2b54      	cmp	r3, #84	@ 0x54
 800b5e8:	d802      	bhi.n	800b5f0 <_malloc_r+0xe0>
 800b5ea:	0b3b      	lsrs	r3, r7, #12
 800b5ec:	336e      	adds	r3, #110	@ 0x6e
 800b5ee:	e7e5      	b.n	800b5bc <_malloc_r+0xac>
 800b5f0:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800b5f4:	d802      	bhi.n	800b5fc <_malloc_r+0xec>
 800b5f6:	0bfb      	lsrs	r3, r7, #15
 800b5f8:	3377      	adds	r3, #119	@ 0x77
 800b5fa:	e7df      	b.n	800b5bc <_malloc_r+0xac>
 800b5fc:	f240 5254 	movw	r2, #1364	@ 0x554
 800b600:	4293      	cmp	r3, r2
 800b602:	d804      	bhi.n	800b60e <_malloc_r+0xfe>
 800b604:	0cbb      	lsrs	r3, r7, #18
 800b606:	337c      	adds	r3, #124	@ 0x7c
 800b608:	e7d8      	b.n	800b5bc <_malloc_r+0xac>
 800b60a:	233f      	movs	r3, #63	@ 0x3f
 800b60c:	e7d6      	b.n	800b5bc <_malloc_r+0xac>
 800b60e:	237e      	movs	r3, #126	@ 0x7e
 800b610:	e7d4      	b.n	800b5bc <_malloc_r+0xac>
 800b612:	2800      	cmp	r0, #0
 800b614:	68e1      	ldr	r1, [r4, #12]
 800b616:	db04      	blt.n	800b622 <_malloc_r+0x112>
 800b618:	68a3      	ldr	r3, [r4, #8]
 800b61a:	60d9      	str	r1, [r3, #12]
 800b61c:	608b      	str	r3, [r1, #8]
 800b61e:	18a3      	adds	r3, r4, r2
 800b620:	e7a3      	b.n	800b56a <_malloc_r+0x5a>
 800b622:	460c      	mov	r4, r1
 800b624:	e7d0      	b.n	800b5c8 <_malloc_r+0xb8>
 800b626:	2800      	cmp	r0, #0
 800b628:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800b62c:	db07      	blt.n	800b63e <_malloc_r+0x12e>
 800b62e:	44a4      	add	ip, r4
 800b630:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b634:	f043 0301 	orr.w	r3, r3, #1
 800b638:	f8cc 3004 	str.w	r3, [ip, #4]
 800b63c:	e799      	b.n	800b572 <_malloc_r+0x62>
 800b63e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800b642:	6870      	ldr	r0, [r6, #4]
 800b644:	f080 8095 	bcs.w	800b772 <_malloc_r+0x262>
 800b648:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800b64c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800b650:	f04f 0c01 	mov.w	ip, #1
 800b654:	3201      	adds	r2, #1
 800b656:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b65a:	ea4c 0000 	orr.w	r0, ip, r0
 800b65e:	6070      	str	r0, [r6, #4]
 800b660:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800b664:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800b668:	3808      	subs	r0, #8
 800b66a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800b66e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800b672:	f8cc 400c 	str.w	r4, [ip, #12]
 800b676:	1098      	asrs	r0, r3, #2
 800b678:	2201      	movs	r2, #1
 800b67a:	4082      	lsls	r2, r0
 800b67c:	6870      	ldr	r0, [r6, #4]
 800b67e:	4290      	cmp	r0, r2
 800b680:	d326      	bcc.n	800b6d0 <_malloc_r+0x1c0>
 800b682:	4210      	tst	r0, r2
 800b684:	d106      	bne.n	800b694 <_malloc_r+0x184>
 800b686:	f023 0303 	bic.w	r3, r3, #3
 800b68a:	0052      	lsls	r2, r2, #1
 800b68c:	4210      	tst	r0, r2
 800b68e:	f103 0304 	add.w	r3, r3, #4
 800b692:	d0fa      	beq.n	800b68a <_malloc_r+0x17a>
 800b694:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800b698:	46c1      	mov	r9, r8
 800b69a:	469e      	mov	lr, r3
 800b69c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b6a0:	454c      	cmp	r4, r9
 800b6a2:	f040 80b9 	bne.w	800b818 <_malloc_r+0x308>
 800b6a6:	f10e 0e01 	add.w	lr, lr, #1
 800b6aa:	f01e 0f03 	tst.w	lr, #3
 800b6ae:	f109 0908 	add.w	r9, r9, #8
 800b6b2:	d1f3      	bne.n	800b69c <_malloc_r+0x18c>
 800b6b4:	0798      	lsls	r0, r3, #30
 800b6b6:	f040 80e3 	bne.w	800b880 <_malloc_r+0x370>
 800b6ba:	6873      	ldr	r3, [r6, #4]
 800b6bc:	ea23 0302 	bic.w	r3, r3, r2
 800b6c0:	6073      	str	r3, [r6, #4]
 800b6c2:	6870      	ldr	r0, [r6, #4]
 800b6c4:	0052      	lsls	r2, r2, #1
 800b6c6:	4290      	cmp	r0, r2
 800b6c8:	d302      	bcc.n	800b6d0 <_malloc_r+0x1c0>
 800b6ca:	2a00      	cmp	r2, #0
 800b6cc:	f040 80e5 	bne.w	800b89a <_malloc_r+0x38a>
 800b6d0:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800b6d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b6d8:	f023 0903 	bic.w	r9, r3, #3
 800b6dc:	45b9      	cmp	r9, r7
 800b6de:	d304      	bcc.n	800b6ea <_malloc_r+0x1da>
 800b6e0:	eba9 0207 	sub.w	r2, r9, r7
 800b6e4:	2a0f      	cmp	r2, #15
 800b6e6:	f300 8141 	bgt.w	800b96c <_malloc_r+0x45c>
 800b6ea:	4b46      	ldr	r3, [pc, #280]	@ (800b804 <_malloc_r+0x2f4>)
 800b6ec:	6819      	ldr	r1, [r3, #0]
 800b6ee:	3110      	adds	r1, #16
 800b6f0:	4439      	add	r1, r7
 800b6f2:	2008      	movs	r0, #8
 800b6f4:	9101      	str	r1, [sp, #4]
 800b6f6:	f001 fc6f 	bl	800cfd8 <sysconf>
 800b6fa:	4a43      	ldr	r2, [pc, #268]	@ (800b808 <_malloc_r+0x2f8>)
 800b6fc:	9901      	ldr	r1, [sp, #4]
 800b6fe:	6813      	ldr	r3, [r2, #0]
 800b700:	3301      	adds	r3, #1
 800b702:	bf1f      	itttt	ne
 800b704:	f101 31ff 	addne.w	r1, r1, #4294967295
 800b708:	1809      	addne	r1, r1, r0
 800b70a:	4243      	negne	r3, r0
 800b70c:	4019      	andne	r1, r3
 800b70e:	4680      	mov	r8, r0
 800b710:	4628      	mov	r0, r5
 800b712:	9101      	str	r1, [sp, #4]
 800b714:	f001 fc3c 	bl	800cf90 <_sbrk_r>
 800b718:	1c42      	adds	r2, r0, #1
 800b71a:	eb0a 0b09 	add.w	fp, sl, r9
 800b71e:	4604      	mov	r4, r0
 800b720:	f000 80f7 	beq.w	800b912 <_malloc_r+0x402>
 800b724:	4583      	cmp	fp, r0
 800b726:	9901      	ldr	r1, [sp, #4]
 800b728:	4a37      	ldr	r2, [pc, #220]	@ (800b808 <_malloc_r+0x2f8>)
 800b72a:	d902      	bls.n	800b732 <_malloc_r+0x222>
 800b72c:	45b2      	cmp	sl, r6
 800b72e:	f040 80f0 	bne.w	800b912 <_malloc_r+0x402>
 800b732:	4b36      	ldr	r3, [pc, #216]	@ (800b80c <_malloc_r+0x2fc>)
 800b734:	6818      	ldr	r0, [r3, #0]
 800b736:	45a3      	cmp	fp, r4
 800b738:	eb00 0e01 	add.w	lr, r0, r1
 800b73c:	f8c3 e000 	str.w	lr, [r3]
 800b740:	f108 3cff 	add.w	ip, r8, #4294967295
 800b744:	f040 80ab 	bne.w	800b89e <_malloc_r+0x38e>
 800b748:	ea1b 0f0c 	tst.w	fp, ip
 800b74c:	f040 80a7 	bne.w	800b89e <_malloc_r+0x38e>
 800b750:	68b2      	ldr	r2, [r6, #8]
 800b752:	4449      	add	r1, r9
 800b754:	f041 0101 	orr.w	r1, r1, #1
 800b758:	6051      	str	r1, [r2, #4]
 800b75a:	4a2d      	ldr	r2, [pc, #180]	@ (800b810 <_malloc_r+0x300>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6811      	ldr	r1, [r2, #0]
 800b760:	428b      	cmp	r3, r1
 800b762:	bf88      	it	hi
 800b764:	6013      	strhi	r3, [r2, #0]
 800b766:	4a2b      	ldr	r2, [pc, #172]	@ (800b814 <_malloc_r+0x304>)
 800b768:	6811      	ldr	r1, [r2, #0]
 800b76a:	428b      	cmp	r3, r1
 800b76c:	bf88      	it	hi
 800b76e:	6013      	strhi	r3, [r2, #0]
 800b770:	e0cf      	b.n	800b912 <_malloc_r+0x402>
 800b772:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800b776:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800b77a:	d218      	bcs.n	800b7ae <_malloc_r+0x29e>
 800b77c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800b780:	3238      	adds	r2, #56	@ 0x38
 800b782:	f102 0e01 	add.w	lr, r2, #1
 800b786:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800b78a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800b78e:	45f0      	cmp	r8, lr
 800b790:	d12b      	bne.n	800b7ea <_malloc_r+0x2da>
 800b792:	1092      	asrs	r2, r2, #2
 800b794:	f04f 0c01 	mov.w	ip, #1
 800b798:	fa0c f202 	lsl.w	r2, ip, r2
 800b79c:	4302      	orrs	r2, r0
 800b79e:	6072      	str	r2, [r6, #4]
 800b7a0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800b7a4:	f8c8 4008 	str.w	r4, [r8, #8]
 800b7a8:	f8ce 400c 	str.w	r4, [lr, #12]
 800b7ac:	e763      	b.n	800b676 <_malloc_r+0x166>
 800b7ae:	2a14      	cmp	r2, #20
 800b7b0:	d801      	bhi.n	800b7b6 <_malloc_r+0x2a6>
 800b7b2:	325b      	adds	r2, #91	@ 0x5b
 800b7b4:	e7e5      	b.n	800b782 <_malloc_r+0x272>
 800b7b6:	2a54      	cmp	r2, #84	@ 0x54
 800b7b8:	d803      	bhi.n	800b7c2 <_malloc_r+0x2b2>
 800b7ba:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800b7be:	326e      	adds	r2, #110	@ 0x6e
 800b7c0:	e7df      	b.n	800b782 <_malloc_r+0x272>
 800b7c2:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800b7c6:	d803      	bhi.n	800b7d0 <_malloc_r+0x2c0>
 800b7c8:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800b7cc:	3277      	adds	r2, #119	@ 0x77
 800b7ce:	e7d8      	b.n	800b782 <_malloc_r+0x272>
 800b7d0:	f240 5e54 	movw	lr, #1364	@ 0x554
 800b7d4:	4572      	cmp	r2, lr
 800b7d6:	bf9a      	itte	ls
 800b7d8:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800b7dc:	327c      	addls	r2, #124	@ 0x7c
 800b7de:	227e      	movhi	r2, #126	@ 0x7e
 800b7e0:	e7cf      	b.n	800b782 <_malloc_r+0x272>
 800b7e2:	f8de e008 	ldr.w	lr, [lr, #8]
 800b7e6:	45f0      	cmp	r8, lr
 800b7e8:	d005      	beq.n	800b7f6 <_malloc_r+0x2e6>
 800b7ea:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b7ee:	f022 0203 	bic.w	r2, r2, #3
 800b7f2:	4562      	cmp	r2, ip
 800b7f4:	d8f5      	bhi.n	800b7e2 <_malloc_r+0x2d2>
 800b7f6:	f8de 800c 	ldr.w	r8, [lr, #12]
 800b7fa:	e7d1      	b.n	800b7a0 <_malloc_r+0x290>
 800b7fc:	2000023c 	.word	0x2000023c
 800b800:	20000244 	.word	0x20000244
 800b804:	200026e4 	.word	0x200026e4
 800b808:	20000234 	.word	0x20000234
 800b80c:	200026b4 	.word	0x200026b4
 800b810:	200026e0 	.word	0x200026e0
 800b814:	200026dc 	.word	0x200026dc
 800b818:	6860      	ldr	r0, [r4, #4]
 800b81a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b81e:	f020 0003 	bic.w	r0, r0, #3
 800b822:	eba0 0a07 	sub.w	sl, r0, r7
 800b826:	f1ba 0f0f 	cmp.w	sl, #15
 800b82a:	dd12      	ble.n	800b852 <_malloc_r+0x342>
 800b82c:	68a3      	ldr	r3, [r4, #8]
 800b82e:	19e2      	adds	r2, r4, r7
 800b830:	f047 0701 	orr.w	r7, r7, #1
 800b834:	6067      	str	r7, [r4, #4]
 800b836:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b83a:	f8cc 3008 	str.w	r3, [ip, #8]
 800b83e:	f04a 0301 	orr.w	r3, sl, #1
 800b842:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800b846:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800b84a:	6053      	str	r3, [r2, #4]
 800b84c:	f844 a000 	str.w	sl, [r4, r0]
 800b850:	e68f      	b.n	800b572 <_malloc_r+0x62>
 800b852:	f1ba 0f00 	cmp.w	sl, #0
 800b856:	db11      	blt.n	800b87c <_malloc_r+0x36c>
 800b858:	4420      	add	r0, r4
 800b85a:	6843      	ldr	r3, [r0, #4]
 800b85c:	f043 0301 	orr.w	r3, r3, #1
 800b860:	6043      	str	r3, [r0, #4]
 800b862:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800b866:	4628      	mov	r0, r5
 800b868:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b86c:	f8cc 3008 	str.w	r3, [ip, #8]
 800b870:	f000 f88e 	bl	800b990 <__malloc_unlock>
 800b874:	4620      	mov	r0, r4
 800b876:	b003      	add	sp, #12
 800b878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	4664      	mov	r4, ip
 800b87e:	e70f      	b.n	800b6a0 <_malloc_r+0x190>
 800b880:	f858 0908 	ldr.w	r0, [r8], #-8
 800b884:	4540      	cmp	r0, r8
 800b886:	f103 33ff 	add.w	r3, r3, #4294967295
 800b88a:	f43f af13 	beq.w	800b6b4 <_malloc_r+0x1a4>
 800b88e:	e718      	b.n	800b6c2 <_malloc_r+0x1b2>
 800b890:	3304      	adds	r3, #4
 800b892:	0052      	lsls	r2, r2, #1
 800b894:	4210      	tst	r0, r2
 800b896:	d0fb      	beq.n	800b890 <_malloc_r+0x380>
 800b898:	e6fc      	b.n	800b694 <_malloc_r+0x184>
 800b89a:	4673      	mov	r3, lr
 800b89c:	e7fa      	b.n	800b894 <_malloc_r+0x384>
 800b89e:	6810      	ldr	r0, [r2, #0]
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	bf1b      	ittet	ne
 800b8a4:	eba4 0b0b 	subne.w	fp, r4, fp
 800b8a8:	eb0b 020e 	addne.w	r2, fp, lr
 800b8ac:	6014      	streq	r4, [r2, #0]
 800b8ae:	601a      	strne	r2, [r3, #0]
 800b8b0:	f014 0b07 	ands.w	fp, r4, #7
 800b8b4:	bf1a      	itte	ne
 800b8b6:	f1cb 0008 	rsbne	r0, fp, #8
 800b8ba:	1824      	addne	r4, r4, r0
 800b8bc:	4658      	moveq	r0, fp
 800b8be:	1862      	adds	r2, r4, r1
 800b8c0:	ea02 010c 	and.w	r1, r2, ip
 800b8c4:	4480      	add	r8, r0
 800b8c6:	eba8 0801 	sub.w	r8, r8, r1
 800b8ca:	ea08 080c 	and.w	r8, r8, ip
 800b8ce:	4641      	mov	r1, r8
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	9201      	str	r2, [sp, #4]
 800b8d4:	f001 fb5c 	bl	800cf90 <_sbrk_r>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	9a01      	ldr	r2, [sp, #4]
 800b8dc:	4b28      	ldr	r3, [pc, #160]	@ (800b980 <_malloc_r+0x470>)
 800b8de:	d107      	bne.n	800b8f0 <_malloc_r+0x3e0>
 800b8e0:	f1bb 0f00 	cmp.w	fp, #0
 800b8e4:	d023      	beq.n	800b92e <_malloc_r+0x41e>
 800b8e6:	f1ab 0008 	sub.w	r0, fp, #8
 800b8ea:	4410      	add	r0, r2
 800b8ec:	f04f 0800 	mov.w	r8, #0
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	60b4      	str	r4, [r6, #8]
 800b8f4:	1b00      	subs	r0, r0, r4
 800b8f6:	4440      	add	r0, r8
 800b8f8:	4442      	add	r2, r8
 800b8fa:	f040 0001 	orr.w	r0, r0, #1
 800b8fe:	45b2      	cmp	sl, r6
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	6060      	str	r0, [r4, #4]
 800b904:	f43f af29 	beq.w	800b75a <_malloc_r+0x24a>
 800b908:	f1b9 0f0f 	cmp.w	r9, #15
 800b90c:	d812      	bhi.n	800b934 <_malloc_r+0x424>
 800b90e:	2301      	movs	r3, #1
 800b910:	6063      	str	r3, [r4, #4]
 800b912:	68b3      	ldr	r3, [r6, #8]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f023 0303 	bic.w	r3, r3, #3
 800b91a:	42bb      	cmp	r3, r7
 800b91c:	eba3 0207 	sub.w	r2, r3, r7
 800b920:	d301      	bcc.n	800b926 <_malloc_r+0x416>
 800b922:	2a0f      	cmp	r2, #15
 800b924:	dc22      	bgt.n	800b96c <_malloc_r+0x45c>
 800b926:	4628      	mov	r0, r5
 800b928:	f000 f832 	bl	800b990 <__malloc_unlock>
 800b92c:	e5fc      	b.n	800b528 <_malloc_r+0x18>
 800b92e:	4610      	mov	r0, r2
 800b930:	46d8      	mov	r8, fp
 800b932:	e7dd      	b.n	800b8f0 <_malloc_r+0x3e0>
 800b934:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b938:	f1a9 090c 	sub.w	r9, r9, #12
 800b93c:	f029 0907 	bic.w	r9, r9, #7
 800b940:	f002 0201 	and.w	r2, r2, #1
 800b944:	ea42 0209 	orr.w	r2, r2, r9
 800b948:	f8ca 2004 	str.w	r2, [sl, #4]
 800b94c:	2105      	movs	r1, #5
 800b94e:	eb0a 0209 	add.w	r2, sl, r9
 800b952:	f1b9 0f0f 	cmp.w	r9, #15
 800b956:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800b95a:	f67f aefe 	bls.w	800b75a <_malloc_r+0x24a>
 800b95e:	f10a 0108 	add.w	r1, sl, #8
 800b962:	4628      	mov	r0, r5
 800b964:	f7ff fd14 	bl	800b390 <_free_r>
 800b968:	4b05      	ldr	r3, [pc, #20]	@ (800b980 <_malloc_r+0x470>)
 800b96a:	e6f6      	b.n	800b75a <_malloc_r+0x24a>
 800b96c:	68b4      	ldr	r4, [r6, #8]
 800b96e:	f047 0301 	orr.w	r3, r7, #1
 800b972:	4427      	add	r7, r4
 800b974:	f042 0201 	orr.w	r2, r2, #1
 800b978:	6063      	str	r3, [r4, #4]
 800b97a:	60b7      	str	r7, [r6, #8]
 800b97c:	607a      	str	r2, [r7, #4]
 800b97e:	e5f8      	b.n	800b572 <_malloc_r+0x62>
 800b980:	200026b4 	.word	0x200026b4

0800b984 <__malloc_lock>:
 800b984:	4801      	ldr	r0, [pc, #4]	@ (800b98c <__malloc_lock+0x8>)
 800b986:	f7ff bc9b 	b.w	800b2c0 <__retarget_lock_acquire_recursive>
 800b98a:	bf00      	nop
 800b98c:	200026ac 	.word	0x200026ac

0800b990 <__malloc_unlock>:
 800b990:	4801      	ldr	r0, [pc, #4]	@ (800b998 <__malloc_unlock+0x8>)
 800b992:	f7ff bc96 	b.w	800b2c2 <__retarget_lock_release_recursive>
 800b996:	bf00      	nop
 800b998:	200026ac 	.word	0x200026ac
 800b99c:	00000000 	.word	0x00000000

0800b9a0 <_svfprintf_r>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	b0d3      	sub	sp, #332	@ 0x14c
 800b9a6:	468b      	mov	fp, r1
 800b9a8:	4691      	mov	r9, r2
 800b9aa:	461e      	mov	r6, r3
 800b9ac:	9003      	str	r0, [sp, #12]
 800b9ae:	f001 faeb 	bl	800cf88 <_localeconv_r>
 800b9b2:	6803      	ldr	r3, [r0, #0]
 800b9b4:	9316      	str	r3, [sp, #88]	@ 0x58
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f4 fc0a 	bl	80001d0 <strlen>
 800b9bc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b9c0:	900d      	str	r0, [sp, #52]	@ 0x34
 800b9c2:	061b      	lsls	r3, r3, #24
 800b9c4:	d515      	bpl.n	800b9f2 <_svfprintf_r+0x52>
 800b9c6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b9ca:	b993      	cbnz	r3, 800b9f2 <_svfprintf_r+0x52>
 800b9cc:	9803      	ldr	r0, [sp, #12]
 800b9ce:	2140      	movs	r1, #64	@ 0x40
 800b9d0:	f7ff fd9e 	bl	800b510 <_malloc_r>
 800b9d4:	f8cb 0000 	str.w	r0, [fp]
 800b9d8:	f8cb 0010 	str.w	r0, [fp, #16]
 800b9dc:	b930      	cbnz	r0, 800b9ec <_svfprintf_r+0x4c>
 800b9de:	9a03      	ldr	r2, [sp, #12]
 800b9e0:	230c      	movs	r3, #12
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9ea:	e1f7      	b.n	800bddc <_svfprintf_r+0x43c>
 800b9ec:	2340      	movs	r3, #64	@ 0x40
 800b9ee:	f8cb 3014 	str.w	r3, [fp, #20]
 800b9f2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 800bc40 <_svfprintf_r+0x2a0>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800b9fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ba00:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800ba04:	ac29      	add	r4, sp, #164	@ 0xa4
 800ba06:	9426      	str	r4, [sp, #152]	@ 0x98
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba0c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba0e:	9317      	str	r3, [sp, #92]	@ 0x5c
 800ba10:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba12:	464b      	mov	r3, r9
 800ba14:	461d      	mov	r5, r3
 800ba16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba1a:	b10a      	cbz	r2, 800ba20 <_svfprintf_r+0x80>
 800ba1c:	2a25      	cmp	r2, #37	@ 0x25
 800ba1e:	d1f9      	bne.n	800ba14 <_svfprintf_r+0x74>
 800ba20:	ebb5 0709 	subs.w	r7, r5, r9
 800ba24:	d00d      	beq.n	800ba42 <_svfprintf_r+0xa2>
 800ba26:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ba28:	443b      	add	r3, r7
 800ba2a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ba2c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ba2e:	3301      	adds	r3, #1
 800ba30:	2b07      	cmp	r3, #7
 800ba32:	e9c4 9700 	strd	r9, r7, [r4]
 800ba36:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ba38:	dc75      	bgt.n	800bb26 <_svfprintf_r+0x186>
 800ba3a:	3408      	adds	r4, #8
 800ba3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba3e:	443b      	add	r3, r7
 800ba40:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba42:	782b      	ldrb	r3, [r5, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f001 8148 	beq.w	800ccda <_svfprintf_r+0x133a>
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	1c6b      	adds	r3, r5, #1
 800ba4e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800ba52:	f04f 38ff 	mov.w	r8, #4294967295
 800ba56:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba58:	4615      	mov	r5, r2
 800ba5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5e:	9206      	str	r2, [sp, #24]
 800ba60:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba62:	9b06      	ldr	r3, [sp, #24]
 800ba64:	3b20      	subs	r3, #32
 800ba66:	2b5a      	cmp	r3, #90	@ 0x5a
 800ba68:	f200 85a4 	bhi.w	800c5b4 <_svfprintf_r+0xc14>
 800ba6c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ba70:	05a2009d 	.word	0x05a2009d
 800ba74:	00a505a2 	.word	0x00a505a2
 800ba78:	05a205a2 	.word	0x05a205a2
 800ba7c:	008505a2 	.word	0x008505a2
 800ba80:	05a205a2 	.word	0x05a205a2
 800ba84:	00b200a8 	.word	0x00b200a8
 800ba88:	00af05a2 	.word	0x00af05a2
 800ba8c:	05a200b4 	.word	0x05a200b4
 800ba90:	00d100ce 	.word	0x00d100ce
 800ba94:	00d100d1 	.word	0x00d100d1
 800ba98:	00d100d1 	.word	0x00d100d1
 800ba9c:	00d100d1 	.word	0x00d100d1
 800baa0:	00d100d1 	.word	0x00d100d1
 800baa4:	05a205a2 	.word	0x05a205a2
 800baa8:	05a205a2 	.word	0x05a205a2
 800baac:	05a205a2 	.word	0x05a205a2
 800bab0:	014705a2 	.word	0x014705a2
 800bab4:	010805a2 	.word	0x010805a2
 800bab8:	0147011b 	.word	0x0147011b
 800babc:	01470147 	.word	0x01470147
 800bac0:	05a205a2 	.word	0x05a205a2
 800bac4:	05a205a2 	.word	0x05a205a2
 800bac8:	05a200e2 	.word	0x05a200e2
 800bacc:	049d05a2 	.word	0x049d05a2
 800bad0:	05a205a2 	.word	0x05a205a2
 800bad4:	04e705a2 	.word	0x04e705a2
 800bad8:	050805a2 	.word	0x050805a2
 800badc:	05a205a2 	.word	0x05a205a2
 800bae0:	05a2052a 	.word	0x05a2052a
 800bae4:	05a205a2 	.word	0x05a205a2
 800bae8:	05a205a2 	.word	0x05a205a2
 800baec:	05a205a2 	.word	0x05a205a2
 800baf0:	014705a2 	.word	0x014705a2
 800baf4:	010805a2 	.word	0x010805a2
 800baf8:	0147011d 	.word	0x0147011d
 800bafc:	01470147 	.word	0x01470147
 800bb00:	011d00ee 	.word	0x011d00ee
 800bb04:	05a20102 	.word	0x05a20102
 800bb08:	05a200fb 	.word	0x05a200fb
 800bb0c:	049f047e 	.word	0x049f047e
 800bb10:	010204d6 	.word	0x010204d6
 800bb14:	04e705a2 	.word	0x04e705a2
 800bb18:	050a009b 	.word	0x050a009b
 800bb1c:	05a205a2 	.word	0x05a205a2
 800bb20:	05a20065 	.word	0x05a20065
 800bb24:	009b      	.short	0x009b
 800bb26:	9803      	ldr	r0, [sp, #12]
 800bb28:	aa26      	add	r2, sp, #152	@ 0x98
 800bb2a:	4659      	mov	r1, fp
 800bb2c:	f002 fc40 	bl	800e3b0 <__ssprint_r>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	f040 814e 	bne.w	800bdd2 <_svfprintf_r+0x432>
 800bb36:	ac29      	add	r4, sp, #164	@ 0xa4
 800bb38:	e780      	b.n	800ba3c <_svfprintf_r+0x9c>
 800bb3a:	4b43      	ldr	r3, [pc, #268]	@ (800bc48 <_svfprintf_r+0x2a8>)
 800bb3c:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb3e:	f015 0320 	ands.w	r3, r5, #32
 800bb42:	f000 84c2 	beq.w	800c4ca <_svfprintf_r+0xb2a>
 800bb46:	3607      	adds	r6, #7
 800bb48:	f026 0307 	bic.w	r3, r6, #7
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	685f      	ldr	r7, [r3, #4]
 800bb50:	f852 6b08 	ldr.w	r6, [r2], #8
 800bb54:	9207      	str	r2, [sp, #28]
 800bb56:	07eb      	lsls	r3, r5, #31
 800bb58:	d50a      	bpl.n	800bb70 <_svfprintf_r+0x1d0>
 800bb5a:	ea56 0307 	orrs.w	r3, r6, r7
 800bb5e:	d007      	beq.n	800bb70 <_svfprintf_r+0x1d0>
 800bb60:	2330      	movs	r3, #48	@ 0x30
 800bb62:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800bb66:	9b06      	ldr	r3, [sp, #24]
 800bb68:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800bb6c:	f045 0502 	orr.w	r5, r5, #2
 800bb70:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800bb74:	2302      	movs	r3, #2
 800bb76:	f000 bc28 	b.w	800c3ca <_svfprintf_r+0xa2a>
 800bb7a:	9803      	ldr	r0, [sp, #12]
 800bb7c:	f001 fa04 	bl	800cf88 <_localeconv_r>
 800bb80:	6843      	ldr	r3, [r0, #4]
 800bb82:	9317      	str	r3, [sp, #92]	@ 0x5c
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7f4 fb23 	bl	80001d0 <strlen>
 800bb8a:	9012      	str	r0, [sp, #72]	@ 0x48
 800bb8c:	9803      	ldr	r0, [sp, #12]
 800bb8e:	f001 f9fb 	bl	800cf88 <_localeconv_r>
 800bb92:	6883      	ldr	r3, [r0, #8]
 800bb94:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb98:	b12b      	cbz	r3, 800bba6 <_svfprintf_r+0x206>
 800bb9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb9c:	b11b      	cbz	r3, 800bba6 <_svfprintf_r+0x206>
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	b10b      	cbz	r3, 800bba6 <_svfprintf_r+0x206>
 800bba2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800bba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bba8:	e757      	b.n	800ba5a <_svfprintf_r+0xba>
 800bbaa:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1f9      	bne.n	800bba6 <_svfprintf_r+0x206>
 800bbb2:	2320      	movs	r3, #32
 800bbb4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800bbb8:	e7f5      	b.n	800bba6 <_svfprintf_r+0x206>
 800bbba:	f045 0501 	orr.w	r5, r5, #1
 800bbbe:	e7f2      	b.n	800bba6 <_svfprintf_r+0x206>
 800bbc0:	f856 3b04 	ldr.w	r3, [r6], #4
 800bbc4:	930e      	str	r3, [sp, #56]	@ 0x38
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	daed      	bge.n	800bba6 <_svfprintf_r+0x206>
 800bbca:	425b      	negs	r3, r3
 800bbcc:	930e      	str	r3, [sp, #56]	@ 0x38
 800bbce:	f045 0504 	orr.w	r5, r5, #4
 800bbd2:	e7e8      	b.n	800bba6 <_svfprintf_r+0x206>
 800bbd4:	232b      	movs	r3, #43	@ 0x2b
 800bbd6:	e7ed      	b.n	800bbb4 <_svfprintf_r+0x214>
 800bbd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbde:	9206      	str	r2, [sp, #24]
 800bbe0:	2a2a      	cmp	r2, #42	@ 0x2a
 800bbe2:	d10f      	bne.n	800bc04 <_svfprintf_r+0x264>
 800bbe4:	f856 2b04 	ldr.w	r2, [r6], #4
 800bbe8:	930c      	str	r3, [sp, #48]	@ 0x30
 800bbea:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800bbee:	e7da      	b.n	800bba6 <_svfprintf_r+0x206>
 800bbf0:	fb01 2808 	mla	r8, r1, r8, r2
 800bbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf8:	9206      	str	r2, [sp, #24]
 800bbfa:	9a06      	ldr	r2, [sp, #24]
 800bbfc:	3a30      	subs	r2, #48	@ 0x30
 800bbfe:	2a09      	cmp	r2, #9
 800bc00:	d9f6      	bls.n	800bbf0 <_svfprintf_r+0x250>
 800bc02:	e72d      	b.n	800ba60 <_svfprintf_r+0xc0>
 800bc04:	f04f 0800 	mov.w	r8, #0
 800bc08:	210a      	movs	r1, #10
 800bc0a:	e7f6      	b.n	800bbfa <_svfprintf_r+0x25a>
 800bc0c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800bc10:	e7c9      	b.n	800bba6 <_svfprintf_r+0x206>
 800bc12:	2200      	movs	r2, #0
 800bc14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc16:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc18:	210a      	movs	r1, #10
 800bc1a:	9a06      	ldr	r2, [sp, #24]
 800bc1c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800bc1e:	3a30      	subs	r2, #48	@ 0x30
 800bc20:	fb01 2200 	mla	r2, r1, r0, r2
 800bc24:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc2a:	9206      	str	r2, [sp, #24]
 800bc2c:	3a30      	subs	r2, #48	@ 0x30
 800bc2e:	2a09      	cmp	r2, #9
 800bc30:	d9f3      	bls.n	800bc1a <_svfprintf_r+0x27a>
 800bc32:	e715      	b.n	800ba60 <_svfprintf_r+0xc0>
 800bc34:	f045 0508 	orr.w	r5, r5, #8
 800bc38:	e7b5      	b.n	800bba6 <_svfprintf_r+0x206>
 800bc3a:	bf00      	nop
 800bc3c:	f3af 8000 	nop.w
	...
 800bc48:	0800fa70 	.word	0x0800fa70
 800bc4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	2b68      	cmp	r3, #104	@ 0x68
 800bc52:	bf01      	itttt	eq
 800bc54:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800bc56:	3301      	addeq	r3, #1
 800bc58:	930c      	streq	r3, [sp, #48]	@ 0x30
 800bc5a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800bc5e:	bf18      	it	ne
 800bc60:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800bc64:	e79f      	b.n	800bba6 <_svfprintf_r+0x206>
 800bc66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	2b6c      	cmp	r3, #108	@ 0x6c
 800bc6c:	d105      	bne.n	800bc7a <_svfprintf_r+0x2da>
 800bc6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc70:	3301      	adds	r3, #1
 800bc72:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc74:	f045 0520 	orr.w	r5, r5, #32
 800bc78:	e795      	b.n	800bba6 <_svfprintf_r+0x206>
 800bc7a:	f045 0510 	orr.w	r5, r5, #16
 800bc7e:	e792      	b.n	800bba6 <_svfprintf_r+0x206>
 800bc80:	4632      	mov	r2, r6
 800bc82:	f852 3b04 	ldr.w	r3, [r2], #4
 800bc86:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9207      	str	r2, [sp, #28]
 800bc8e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800bc92:	469a      	mov	sl, r3
 800bc94:	f04f 0801 	mov.w	r8, #1
 800bc98:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc9a:	461f      	mov	r7, r3
 800bc9c:	9308      	str	r3, [sp, #32]
 800bc9e:	461e      	mov	r6, r3
 800bca0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800bca4:	e1d2      	b.n	800c04c <_svfprintf_r+0x6ac>
 800bca6:	f045 0510 	orr.w	r5, r5, #16
 800bcaa:	06af      	lsls	r7, r5, #26
 800bcac:	d512      	bpl.n	800bcd4 <_svfprintf_r+0x334>
 800bcae:	3607      	adds	r6, #7
 800bcb0:	f026 0307 	bic.w	r3, r6, #7
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	685f      	ldr	r7, [r3, #4]
 800bcb8:	f852 6b08 	ldr.w	r6, [r2], #8
 800bcbc:	9207      	str	r2, [sp, #28]
 800bcbe:	2f00      	cmp	r7, #0
 800bcc0:	da06      	bge.n	800bcd0 <_svfprintf_r+0x330>
 800bcc2:	4276      	negs	r6, r6
 800bcc4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800bcc8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800bccc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e37d      	b.n	800c3d0 <_svfprintf_r+0xa30>
 800bcd4:	4633      	mov	r3, r6
 800bcd6:	06ee      	lsls	r6, r5, #27
 800bcd8:	f853 7b04 	ldr.w	r7, [r3], #4
 800bcdc:	9307      	str	r3, [sp, #28]
 800bcde:	d502      	bpl.n	800bce6 <_svfprintf_r+0x346>
 800bce0:	463e      	mov	r6, r7
 800bce2:	17ff      	asrs	r7, r7, #31
 800bce4:	e7eb      	b.n	800bcbe <_svfprintf_r+0x31e>
 800bce6:	0668      	lsls	r0, r5, #25
 800bce8:	d503      	bpl.n	800bcf2 <_svfprintf_r+0x352>
 800bcea:	b23e      	sxth	r6, r7
 800bcec:	f347 37c0 	sbfx	r7, r7, #15, #1
 800bcf0:	e7e5      	b.n	800bcbe <_svfprintf_r+0x31e>
 800bcf2:	05a9      	lsls	r1, r5, #22
 800bcf4:	d5f4      	bpl.n	800bce0 <_svfprintf_r+0x340>
 800bcf6:	b27e      	sxtb	r6, r7
 800bcf8:	f347 17c0 	sbfx	r7, r7, #7, #1
 800bcfc:	e7df      	b.n	800bcbe <_svfprintf_r+0x31e>
 800bcfe:	3607      	adds	r6, #7
 800bd00:	f026 0307 	bic.w	r3, r6, #7
 800bd04:	ecb3 7b02 	vldmia	r3!, {d7}
 800bd08:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bd0c:	9307      	str	r3, [sp, #28]
 800bd0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd10:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd18:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bd1a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800bd1e:	4b81      	ldr	r3, [pc, #516]	@ (800bf24 <_svfprintf_r+0x584>)
 800bd20:	f04f 32ff 	mov.w	r2, #4294967295
 800bd24:	f7f4 ff02 	bl	8000b2c <__aeabi_dcmpun>
 800bd28:	bb10      	cbnz	r0, 800bd70 <_svfprintf_r+0x3d0>
 800bd2a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800bd2e:	4b7d      	ldr	r3, [pc, #500]	@ (800bf24 <_svfprintf_r+0x584>)
 800bd30:	f04f 32ff 	mov.w	r2, #4294967295
 800bd34:	f7f4 fedc 	bl	8000af0 <__aeabi_dcmple>
 800bd38:	b9d0      	cbnz	r0, 800bd70 <_svfprintf_r+0x3d0>
 800bd3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd3e:	2200      	movs	r2, #0
 800bd40:	2300      	movs	r3, #0
 800bd42:	f7f4 fecb 	bl	8000adc <__aeabi_dcmplt>
 800bd46:	b110      	cbz	r0, 800bd4e <_svfprintf_r+0x3ae>
 800bd48:	232d      	movs	r3, #45	@ 0x2d
 800bd4a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800bd4e:	4a76      	ldr	r2, [pc, #472]	@ (800bf28 <_svfprintf_r+0x588>)
 800bd50:	4b76      	ldr	r3, [pc, #472]	@ (800bf2c <_svfprintf_r+0x58c>)
 800bd52:	9906      	ldr	r1, [sp, #24]
 800bd54:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800bd58:	2947      	cmp	r1, #71	@ 0x47
 800bd5a:	bfd4      	ite	le
 800bd5c:	4691      	movle	r9, r2
 800bd5e:	4699      	movgt	r9, r3
 800bd60:	f04f 0a00 	mov.w	sl, #0
 800bd64:	f04f 0803 	mov.w	r8, #3
 800bd68:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800bd6c:	f000 bfec 	b.w	800cd48 <_svfprintf_r+0x13a8>
 800bd70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800bd74:	4610      	mov	r0, r2
 800bd76:	4619      	mov	r1, r3
 800bd78:	f7f4 fed8 	bl	8000b2c <__aeabi_dcmpun>
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	b140      	cbz	r0, 800bd92 <_svfprintf_r+0x3f2>
 800bd80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd82:	4a6b      	ldr	r2, [pc, #428]	@ (800bf30 <_svfprintf_r+0x590>)
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bfbc      	itt	lt
 800bd88:	232d      	movlt	r3, #45	@ 0x2d
 800bd8a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800bd8e:	4b69      	ldr	r3, [pc, #420]	@ (800bf34 <_svfprintf_r+0x594>)
 800bd90:	e7df      	b.n	800bd52 <_svfprintf_r+0x3b2>
 800bd92:	9b06      	ldr	r3, [sp, #24]
 800bd94:	2b61      	cmp	r3, #97	@ 0x61
 800bd96:	d025      	beq.n	800bde4 <_svfprintf_r+0x444>
 800bd98:	2b41      	cmp	r3, #65	@ 0x41
 800bd9a:	d125      	bne.n	800bde8 <_svfprintf_r+0x448>
 800bd9c:	2358      	movs	r3, #88	@ 0x58
 800bd9e:	2230      	movs	r2, #48	@ 0x30
 800bda0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800bda4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800bda8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800bdac:	f045 0502 	orr.w	r5, r5, #2
 800bdb0:	f340 80a5 	ble.w	800befe <_svfprintf_r+0x55e>
 800bdb4:	9803      	ldr	r0, [sp, #12]
 800bdb6:	f108 0101 	add.w	r1, r8, #1
 800bdba:	f7ff fba9 	bl	800b510 <_malloc_r>
 800bdbe:	4681      	mov	r9, r0
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	f040 80a1 	bne.w	800bf08 <_svfprintf_r+0x568>
 800bdc6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800bdca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdce:	f8ab 300c 	strh.w	r3, [fp, #12]
 800bdd2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800bdd6:	065b      	lsls	r3, r3, #25
 800bdd8:	f53f ae04 	bmi.w	800b9e4 <_svfprintf_r+0x44>
 800bddc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800bdde:	b053      	add	sp, #332	@ 0x14c
 800bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde4:	2378      	movs	r3, #120	@ 0x78
 800bde6:	e7da      	b.n	800bd9e <_svfprintf_r+0x3fe>
 800bde8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bdec:	f000 808e 	beq.w	800bf0c <_svfprintf_r+0x56c>
 800bdf0:	9b06      	ldr	r3, [sp, #24]
 800bdf2:	f023 0320 	bic.w	r3, r3, #32
 800bdf6:	2b47      	cmp	r3, #71	@ 0x47
 800bdf8:	d105      	bne.n	800be06 <_svfprintf_r+0x466>
 800bdfa:	f1b8 0f00 	cmp.w	r8, #0
 800bdfe:	d102      	bne.n	800be06 <_svfprintf_r+0x466>
 800be00:	46c2      	mov	sl, r8
 800be02:	f04f 0801 	mov.w	r8, #1
 800be06:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800be0a:	9311      	str	r3, [sp, #68]	@ 0x44
 800be0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da7f      	bge.n	800bf12 <_svfprintf_r+0x572>
 800be12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be14:	9314      	str	r3, [sp, #80]	@ 0x50
 800be16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be18:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800be1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800be1e:	232d      	movs	r3, #45	@ 0x2d
 800be20:	931c      	str	r3, [sp, #112]	@ 0x70
 800be22:	9b06      	ldr	r3, [sp, #24]
 800be24:	f023 0320 	bic.w	r3, r3, #32
 800be28:	2b41      	cmp	r3, #65	@ 0x41
 800be2a:	9308      	str	r3, [sp, #32]
 800be2c:	f040 81e6 	bne.w	800c1fc <_svfprintf_r+0x85c>
 800be30:	a820      	add	r0, sp, #128	@ 0x80
 800be32:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800be36:	f001 f8db 	bl	800cff0 <frexp>
 800be3a:	2200      	movs	r2, #0
 800be3c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800be40:	ec51 0b10 	vmov	r0, r1, d0
 800be44:	f7f4 fbd8 	bl	80005f8 <__aeabi_dmul>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be50:	2200      	movs	r2, #0
 800be52:	2300      	movs	r3, #0
 800be54:	f7f4 fe38 	bl	8000ac8 <__aeabi_dcmpeq>
 800be58:	b108      	cbz	r0, 800be5e <_svfprintf_r+0x4be>
 800be5a:	2301      	movs	r3, #1
 800be5c:	9320      	str	r3, [sp, #128]	@ 0x80
 800be5e:	4a36      	ldr	r2, [pc, #216]	@ (800bf38 <_svfprintf_r+0x598>)
 800be60:	4b36      	ldr	r3, [pc, #216]	@ (800bf3c <_svfprintf_r+0x59c>)
 800be62:	9906      	ldr	r1, [sp, #24]
 800be64:	2961      	cmp	r1, #97	@ 0x61
 800be66:	bf18      	it	ne
 800be68:	461a      	movne	r2, r3
 800be6a:	9210      	str	r2, [sp, #64]	@ 0x40
 800be6c:	f108 37ff 	add.w	r7, r8, #4294967295
 800be70:	464e      	mov	r6, r9
 800be72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be76:	4b32      	ldr	r3, [pc, #200]	@ (800bf40 <_svfprintf_r+0x5a0>)
 800be78:	2200      	movs	r2, #0
 800be7a:	f7f4 fbbd 	bl	80005f8 <__aeabi_dmul>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be86:	f7f4 fe67 	bl	8000b58 <__aeabi_d2iz>
 800be8a:	9013      	str	r0, [sp, #76]	@ 0x4c
 800be8c:	f7f4 fb4a 	bl	8000524 <__aeabi_i2d>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be98:	f7f4 f9f6 	bl	8000288 <__aeabi_dsub>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bea4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bea6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bea8:	5c9b      	ldrb	r3, [r3, r2]
 800beaa:	f806 3b01 	strb.w	r3, [r6], #1
 800beae:	1c7a      	adds	r2, r7, #1
 800beb0:	d006      	beq.n	800bec0 <_svfprintf_r+0x520>
 800beb2:	1e7b      	subs	r3, r7, #1
 800beb4:	931d      	str	r3, [sp, #116]	@ 0x74
 800beb6:	2200      	movs	r2, #0
 800beb8:	2300      	movs	r3, #0
 800beba:	f7f4 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 800bebe:	b370      	cbz	r0, 800bf1e <_svfprintf_r+0x57e>
 800bec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bec4:	4b1f      	ldr	r3, [pc, #124]	@ (800bf44 <_svfprintf_r+0x5a4>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	f7f4 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 800becc:	2800      	cmp	r0, #0
 800bece:	d13b      	bne.n	800bf48 <_svfprintf_r+0x5a8>
 800bed0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bed4:	4b1b      	ldr	r3, [pc, #108]	@ (800bf44 <_svfprintf_r+0x5a4>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	f7f4 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bedc:	b110      	cbz	r0, 800bee4 <_svfprintf_r+0x544>
 800bede:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bee0:	07db      	lsls	r3, r3, #31
 800bee2:	d431      	bmi.n	800bf48 <_svfprintf_r+0x5a8>
 800bee4:	4633      	mov	r3, r6
 800bee6:	19f1      	adds	r1, r6, r7
 800bee8:	2030      	movs	r0, #48	@ 0x30
 800beea:	1aca      	subs	r2, r1, r3
 800beec:	2a00      	cmp	r2, #0
 800beee:	f280 8182 	bge.w	800c1f6 <_svfprintf_r+0x856>
 800bef2:	1c7b      	adds	r3, r7, #1
 800bef4:	3701      	adds	r7, #1
 800bef6:	bfb8      	it	lt
 800bef8:	2300      	movlt	r3, #0
 800befa:	441e      	add	r6, r3
 800befc:	e038      	b.n	800bf70 <_svfprintf_r+0x5d0>
 800befe:	f04f 0a00 	mov.w	sl, #0
 800bf02:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800bf06:	e77e      	b.n	800be06 <_svfprintf_r+0x466>
 800bf08:	4682      	mov	sl, r0
 800bf0a:	e77c      	b.n	800be06 <_svfprintf_r+0x466>
 800bf0c:	f04f 0806 	mov.w	r8, #6
 800bf10:	e779      	b.n	800be06 <_svfprintf_r+0x466>
 800bf12:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800bf16:	2300      	movs	r3, #0
 800bf18:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800bf1c:	e780      	b.n	800be20 <_svfprintf_r+0x480>
 800bf1e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800bf20:	e7a7      	b.n	800be72 <_svfprintf_r+0x4d2>
 800bf22:	bf00      	nop
 800bf24:	7fefffff 	.word	0x7fefffff
 800bf28:	0800fa60 	.word	0x0800fa60
 800bf2c:	0800fa64 	.word	0x0800fa64
 800bf30:	0800fa68 	.word	0x0800fa68
 800bf34:	0800fa6c 	.word	0x0800fa6c
 800bf38:	0800fa70 	.word	0x0800fa70
 800bf3c:	0800fa81 	.word	0x0800fa81
 800bf40:	40300000 	.word	0x40300000
 800bf44:	3fe00000 	.word	0x3fe00000
 800bf48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf4a:	9624      	str	r6, [sp, #144]	@ 0x90
 800bf4c:	7bd9      	ldrb	r1, [r3, #15]
 800bf4e:	2030      	movs	r0, #48	@ 0x30
 800bf50:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bf52:	1e53      	subs	r3, r2, #1
 800bf54:	9324      	str	r3, [sp, #144]	@ 0x90
 800bf56:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800bf5a:	428b      	cmp	r3, r1
 800bf5c:	f000 8148 	beq.w	800c1f0 <_svfprintf_r+0x850>
 800bf60:	2b39      	cmp	r3, #57	@ 0x39
 800bf62:	bf0b      	itete	eq
 800bf64:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800bf66:	3301      	addne	r3, #1
 800bf68:	7a9b      	ldrbeq	r3, [r3, #10]
 800bf6a:	b2db      	uxtbne	r3, r3
 800bf6c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bf70:	eba6 0309 	sub.w	r3, r6, r9
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	9b08      	ldr	r3, [sp, #32]
 800bf78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bf7a:	2b47      	cmp	r3, #71	@ 0x47
 800bf7c:	f040 8187 	bne.w	800c28e <_svfprintf_r+0x8ee>
 800bf80:	1cf1      	adds	r1, r6, #3
 800bf82:	db02      	blt.n	800bf8a <_svfprintf_r+0x5ea>
 800bf84:	4546      	cmp	r6, r8
 800bf86:	f340 81a5 	ble.w	800c2d4 <_svfprintf_r+0x934>
 800bf8a:	9b06      	ldr	r3, [sp, #24]
 800bf8c:	3b02      	subs	r3, #2
 800bf8e:	9306      	str	r3, [sp, #24]
 800bf90:	9906      	ldr	r1, [sp, #24]
 800bf92:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800bf96:	f021 0120 	bic.w	r1, r1, #32
 800bf9a:	2941      	cmp	r1, #65	@ 0x41
 800bf9c:	bf08      	it	eq
 800bf9e:	320f      	addeq	r2, #15
 800bfa0:	f106 33ff 	add.w	r3, r6, #4294967295
 800bfa4:	bf06      	itte	eq
 800bfa6:	b2d2      	uxtbeq	r2, r2
 800bfa8:	2101      	moveq	r1, #1
 800bfaa:	2100      	movne	r1, #0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	9320      	str	r3, [sp, #128]	@ 0x80
 800bfb0:	bfb8      	it	lt
 800bfb2:	f1c6 0301 	rsblt	r3, r6, #1
 800bfb6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800bfba:	bfb4      	ite	lt
 800bfbc:	222d      	movlt	r2, #45	@ 0x2d
 800bfbe:	222b      	movge	r2, #43	@ 0x2b
 800bfc0:	2b09      	cmp	r3, #9
 800bfc2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800bfc6:	f340 8178 	ble.w	800c2ba <_svfprintf_r+0x91a>
 800bfca:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800bfce:	270a      	movs	r7, #10
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	fbb3 f6f7 	udiv	r6, r3, r7
 800bfd6:	fb07 3116 	mls	r1, r7, r6, r3
 800bfda:	3130      	adds	r1, #48	@ 0x30
 800bfdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	2963      	cmp	r1, #99	@ 0x63
 800bfe4:	f100 30ff 	add.w	r0, r0, #4294967295
 800bfe8:	4633      	mov	r3, r6
 800bfea:	dcf1      	bgt.n	800bfd0 <_svfprintf_r+0x630>
 800bfec:	3330      	adds	r3, #48	@ 0x30
 800bfee:	1e91      	subs	r1, r2, #2
 800bff0:	f800 3c01 	strb.w	r3, [r0, #-1]
 800bff4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800bff8:	460b      	mov	r3, r1
 800bffa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800bffe:	4283      	cmp	r3, r0
 800c000:	f0c0 8156 	bcc.w	800c2b0 <_svfprintf_r+0x910>
 800c004:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800c008:	1a9b      	subs	r3, r3, r2
 800c00a:	4281      	cmp	r1, r0
 800c00c:	bf88      	it	hi
 800c00e:	2300      	movhi	r3, #0
 800c010:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800c014:	441a      	add	r2, r3
 800c016:	ab22      	add	r3, sp, #136	@ 0x88
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	9a04      	ldr	r2, [sp, #16]
 800c01c:	9318      	str	r3, [sp, #96]	@ 0x60
 800c01e:	2a01      	cmp	r2, #1
 800c020:	eb03 0802 	add.w	r8, r3, r2
 800c024:	dc01      	bgt.n	800c02a <_svfprintf_r+0x68a>
 800c026:	07ea      	lsls	r2, r5, #31
 800c028:	d501      	bpl.n	800c02e <_svfprintf_r+0x68e>
 800c02a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c02c:	4498      	add	r8, r3
 800c02e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800c032:	2700      	movs	r7, #0
 800c034:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800c038:	9311      	str	r3, [sp, #68]	@ 0x44
 800c03a:	9708      	str	r7, [sp, #32]
 800c03c:	463e      	mov	r6, r7
 800c03e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c040:	2b00      	cmp	r3, #0
 800c042:	f040 818f 	bne.w	800c364 <_svfprintf_r+0x9c4>
 800c046:	2300      	movs	r3, #0
 800c048:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c04a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c04c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c04e:	4543      	cmp	r3, r8
 800c050:	bfb8      	it	lt
 800c052:	4643      	movlt	r3, r8
 800c054:	9311      	str	r3, [sp, #68]	@ 0x44
 800c056:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800c05a:	b113      	cbz	r3, 800c062 <_svfprintf_r+0x6c2>
 800c05c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c05e:	3301      	adds	r3, #1
 800c060:	9311      	str	r3, [sp, #68]	@ 0x44
 800c062:	f015 0302 	ands.w	r3, r5, #2
 800c066:	931c      	str	r3, [sp, #112]	@ 0x70
 800c068:	bf1e      	ittt	ne
 800c06a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800c06c:	3302      	addne	r3, #2
 800c06e:	9311      	strne	r3, [sp, #68]	@ 0x44
 800c070:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800c074:	931d      	str	r3, [sp, #116]	@ 0x74
 800c076:	d122      	bne.n	800c0be <_svfprintf_r+0x71e>
 800c078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c07a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c07c:	1a9b      	subs	r3, r3, r2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c082:	dd1c      	ble.n	800c0be <_svfprintf_r+0x71e>
 800c084:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800c086:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800c08a:	2810      	cmp	r0, #16
 800c08c:	489e      	ldr	r0, [pc, #632]	@ (800c308 <_svfprintf_r+0x968>)
 800c08e:	6020      	str	r0, [r4, #0]
 800c090:	f102 0201 	add.w	r2, r2, #1
 800c094:	f104 0108 	add.w	r1, r4, #8
 800c098:	f300 8298 	bgt.w	800c5cc <_svfprintf_r+0xc2c>
 800c09c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800c09e:	6060      	str	r0, [r4, #4]
 800c0a0:	4403      	add	r3, r0
 800c0a2:	2a07      	cmp	r2, #7
 800c0a4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c0a8:	f340 82a5 	ble.w	800c5f6 <_svfprintf_r+0xc56>
 800c0ac:	9803      	ldr	r0, [sp, #12]
 800c0ae:	aa26      	add	r2, sp, #152	@ 0x98
 800c0b0:	4659      	mov	r1, fp
 800c0b2:	f002 f97d 	bl	800e3b0 <__ssprint_r>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f040 85ed 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c0bc:	ac29      	add	r4, sp, #164	@ 0xa4
 800c0be:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800c0c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c0c4:	b16a      	cbz	r2, 800c0e2 <_svfprintf_r+0x742>
 800c0c6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800c0ca:	6022      	str	r2, [r4, #0]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	4413      	add	r3, r2
 800c0d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c0d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c0d4:	6062      	str	r2, [r4, #4]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	2b07      	cmp	r3, #7
 800c0da:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c0dc:	f300 828d 	bgt.w	800c5fa <_svfprintf_r+0xc5a>
 800c0e0:	3408      	adds	r4, #8
 800c0e2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c0e4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c0e6:	b162      	cbz	r2, 800c102 <_svfprintf_r+0x762>
 800c0e8:	aa1f      	add	r2, sp, #124	@ 0x7c
 800c0ea:	6022      	str	r2, [r4, #0]
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c0f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c0f4:	6062      	str	r2, [r4, #4]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	2b07      	cmp	r3, #7
 800c0fa:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c0fc:	f300 8287 	bgt.w	800c60e <_svfprintf_r+0xc6e>
 800c100:	3408      	adds	r4, #8
 800c102:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c104:	2b80      	cmp	r3, #128	@ 0x80
 800c106:	d122      	bne.n	800c14e <_svfprintf_r+0x7ae>
 800c108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c10a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c10c:	1a9b      	subs	r3, r3, r2
 800c10e:	2b00      	cmp	r3, #0
 800c110:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c112:	dd1c      	ble.n	800c14e <_svfprintf_r+0x7ae>
 800c114:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800c116:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800c11a:	2810      	cmp	r0, #16
 800c11c:	487b      	ldr	r0, [pc, #492]	@ (800c30c <_svfprintf_r+0x96c>)
 800c11e:	6020      	str	r0, [r4, #0]
 800c120:	f102 0201 	add.w	r2, r2, #1
 800c124:	f104 0108 	add.w	r1, r4, #8
 800c128:	f300 827b 	bgt.w	800c622 <_svfprintf_r+0xc82>
 800c12c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800c12e:	6060      	str	r0, [r4, #4]
 800c130:	4403      	add	r3, r0
 800c132:	2a07      	cmp	r2, #7
 800c134:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c138:	f340 8288 	ble.w	800c64c <_svfprintf_r+0xcac>
 800c13c:	9803      	ldr	r0, [sp, #12]
 800c13e:	aa26      	add	r2, sp, #152	@ 0x98
 800c140:	4659      	mov	r1, fp
 800c142:	f002 f935 	bl	800e3b0 <__ssprint_r>
 800c146:	2800      	cmp	r0, #0
 800c148:	f040 85a5 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c14c:	ac29      	add	r4, sp, #164	@ 0xa4
 800c14e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c150:	eba3 0308 	sub.w	r3, r3, r8
 800c154:	2b00      	cmp	r3, #0
 800c156:	9310      	str	r3, [sp, #64]	@ 0x40
 800c158:	dd1c      	ble.n	800c194 <_svfprintf_r+0x7f4>
 800c15a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c15c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800c160:	2810      	cmp	r0, #16
 800c162:	486a      	ldr	r0, [pc, #424]	@ (800c30c <_svfprintf_r+0x96c>)
 800c164:	6020      	str	r0, [r4, #0]
 800c166:	f102 0201 	add.w	r2, r2, #1
 800c16a:	f104 0108 	add.w	r1, r4, #8
 800c16e:	f300 826f 	bgt.w	800c650 <_svfprintf_r+0xcb0>
 800c172:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c174:	6060      	str	r0, [r4, #4]
 800c176:	4403      	add	r3, r0
 800c178:	2a07      	cmp	r2, #7
 800c17a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c17e:	f340 827c 	ble.w	800c67a <_svfprintf_r+0xcda>
 800c182:	9803      	ldr	r0, [sp, #12]
 800c184:	aa26      	add	r2, sp, #152	@ 0x98
 800c186:	4659      	mov	r1, fp
 800c188:	f002 f912 	bl	800e3b0 <__ssprint_r>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f040 8582 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c192:	ac29      	add	r4, sp, #164	@ 0xa4
 800c194:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c196:	9310      	str	r3, [sp, #64]	@ 0x40
 800c198:	05ea      	lsls	r2, r5, #23
 800c19a:	f100 8275 	bmi.w	800c688 <_svfprintf_r+0xce8>
 800c19e:	4443      	add	r3, r8
 800c1a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c1a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	2b07      	cmp	r3, #7
 800c1a8:	e9c4 9800 	strd	r9, r8, [r4]
 800c1ac:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c1ae:	f300 82b1 	bgt.w	800c714 <_svfprintf_r+0xd74>
 800c1b2:	3408      	adds	r4, #8
 800c1b4:	076a      	lsls	r2, r5, #29
 800c1b6:	f100 8550 	bmi.w	800cc5a <_svfprintf_r+0x12ba>
 800c1ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1be:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c1c0:	428a      	cmp	r2, r1
 800c1c2:	bfac      	ite	ge
 800c1c4:	189b      	addge	r3, r3, r2
 800c1c6:	185b      	addlt	r3, r3, r1
 800c1c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c1ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c1cc:	b13b      	cbz	r3, 800c1de <_svfprintf_r+0x83e>
 800c1ce:	9803      	ldr	r0, [sp, #12]
 800c1d0:	aa26      	add	r2, sp, #152	@ 0x98
 800c1d2:	4659      	mov	r1, fp
 800c1d4:	f002 f8ec 	bl	800e3b0 <__ssprint_r>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	f040 855c 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c1e2:	f1ba 0f00 	cmp.w	sl, #0
 800c1e6:	f040 8572 	bne.w	800ccce <_svfprintf_r+0x132e>
 800c1ea:	9e07      	ldr	r6, [sp, #28]
 800c1ec:	ac29      	add	r4, sp, #164	@ 0xa4
 800c1ee:	e0c6      	b.n	800c37e <_svfprintf_r+0x9de>
 800c1f0:	f802 0c01 	strb.w	r0, [r2, #-1]
 800c1f4:	e6ac      	b.n	800bf50 <_svfprintf_r+0x5b0>
 800c1f6:	f803 0b01 	strb.w	r0, [r3], #1
 800c1fa:	e676      	b.n	800beea <_svfprintf_r+0x54a>
 800c1fc:	9b08      	ldr	r3, [sp, #32]
 800c1fe:	2b46      	cmp	r3, #70	@ 0x46
 800c200:	d005      	beq.n	800c20e <_svfprintf_r+0x86e>
 800c202:	2b45      	cmp	r3, #69	@ 0x45
 800c204:	d11a      	bne.n	800c23c <_svfprintf_r+0x89c>
 800c206:	f108 0601 	add.w	r6, r8, #1
 800c20a:	2102      	movs	r1, #2
 800c20c:	e001      	b.n	800c212 <_svfprintf_r+0x872>
 800c20e:	4646      	mov	r6, r8
 800c210:	2103      	movs	r1, #3
 800c212:	ab24      	add	r3, sp, #144	@ 0x90
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	ab21      	add	r3, sp, #132	@ 0x84
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800c21e:	ab20      	add	r3, sp, #128	@ 0x80
 800c220:	9803      	ldr	r0, [sp, #12]
 800c222:	4632      	mov	r2, r6
 800c224:	f000 ffe4 	bl	800d1f0 <_dtoa_r>
 800c228:	9b08      	ldr	r3, [sp, #32]
 800c22a:	2b47      	cmp	r3, #71	@ 0x47
 800c22c:	4681      	mov	r9, r0
 800c22e:	d119      	bne.n	800c264 <_svfprintf_r+0x8c4>
 800c230:	07e8      	lsls	r0, r5, #31
 800c232:	d405      	bmi.n	800c240 <_svfprintf_r+0x8a0>
 800c234:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c236:	eba3 0309 	sub.w	r3, r3, r9
 800c23a:	e69b      	b.n	800bf74 <_svfprintf_r+0x5d4>
 800c23c:	4646      	mov	r6, r8
 800c23e:	e7e4      	b.n	800c20a <_svfprintf_r+0x86a>
 800c240:	eb09 0706 	add.w	r7, r9, r6
 800c244:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800c248:	2200      	movs	r2, #0
 800c24a:	2300      	movs	r3, #0
 800c24c:	f7f4 fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c250:	b100      	cbz	r0, 800c254 <_svfprintf_r+0x8b4>
 800c252:	9724      	str	r7, [sp, #144]	@ 0x90
 800c254:	2230      	movs	r2, #48	@ 0x30
 800c256:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c258:	429f      	cmp	r7, r3
 800c25a:	d9eb      	bls.n	800c234 <_svfprintf_r+0x894>
 800c25c:	1c59      	adds	r1, r3, #1
 800c25e:	9124      	str	r1, [sp, #144]	@ 0x90
 800c260:	701a      	strb	r2, [r3, #0]
 800c262:	e7f8      	b.n	800c256 <_svfprintf_r+0x8b6>
 800c264:	9b08      	ldr	r3, [sp, #32]
 800c266:	2b46      	cmp	r3, #70	@ 0x46
 800c268:	eb00 0706 	add.w	r7, r0, r6
 800c26c:	d1ea      	bne.n	800c244 <_svfprintf_r+0x8a4>
 800c26e:	7803      	ldrb	r3, [r0, #0]
 800c270:	2b30      	cmp	r3, #48	@ 0x30
 800c272:	d109      	bne.n	800c288 <_svfprintf_r+0x8e8>
 800c274:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800c278:	2200      	movs	r2, #0
 800c27a:	2300      	movs	r3, #0
 800c27c:	f7f4 fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 800c280:	b910      	cbnz	r0, 800c288 <_svfprintf_r+0x8e8>
 800c282:	f1c6 0601 	rsb	r6, r6, #1
 800c286:	9620      	str	r6, [sp, #128]	@ 0x80
 800c288:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c28a:	441f      	add	r7, r3
 800c28c:	e7da      	b.n	800c244 <_svfprintf_r+0x8a4>
 800c28e:	9b08      	ldr	r3, [sp, #32]
 800c290:	2b46      	cmp	r3, #70	@ 0x46
 800c292:	f47f ae7d 	bne.w	800bf90 <_svfprintf_r+0x5f0>
 800c296:	f005 0301 	and.w	r3, r5, #1
 800c29a:	2e00      	cmp	r6, #0
 800c29c:	ea43 0308 	orr.w	r3, r3, r8
 800c2a0:	dd25      	ble.n	800c2ee <_svfprintf_r+0x94e>
 800c2a2:	b37b      	cbz	r3, 800c304 <_svfprintf_r+0x964>
 800c2a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2a6:	18f3      	adds	r3, r6, r3
 800c2a8:	4498      	add	r8, r3
 800c2aa:	2366      	movs	r3, #102	@ 0x66
 800c2ac:	9306      	str	r3, [sp, #24]
 800c2ae:	e033      	b.n	800c318 <_svfprintf_r+0x978>
 800c2b0:	f813 7b01 	ldrb.w	r7, [r3], #1
 800c2b4:	f806 7f01 	strb.w	r7, [r6, #1]!
 800c2b8:	e6a1      	b.n	800bffe <_svfprintf_r+0x65e>
 800c2ba:	b941      	cbnz	r1, 800c2ce <_svfprintf_r+0x92e>
 800c2bc:	2230      	movs	r2, #48	@ 0x30
 800c2be:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800c2c2:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800c2c6:	3330      	adds	r3, #48	@ 0x30
 800c2c8:	f802 3b01 	strb.w	r3, [r2], #1
 800c2cc:	e6a3      	b.n	800c016 <_svfprintf_r+0x676>
 800c2ce:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800c2d2:	e7f8      	b.n	800c2c6 <_svfprintf_r+0x926>
 800c2d4:	9b04      	ldr	r3, [sp, #16]
 800c2d6:	429e      	cmp	r6, r3
 800c2d8:	da0d      	bge.n	800c2f6 <_svfprintf_r+0x956>
 800c2da:	9b04      	ldr	r3, [sp, #16]
 800c2dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	eb03 0802 	add.w	r8, r3, r2
 800c2e4:	dc0c      	bgt.n	800c300 <_svfprintf_r+0x960>
 800c2e6:	f1c6 0301 	rsb	r3, r6, #1
 800c2ea:	4498      	add	r8, r3
 800c2ec:	e008      	b.n	800c300 <_svfprintf_r+0x960>
 800c2ee:	b17b      	cbz	r3, 800c310 <_svfprintf_r+0x970>
 800c2f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	e7d8      	b.n	800c2a8 <_svfprintf_r+0x908>
 800c2f6:	07eb      	lsls	r3, r5, #31
 800c2f8:	d521      	bpl.n	800c33e <_svfprintf_r+0x99e>
 800c2fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2fc:	eb06 0803 	add.w	r8, r6, r3
 800c300:	2367      	movs	r3, #103	@ 0x67
 800c302:	e7d3      	b.n	800c2ac <_svfprintf_r+0x90c>
 800c304:	46b0      	mov	r8, r6
 800c306:	e7d0      	b.n	800c2aa <_svfprintf_r+0x90a>
 800c308:	0800faa4 	.word	0x0800faa4
 800c30c:	0800fa94 	.word	0x0800fa94
 800c310:	2366      	movs	r3, #102	@ 0x66
 800c312:	9306      	str	r3, [sp, #24]
 800c314:	f04f 0801 	mov.w	r8, #1
 800c318:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800c31c:	9308      	str	r3, [sp, #32]
 800c31e:	d01f      	beq.n	800c360 <_svfprintf_r+0x9c0>
 800c320:	2700      	movs	r7, #0
 800c322:	2e00      	cmp	r6, #0
 800c324:	9708      	str	r7, [sp, #32]
 800c326:	f77f ae8a 	ble.w	800c03e <_svfprintf_r+0x69e>
 800c32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	2bff      	cmp	r3, #255	@ 0xff
 800c330:	d107      	bne.n	800c342 <_svfprintf_r+0x9a2>
 800c332:	9b08      	ldr	r3, [sp, #32]
 800c334:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c336:	443b      	add	r3, r7
 800c338:	fb02 8803 	mla	r8, r2, r3, r8
 800c33c:	e67f      	b.n	800c03e <_svfprintf_r+0x69e>
 800c33e:	46b0      	mov	r8, r6
 800c340:	e7de      	b.n	800c300 <_svfprintf_r+0x960>
 800c342:	42b3      	cmp	r3, r6
 800c344:	daf5      	bge.n	800c332 <_svfprintf_r+0x992>
 800c346:	1af6      	subs	r6, r6, r3
 800c348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34a:	785b      	ldrb	r3, [r3, #1]
 800c34c:	b133      	cbz	r3, 800c35c <_svfprintf_r+0x9bc>
 800c34e:	9b08      	ldr	r3, [sp, #32]
 800c350:	3301      	adds	r3, #1
 800c352:	9308      	str	r3, [sp, #32]
 800c354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c356:	3301      	adds	r3, #1
 800c358:	9309      	str	r3, [sp, #36]	@ 0x24
 800c35a:	e7e6      	b.n	800c32a <_svfprintf_r+0x98a>
 800c35c:	3701      	adds	r7, #1
 800c35e:	e7e4      	b.n	800c32a <_svfprintf_r+0x98a>
 800c360:	9f08      	ldr	r7, [sp, #32]
 800c362:	e66c      	b.n	800c03e <_svfprintf_r+0x69e>
 800c364:	232d      	movs	r3, #45	@ 0x2d
 800c366:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800c36a:	e66c      	b.n	800c046 <_svfprintf_r+0x6a6>
 800c36c:	06af      	lsls	r7, r5, #26
 800c36e:	d50a      	bpl.n	800c386 <_svfprintf_r+0x9e6>
 800c370:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c372:	6833      	ldr	r3, [r6, #0]
 800c374:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c376:	17d2      	asrs	r2, r2, #31
 800c378:	e9c3 1200 	strd	r1, r2, [r3]
 800c37c:	3604      	adds	r6, #4
 800c37e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800c382:	f7ff bb46 	b.w	800ba12 <_svfprintf_r+0x72>
 800c386:	06e8      	lsls	r0, r5, #27
 800c388:	d503      	bpl.n	800c392 <_svfprintf_r+0x9f2>
 800c38a:	6833      	ldr	r3, [r6, #0]
 800c38c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	e7f4      	b.n	800c37c <_svfprintf_r+0x9dc>
 800c392:	0669      	lsls	r1, r5, #25
 800c394:	d503      	bpl.n	800c39e <_svfprintf_r+0x9fe>
 800c396:	6833      	ldr	r3, [r6, #0]
 800c398:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c39a:	801a      	strh	r2, [r3, #0]
 800c39c:	e7ee      	b.n	800c37c <_svfprintf_r+0x9dc>
 800c39e:	05aa      	lsls	r2, r5, #22
 800c3a0:	d5f3      	bpl.n	800c38a <_svfprintf_r+0x9ea>
 800c3a2:	6833      	ldr	r3, [r6, #0]
 800c3a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c3a6:	701a      	strb	r2, [r3, #0]
 800c3a8:	e7e8      	b.n	800c37c <_svfprintf_r+0x9dc>
 800c3aa:	f045 0510 	orr.w	r5, r5, #16
 800c3ae:	f015 0320 	ands.w	r3, r5, #32
 800c3b2:	d020      	beq.n	800c3f6 <_svfprintf_r+0xa56>
 800c3b4:	3607      	adds	r6, #7
 800c3b6:	f026 0307 	bic.w	r3, r6, #7
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	685f      	ldr	r7, [r3, #4]
 800c3be:	f852 6b08 	ldr.w	r6, [r2], #8
 800c3c2:	9207      	str	r2, [sp, #28]
 800c3c4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800c3d0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c3d4:	f000 848c 	beq.w	800ccf0 <_svfprintf_r+0x1350>
 800c3d8:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800c3dc:	9208      	str	r2, [sp, #32]
 800c3de:	ea56 0207 	orrs.w	r2, r6, r7
 800c3e2:	f040 848a 	bne.w	800ccfa <_svfprintf_r+0x135a>
 800c3e6:	f1b8 0f00 	cmp.w	r8, #0
 800c3ea:	f000 80db 	beq.w	800c5a4 <_svfprintf_r+0xc04>
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	f040 8486 	bne.w	800cd00 <_svfprintf_r+0x1360>
 800c3f4:	e083      	b.n	800c4fe <_svfprintf_r+0xb5e>
 800c3f6:	4632      	mov	r2, r6
 800c3f8:	f015 0710 	ands.w	r7, r5, #16
 800c3fc:	f852 6b04 	ldr.w	r6, [r2], #4
 800c400:	9207      	str	r2, [sp, #28]
 800c402:	d001      	beq.n	800c408 <_svfprintf_r+0xa68>
 800c404:	461f      	mov	r7, r3
 800c406:	e7dd      	b.n	800c3c4 <_svfprintf_r+0xa24>
 800c408:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800c40c:	d001      	beq.n	800c412 <_svfprintf_r+0xa72>
 800c40e:	b2b6      	uxth	r6, r6
 800c410:	e7d8      	b.n	800c3c4 <_svfprintf_r+0xa24>
 800c412:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800c416:	d0d5      	beq.n	800c3c4 <_svfprintf_r+0xa24>
 800c418:	b2f6      	uxtb	r6, r6
 800c41a:	e7f3      	b.n	800c404 <_svfprintf_r+0xa64>
 800c41c:	4633      	mov	r3, r6
 800c41e:	2278      	movs	r2, #120	@ 0x78
 800c420:	f853 6b04 	ldr.w	r6, [r3], #4
 800c424:	9307      	str	r3, [sp, #28]
 800c426:	f647 0330 	movw	r3, #30768	@ 0x7830
 800c42a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800c42e:	4b94      	ldr	r3, [pc, #592]	@ (800c680 <_svfprintf_r+0xce0>)
 800c430:	9319      	str	r3, [sp, #100]	@ 0x64
 800c432:	2700      	movs	r7, #0
 800c434:	f045 0502 	orr.w	r5, r5, #2
 800c438:	2302      	movs	r3, #2
 800c43a:	9206      	str	r2, [sp, #24]
 800c43c:	e7c5      	b.n	800c3ca <_svfprintf_r+0xa2a>
 800c43e:	4633      	mov	r3, r6
 800c440:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c444:	f853 9b04 	ldr.w	r9, [r3], #4
 800c448:	9307      	str	r3, [sp, #28]
 800c44a:	f04f 0600 	mov.w	r6, #0
 800c44e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800c452:	d00f      	beq.n	800c474 <_svfprintf_r+0xad4>
 800c454:	4642      	mov	r2, r8
 800c456:	4631      	mov	r1, r6
 800c458:	4648      	mov	r0, r9
 800c45a:	f7f3 fec1 	bl	80001e0 <memchr>
 800c45e:	4682      	mov	sl, r0
 800c460:	2800      	cmp	r0, #0
 800c462:	f43f ac81 	beq.w	800bd68 <_svfprintf_r+0x3c8>
 800c466:	eba0 0809 	sub.w	r8, r0, r9
 800c46a:	46b2      	mov	sl, r6
 800c46c:	9610      	str	r6, [sp, #64]	@ 0x40
 800c46e:	4637      	mov	r7, r6
 800c470:	9608      	str	r6, [sp, #32]
 800c472:	e5eb      	b.n	800c04c <_svfprintf_r+0x6ac>
 800c474:	4648      	mov	r0, r9
 800c476:	f7f3 feab 	bl	80001d0 <strlen>
 800c47a:	46b2      	mov	sl, r6
 800c47c:	4680      	mov	r8, r0
 800c47e:	e473      	b.n	800bd68 <_svfprintf_r+0x3c8>
 800c480:	f045 0510 	orr.w	r5, r5, #16
 800c484:	f015 0320 	ands.w	r3, r5, #32
 800c488:	d009      	beq.n	800c49e <_svfprintf_r+0xafe>
 800c48a:	3607      	adds	r6, #7
 800c48c:	f026 0307 	bic.w	r3, r6, #7
 800c490:	461a      	mov	r2, r3
 800c492:	685f      	ldr	r7, [r3, #4]
 800c494:	f852 6b08 	ldr.w	r6, [r2], #8
 800c498:	9207      	str	r2, [sp, #28]
 800c49a:	2301      	movs	r3, #1
 800c49c:	e795      	b.n	800c3ca <_svfprintf_r+0xa2a>
 800c49e:	4632      	mov	r2, r6
 800c4a0:	f015 0710 	ands.w	r7, r5, #16
 800c4a4:	f852 6b04 	ldr.w	r6, [r2], #4
 800c4a8:	9207      	str	r2, [sp, #28]
 800c4aa:	d001      	beq.n	800c4b0 <_svfprintf_r+0xb10>
 800c4ac:	461f      	mov	r7, r3
 800c4ae:	e7f4      	b.n	800c49a <_svfprintf_r+0xafa>
 800c4b0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800c4b4:	d001      	beq.n	800c4ba <_svfprintf_r+0xb1a>
 800c4b6:	b2b6      	uxth	r6, r6
 800c4b8:	e7ef      	b.n	800c49a <_svfprintf_r+0xafa>
 800c4ba:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800c4be:	d0ec      	beq.n	800c49a <_svfprintf_r+0xafa>
 800c4c0:	b2f6      	uxtb	r6, r6
 800c4c2:	e7f3      	b.n	800c4ac <_svfprintf_r+0xb0c>
 800c4c4:	4b6f      	ldr	r3, [pc, #444]	@ (800c684 <_svfprintf_r+0xce4>)
 800c4c6:	f7ff bb39 	b.w	800bb3c <_svfprintf_r+0x19c>
 800c4ca:	4632      	mov	r2, r6
 800c4cc:	f015 0710 	ands.w	r7, r5, #16
 800c4d0:	f852 6b04 	ldr.w	r6, [r2], #4
 800c4d4:	9207      	str	r2, [sp, #28]
 800c4d6:	d002      	beq.n	800c4de <_svfprintf_r+0xb3e>
 800c4d8:	461f      	mov	r7, r3
 800c4da:	f7ff bb3c 	b.w	800bb56 <_svfprintf_r+0x1b6>
 800c4de:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800c4e2:	d002      	beq.n	800c4ea <_svfprintf_r+0xb4a>
 800c4e4:	b2b6      	uxth	r6, r6
 800c4e6:	f7ff bb36 	b.w	800bb56 <_svfprintf_r+0x1b6>
 800c4ea:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800c4ee:	f43f ab32 	beq.w	800bb56 <_svfprintf_r+0x1b6>
 800c4f2:	b2f6      	uxtb	r6, r6
 800c4f4:	e7f0      	b.n	800c4d8 <_svfprintf_r+0xb38>
 800c4f6:	2e0a      	cmp	r6, #10
 800c4f8:	f177 0300 	sbcs.w	r3, r7, #0
 800c4fc:	d207      	bcs.n	800c50e <_svfprintf_r+0xb6e>
 800c4fe:	3630      	adds	r6, #48	@ 0x30
 800c500:	b2f6      	uxtb	r6, r6
 800c502:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800c506:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800c50a:	f000 bc15 	b.w	800cd38 <_svfprintf_r+0x1398>
 800c50e:	2300      	movs	r3, #0
 800c510:	9304      	str	r3, [sp, #16]
 800c512:	9b08      	ldr	r3, [sp, #32]
 800c514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c518:	ad52      	add	r5, sp, #328	@ 0x148
 800c51a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c51c:	220a      	movs	r2, #10
 800c51e:	2300      	movs	r3, #0
 800c520:	4630      	mov	r0, r6
 800c522:	4639      	mov	r1, r7
 800c524:	f7f4 fb90 	bl	8000c48 <__aeabi_uldivmod>
 800c528:	9b04      	ldr	r3, [sp, #16]
 800c52a:	9011      	str	r0, [sp, #68]	@ 0x44
 800c52c:	3301      	adds	r3, #1
 800c52e:	9304      	str	r3, [sp, #16]
 800c530:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c532:	3230      	adds	r2, #48	@ 0x30
 800c534:	468a      	mov	sl, r1
 800c536:	f105 39ff 	add.w	r9, r5, #4294967295
 800c53a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800c53e:	b1d3      	cbz	r3, 800c576 <_svfprintf_r+0xbd6>
 800c540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c542:	9a04      	ldr	r2, [sp, #16]
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d115      	bne.n	800c576 <_svfprintf_r+0xbd6>
 800c54a:	2aff      	cmp	r2, #255	@ 0xff
 800c54c:	d013      	beq.n	800c576 <_svfprintf_r+0xbd6>
 800c54e:	2e0a      	cmp	r6, #10
 800c550:	f177 0300 	sbcs.w	r3, r7, #0
 800c554:	d30f      	bcc.n	800c576 <_svfprintf_r+0xbd6>
 800c556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c558:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c55a:	eba9 0903 	sub.w	r9, r9, r3
 800c55e:	461a      	mov	r2, r3
 800c560:	4648      	mov	r0, r9
 800c562:	f000 fcfe 	bl	800cf62 <strncpy>
 800c566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c568:	785b      	ldrb	r3, [r3, #1]
 800c56a:	b11b      	cbz	r3, 800c574 <_svfprintf_r+0xbd4>
 800c56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c56e:	3301      	adds	r3, #1
 800c570:	9309      	str	r3, [sp, #36]	@ 0x24
 800c572:	2300      	movs	r3, #0
 800c574:	9304      	str	r3, [sp, #16]
 800c576:	2e0a      	cmp	r6, #10
 800c578:	f177 0700 	sbcs.w	r7, r7, #0
 800c57c:	f0c0 83dc 	bcc.w	800cd38 <_svfprintf_r+0x1398>
 800c580:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800c582:	4657      	mov	r7, sl
 800c584:	464d      	mov	r5, r9
 800c586:	e7c9      	b.n	800c51c <_svfprintf_r+0xb7c>
 800c588:	f006 030f 	and.w	r3, r6, #15
 800c58c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c58e:	0936      	lsrs	r6, r6, #4
 800c590:	5cd3      	ldrb	r3, [r2, r3]
 800c592:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800c596:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800c59a:	093f      	lsrs	r7, r7, #4
 800c59c:	ea56 0307 	orrs.w	r3, r6, r7
 800c5a0:	d1f2      	bne.n	800c588 <_svfprintf_r+0xbe8>
 800c5a2:	e3c9      	b.n	800cd38 <_svfprintf_r+0x1398>
 800c5a4:	b91b      	cbnz	r3, 800c5ae <_svfprintf_r+0xc0e>
 800c5a6:	07e9      	lsls	r1, r5, #31
 800c5a8:	d501      	bpl.n	800c5ae <_svfprintf_r+0xc0e>
 800c5aa:	2630      	movs	r6, #48	@ 0x30
 800c5ac:	e7a9      	b.n	800c502 <_svfprintf_r+0xb62>
 800c5ae:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800c5b2:	e3c1      	b.n	800cd38 <_svfprintf_r+0x1398>
 800c5b4:	9b06      	ldr	r3, [sp, #24]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 838f 	beq.w	800ccda <_svfprintf_r+0x133a>
 800c5bc:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800c5c6:	9607      	str	r6, [sp, #28]
 800c5c8:	f7ff bb63 	b.w	800bc92 <_svfprintf_r+0x2f2>
 800c5cc:	2010      	movs	r0, #16
 800c5ce:	4403      	add	r3, r0
 800c5d0:	2a07      	cmp	r2, #7
 800c5d2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c5d6:	6060      	str	r0, [r4, #4]
 800c5d8:	dd08      	ble.n	800c5ec <_svfprintf_r+0xc4c>
 800c5da:	9803      	ldr	r0, [sp, #12]
 800c5dc:	aa26      	add	r2, sp, #152	@ 0x98
 800c5de:	4659      	mov	r1, fp
 800c5e0:	f001 fee6 	bl	800e3b0 <__ssprint_r>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f040 8356 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c5ea:	a929      	add	r1, sp, #164	@ 0xa4
 800c5ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c5ee:	3b10      	subs	r3, #16
 800c5f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	e546      	b.n	800c084 <_svfprintf_r+0x6e4>
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	e561      	b.n	800c0be <_svfprintf_r+0x71e>
 800c5fa:	9803      	ldr	r0, [sp, #12]
 800c5fc:	aa26      	add	r2, sp, #152	@ 0x98
 800c5fe:	4659      	mov	r1, fp
 800c600:	f001 fed6 	bl	800e3b0 <__ssprint_r>
 800c604:	2800      	cmp	r0, #0
 800c606:	f040 8346 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c60a:	ac29      	add	r4, sp, #164	@ 0xa4
 800c60c:	e569      	b.n	800c0e2 <_svfprintf_r+0x742>
 800c60e:	9803      	ldr	r0, [sp, #12]
 800c610:	aa26      	add	r2, sp, #152	@ 0x98
 800c612:	4659      	mov	r1, fp
 800c614:	f001 fecc 	bl	800e3b0 <__ssprint_r>
 800c618:	2800      	cmp	r0, #0
 800c61a:	f040 833c 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c61e:	ac29      	add	r4, sp, #164	@ 0xa4
 800c620:	e56f      	b.n	800c102 <_svfprintf_r+0x762>
 800c622:	2010      	movs	r0, #16
 800c624:	4403      	add	r3, r0
 800c626:	2a07      	cmp	r2, #7
 800c628:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c62c:	6060      	str	r0, [r4, #4]
 800c62e:	dd08      	ble.n	800c642 <_svfprintf_r+0xca2>
 800c630:	9803      	ldr	r0, [sp, #12]
 800c632:	aa26      	add	r2, sp, #152	@ 0x98
 800c634:	4659      	mov	r1, fp
 800c636:	f001 febb 	bl	800e3b0 <__ssprint_r>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	f040 832b 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c640:	a929      	add	r1, sp, #164	@ 0xa4
 800c642:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c644:	3b10      	subs	r3, #16
 800c646:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c648:	460c      	mov	r4, r1
 800c64a:	e563      	b.n	800c114 <_svfprintf_r+0x774>
 800c64c:	460c      	mov	r4, r1
 800c64e:	e57e      	b.n	800c14e <_svfprintf_r+0x7ae>
 800c650:	2010      	movs	r0, #16
 800c652:	4403      	add	r3, r0
 800c654:	2a07      	cmp	r2, #7
 800c656:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c65a:	6060      	str	r0, [r4, #4]
 800c65c:	dd08      	ble.n	800c670 <_svfprintf_r+0xcd0>
 800c65e:	9803      	ldr	r0, [sp, #12]
 800c660:	aa26      	add	r2, sp, #152	@ 0x98
 800c662:	4659      	mov	r1, fp
 800c664:	f001 fea4 	bl	800e3b0 <__ssprint_r>
 800c668:	2800      	cmp	r0, #0
 800c66a:	f040 8314 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c66e:	a929      	add	r1, sp, #164	@ 0xa4
 800c670:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c672:	3b10      	subs	r3, #16
 800c674:	9310      	str	r3, [sp, #64]	@ 0x40
 800c676:	460c      	mov	r4, r1
 800c678:	e56f      	b.n	800c15a <_svfprintf_r+0x7ba>
 800c67a:	460c      	mov	r4, r1
 800c67c:	e58a      	b.n	800c194 <_svfprintf_r+0x7f4>
 800c67e:	bf00      	nop
 800c680:	0800fa70 	.word	0x0800fa70
 800c684:	0800fa81 	.word	0x0800fa81
 800c688:	9b06      	ldr	r3, [sp, #24]
 800c68a:	2b65      	cmp	r3, #101	@ 0x65
 800c68c:	f340 8246 	ble.w	800cb1c <_svfprintf_r+0x117c>
 800c690:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c694:	2200      	movs	r2, #0
 800c696:	2300      	movs	r3, #0
 800c698:	f7f4 fa16 	bl	8000ac8 <__aeabi_dcmpeq>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d06a      	beq.n	800c776 <_svfprintf_r+0xdd6>
 800c6a0:	4b73      	ldr	r3, [pc, #460]	@ (800c870 <_svfprintf_r+0xed0>)
 800c6a2:	6023      	str	r3, [r4, #0]
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	6063      	str	r3, [r4, #4]
 800c6a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c6ae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	2b07      	cmp	r3, #7
 800c6b4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c6b6:	dc37      	bgt.n	800c728 <_svfprintf_r+0xd88>
 800c6b8:	3408      	adds	r4, #8
 800c6ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c6bc:	9a04      	ldr	r2, [sp, #16]
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	db02      	blt.n	800c6c8 <_svfprintf_r+0xd28>
 800c6c2:	07ef      	lsls	r7, r5, #31
 800c6c4:	f57f ad76 	bpl.w	800c1b4 <_svfprintf_r+0x814>
 800c6c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c6ca:	6023      	str	r3, [r4, #0]
 800c6cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c6d0:	6063      	str	r3, [r4, #4]
 800c6d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c6d4:	4413      	add	r3, r2
 800c6d6:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c6d8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c6da:	3301      	adds	r3, #1
 800c6dc:	2b07      	cmp	r3, #7
 800c6de:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c6e0:	dc2c      	bgt.n	800c73c <_svfprintf_r+0xd9c>
 800c6e2:	3408      	adds	r4, #8
 800c6e4:	9b04      	ldr	r3, [sp, #16]
 800c6e6:	1e5e      	subs	r6, r3, #1
 800c6e8:	2e00      	cmp	r6, #0
 800c6ea:	f77f ad63 	ble.w	800c1b4 <_svfprintf_r+0x814>
 800c6ee:	4f61      	ldr	r7, [pc, #388]	@ (800c874 <_svfprintf_r+0xed4>)
 800c6f0:	f04f 0810 	mov.w	r8, #16
 800c6f4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c6f8:	2e10      	cmp	r6, #16
 800c6fa:	f103 0301 	add.w	r3, r3, #1
 800c6fe:	f104 0108 	add.w	r1, r4, #8
 800c702:	6027      	str	r7, [r4, #0]
 800c704:	dc24      	bgt.n	800c750 <_svfprintf_r+0xdb0>
 800c706:	6066      	str	r6, [r4, #4]
 800c708:	2b07      	cmp	r3, #7
 800c70a:	4416      	add	r6, r2
 800c70c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800c710:	f340 82a0 	ble.w	800cc54 <_svfprintf_r+0x12b4>
 800c714:	9803      	ldr	r0, [sp, #12]
 800c716:	aa26      	add	r2, sp, #152	@ 0x98
 800c718:	4659      	mov	r1, fp
 800c71a:	f001 fe49 	bl	800e3b0 <__ssprint_r>
 800c71e:	2800      	cmp	r0, #0
 800c720:	f040 82b9 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c724:	ac29      	add	r4, sp, #164	@ 0xa4
 800c726:	e545      	b.n	800c1b4 <_svfprintf_r+0x814>
 800c728:	9803      	ldr	r0, [sp, #12]
 800c72a:	aa26      	add	r2, sp, #152	@ 0x98
 800c72c:	4659      	mov	r1, fp
 800c72e:	f001 fe3f 	bl	800e3b0 <__ssprint_r>
 800c732:	2800      	cmp	r0, #0
 800c734:	f040 82af 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c738:	ac29      	add	r4, sp, #164	@ 0xa4
 800c73a:	e7be      	b.n	800c6ba <_svfprintf_r+0xd1a>
 800c73c:	9803      	ldr	r0, [sp, #12]
 800c73e:	aa26      	add	r2, sp, #152	@ 0x98
 800c740:	4659      	mov	r1, fp
 800c742:	f001 fe35 	bl	800e3b0 <__ssprint_r>
 800c746:	2800      	cmp	r0, #0
 800c748:	f040 82a5 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c74c:	ac29      	add	r4, sp, #164	@ 0xa4
 800c74e:	e7c9      	b.n	800c6e4 <_svfprintf_r+0xd44>
 800c750:	3210      	adds	r2, #16
 800c752:	2b07      	cmp	r3, #7
 800c754:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c758:	f8c4 8004 	str.w	r8, [r4, #4]
 800c75c:	dd08      	ble.n	800c770 <_svfprintf_r+0xdd0>
 800c75e:	9803      	ldr	r0, [sp, #12]
 800c760:	aa26      	add	r2, sp, #152	@ 0x98
 800c762:	4659      	mov	r1, fp
 800c764:	f001 fe24 	bl	800e3b0 <__ssprint_r>
 800c768:	2800      	cmp	r0, #0
 800c76a:	f040 8294 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c76e:	a929      	add	r1, sp, #164	@ 0xa4
 800c770:	3e10      	subs	r6, #16
 800c772:	460c      	mov	r4, r1
 800c774:	e7be      	b.n	800c6f4 <_svfprintf_r+0xd54>
 800c776:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dc7d      	bgt.n	800c878 <_svfprintf_r+0xed8>
 800c77c:	4b3c      	ldr	r3, [pc, #240]	@ (800c870 <_svfprintf_r+0xed0>)
 800c77e:	6023      	str	r3, [r4, #0]
 800c780:	2301      	movs	r3, #1
 800c782:	6063      	str	r3, [r4, #4]
 800c784:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c786:	3301      	adds	r3, #1
 800c788:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c78a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c78c:	3301      	adds	r3, #1
 800c78e:	2b07      	cmp	r3, #7
 800c790:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c792:	dc46      	bgt.n	800c822 <_svfprintf_r+0xe82>
 800c794:	3408      	adds	r4, #8
 800c796:	9904      	ldr	r1, [sp, #16]
 800c798:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c79a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800c79c:	430b      	orrs	r3, r1
 800c79e:	f005 0101 	and.w	r1, r5, #1
 800c7a2:	430b      	orrs	r3, r1
 800c7a4:	f43f ad06 	beq.w	800c1b4 <_svfprintf_r+0x814>
 800c7a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c7aa:	6023      	str	r3, [r4, #0]
 800c7ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7ae:	6063      	str	r3, [r4, #4]
 800c7b0:	441a      	add	r2, r3
 800c7b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c7b4:	9228      	str	r2, [sp, #160]	@ 0xa0
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	2b07      	cmp	r3, #7
 800c7ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c7bc:	dc3b      	bgt.n	800c836 <_svfprintf_r+0xe96>
 800c7be:	f104 0308 	add.w	r3, r4, #8
 800c7c2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c7c4:	2e00      	cmp	r6, #0
 800c7c6:	da1b      	bge.n	800c800 <_svfprintf_r+0xe60>
 800c7c8:	4f2a      	ldr	r7, [pc, #168]	@ (800c874 <_svfprintf_r+0xed4>)
 800c7ca:	4276      	negs	r6, r6
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	2410      	movs	r4, #16
 800c7d0:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800c7d4:	2e10      	cmp	r6, #16
 800c7d6:	f101 0101 	add.w	r1, r1, #1
 800c7da:	f103 0308 	add.w	r3, r3, #8
 800c7de:	6017      	str	r7, [r2, #0]
 800c7e0:	dc33      	bgt.n	800c84a <_svfprintf_r+0xeaa>
 800c7e2:	6056      	str	r6, [r2, #4]
 800c7e4:	2907      	cmp	r1, #7
 800c7e6:	4406      	add	r6, r0
 800c7e8:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800c7ec:	dd08      	ble.n	800c800 <_svfprintf_r+0xe60>
 800c7ee:	9803      	ldr	r0, [sp, #12]
 800c7f0:	aa26      	add	r2, sp, #152	@ 0x98
 800c7f2:	4659      	mov	r1, fp
 800c7f4:	f001 fddc 	bl	800e3b0 <__ssprint_r>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	f040 824c 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c7fe:	ab29      	add	r3, sp, #164	@ 0xa4
 800c800:	9a04      	ldr	r2, [sp, #16]
 800c802:	9904      	ldr	r1, [sp, #16]
 800c804:	605a      	str	r2, [r3, #4]
 800c806:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800c808:	f8c3 9000 	str.w	r9, [r3]
 800c80c:	440a      	add	r2, r1
 800c80e:	9228      	str	r2, [sp, #160]	@ 0xa0
 800c810:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800c812:	3201      	adds	r2, #1
 800c814:	2a07      	cmp	r2, #7
 800c816:	9227      	str	r2, [sp, #156]	@ 0x9c
 800c818:	f73f af7c 	bgt.w	800c714 <_svfprintf_r+0xd74>
 800c81c:	f103 0408 	add.w	r4, r3, #8
 800c820:	e4c8      	b.n	800c1b4 <_svfprintf_r+0x814>
 800c822:	9803      	ldr	r0, [sp, #12]
 800c824:	aa26      	add	r2, sp, #152	@ 0x98
 800c826:	4659      	mov	r1, fp
 800c828:	f001 fdc2 	bl	800e3b0 <__ssprint_r>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	f040 8232 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c832:	ac29      	add	r4, sp, #164	@ 0xa4
 800c834:	e7af      	b.n	800c796 <_svfprintf_r+0xdf6>
 800c836:	9803      	ldr	r0, [sp, #12]
 800c838:	aa26      	add	r2, sp, #152	@ 0x98
 800c83a:	4659      	mov	r1, fp
 800c83c:	f001 fdb8 	bl	800e3b0 <__ssprint_r>
 800c840:	2800      	cmp	r0, #0
 800c842:	f040 8228 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c846:	ab29      	add	r3, sp, #164	@ 0xa4
 800c848:	e7bb      	b.n	800c7c2 <_svfprintf_r+0xe22>
 800c84a:	3010      	adds	r0, #16
 800c84c:	2907      	cmp	r1, #7
 800c84e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800c852:	6054      	str	r4, [r2, #4]
 800c854:	dd08      	ble.n	800c868 <_svfprintf_r+0xec8>
 800c856:	9803      	ldr	r0, [sp, #12]
 800c858:	aa26      	add	r2, sp, #152	@ 0x98
 800c85a:	4659      	mov	r1, fp
 800c85c:	f001 fda8 	bl	800e3b0 <__ssprint_r>
 800c860:	2800      	cmp	r0, #0
 800c862:	f040 8218 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c866:	ab29      	add	r3, sp, #164	@ 0xa4
 800c868:	3e10      	subs	r6, #16
 800c86a:	461a      	mov	r2, r3
 800c86c:	e7b0      	b.n	800c7d0 <_svfprintf_r+0xe30>
 800c86e:	bf00      	nop
 800c870:	0800fa92 	.word	0x0800fa92
 800c874:	0800fa94 	.word	0x0800fa94
 800c878:	9b04      	ldr	r3, [sp, #16]
 800c87a:	444b      	add	r3, r9
 800c87c:	9306      	str	r3, [sp, #24]
 800c87e:	9b04      	ldr	r3, [sp, #16]
 800c880:	42b3      	cmp	r3, r6
 800c882:	bfa8      	it	ge
 800c884:	4633      	movge	r3, r6
 800c886:	2b00      	cmp	r3, #0
 800c888:	4698      	mov	r8, r3
 800c88a:	dd0b      	ble.n	800c8a4 <_svfprintf_r+0xf04>
 800c88c:	e9c4 9300 	strd	r9, r3, [r4]
 800c890:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c892:	4443      	add	r3, r8
 800c894:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c896:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c898:	3301      	adds	r3, #1
 800c89a:	2b07      	cmp	r3, #7
 800c89c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c89e:	f300 8089 	bgt.w	800c9b4 <_svfprintf_r+0x1014>
 800c8a2:	3408      	adds	r4, #8
 800c8a4:	4643      	mov	r3, r8
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	bfac      	ite	ge
 800c8aa:	eba6 0808 	subge.w	r8, r6, r8
 800c8ae:	46b0      	movlt	r8, r6
 800c8b0:	f1b8 0f00 	cmp.w	r8, #0
 800c8b4:	dd1b      	ble.n	800c8ee <_svfprintf_r+0xf4e>
 800c8b6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800c8ba:	4897      	ldr	r0, [pc, #604]	@ (800cb18 <_svfprintf_r+0x1178>)
 800c8bc:	6020      	str	r0, [r4, #0]
 800c8be:	f1b8 0f10 	cmp.w	r8, #16
 800c8c2:	f102 0201 	add.w	r2, r2, #1
 800c8c6:	f104 0108 	add.w	r1, r4, #8
 800c8ca:	dc7d      	bgt.n	800c9c8 <_svfprintf_r+0x1028>
 800c8cc:	4443      	add	r3, r8
 800c8ce:	2a07      	cmp	r2, #7
 800c8d0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c8d4:	f8c4 8004 	str.w	r8, [r4, #4]
 800c8d8:	f340 808a 	ble.w	800c9f0 <_svfprintf_r+0x1050>
 800c8dc:	9803      	ldr	r0, [sp, #12]
 800c8de:	aa26      	add	r2, sp, #152	@ 0x98
 800c8e0:	4659      	mov	r1, fp
 800c8e2:	f001 fd65 	bl	800e3b0 <__ssprint_r>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f040 81d5 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c8ec:	ac29      	add	r4, sp, #164	@ 0xa4
 800c8ee:	eb09 0806 	add.w	r8, r9, r6
 800c8f2:	056e      	lsls	r6, r5, #21
 800c8f4:	d508      	bpl.n	800c908 <_svfprintf_r+0xf68>
 800c8f6:	9b08      	ldr	r3, [sp, #32]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d17b      	bne.n	800c9f4 <_svfprintf_r+0x1054>
 800c8fc:	2f00      	cmp	r7, #0
 800c8fe:	d17b      	bne.n	800c9f8 <_svfprintf_r+0x1058>
 800c900:	9b06      	ldr	r3, [sp, #24]
 800c902:	4598      	cmp	r8, r3
 800c904:	bf28      	it	cs
 800c906:	4698      	movcs	r8, r3
 800c908:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c90a:	9a04      	ldr	r2, [sp, #16]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	db01      	blt.n	800c914 <_svfprintf_r+0xf74>
 800c910:	07e8      	lsls	r0, r5, #31
 800c912:	d50e      	bpl.n	800c932 <_svfprintf_r+0xf92>
 800c914:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c916:	6023      	str	r3, [r4, #0]
 800c918:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c91a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c91c:	6063      	str	r3, [r4, #4]
 800c91e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c920:	4413      	add	r3, r2
 800c922:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c924:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c926:	3301      	adds	r3, #1
 800c928:	2b07      	cmp	r3, #7
 800c92a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c92c:	f300 80df 	bgt.w	800caee <_svfprintf_r+0x114e>
 800c930:	3408      	adds	r4, #8
 800c932:	9b04      	ldr	r3, [sp, #16]
 800c934:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800c936:	1bdf      	subs	r7, r3, r7
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	eba3 0308 	sub.w	r3, r3, r8
 800c93e:	429f      	cmp	r7, r3
 800c940:	bfa8      	it	ge
 800c942:	461f      	movge	r7, r3
 800c944:	2f00      	cmp	r7, #0
 800c946:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c948:	dd0a      	ble.n	800c960 <_svfprintf_r+0xfc0>
 800c94a:	443b      	add	r3, r7
 800c94c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c94e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c950:	3301      	adds	r3, #1
 800c952:	2b07      	cmp	r3, #7
 800c954:	e9c4 8700 	strd	r8, r7, [r4]
 800c958:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c95a:	f300 80d2 	bgt.w	800cb02 <_svfprintf_r+0x1162>
 800c95e:	3408      	adds	r4, #8
 800c960:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	2f00      	cmp	r7, #0
 800c966:	eba3 0606 	sub.w	r6, r3, r6
 800c96a:	bfa8      	it	ge
 800c96c:	1bf6      	subge	r6, r6, r7
 800c96e:	2e00      	cmp	r6, #0
 800c970:	f77f ac20 	ble.w	800c1b4 <_svfprintf_r+0x814>
 800c974:	4f68      	ldr	r7, [pc, #416]	@ (800cb18 <_svfprintf_r+0x1178>)
 800c976:	f04f 0810 	mov.w	r8, #16
 800c97a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800c97e:	2e10      	cmp	r6, #16
 800c980:	f103 0301 	add.w	r3, r3, #1
 800c984:	f104 0108 	add.w	r1, r4, #8
 800c988:	6027      	str	r7, [r4, #0]
 800c98a:	f77f aebc 	ble.w	800c706 <_svfprintf_r+0xd66>
 800c98e:	3210      	adds	r2, #16
 800c990:	2b07      	cmp	r3, #7
 800c992:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800c996:	f8c4 8004 	str.w	r8, [r4, #4]
 800c99a:	dd08      	ble.n	800c9ae <_svfprintf_r+0x100e>
 800c99c:	9803      	ldr	r0, [sp, #12]
 800c99e:	aa26      	add	r2, sp, #152	@ 0x98
 800c9a0:	4659      	mov	r1, fp
 800c9a2:	f001 fd05 	bl	800e3b0 <__ssprint_r>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f040 8175 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c9ac:	a929      	add	r1, sp, #164	@ 0xa4
 800c9ae:	3e10      	subs	r6, #16
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	e7e2      	b.n	800c97a <_svfprintf_r+0xfda>
 800c9b4:	9803      	ldr	r0, [sp, #12]
 800c9b6:	aa26      	add	r2, sp, #152	@ 0x98
 800c9b8:	4659      	mov	r1, fp
 800c9ba:	f001 fcf9 	bl	800e3b0 <__ssprint_r>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	f040 8169 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c9c4:	ac29      	add	r4, sp, #164	@ 0xa4
 800c9c6:	e76d      	b.n	800c8a4 <_svfprintf_r+0xf04>
 800c9c8:	2010      	movs	r0, #16
 800c9ca:	4403      	add	r3, r0
 800c9cc:	2a07      	cmp	r2, #7
 800c9ce:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800c9d2:	6060      	str	r0, [r4, #4]
 800c9d4:	dd08      	ble.n	800c9e8 <_svfprintf_r+0x1048>
 800c9d6:	9803      	ldr	r0, [sp, #12]
 800c9d8:	aa26      	add	r2, sp, #152	@ 0x98
 800c9da:	4659      	mov	r1, fp
 800c9dc:	f001 fce8 	bl	800e3b0 <__ssprint_r>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	f040 8158 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800c9e6:	a929      	add	r1, sp, #164	@ 0xa4
 800c9e8:	f1a8 0810 	sub.w	r8, r8, #16
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	e762      	b.n	800c8b6 <_svfprintf_r+0xf16>
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	e77c      	b.n	800c8ee <_svfprintf_r+0xf4e>
 800c9f4:	2f00      	cmp	r7, #0
 800c9f6:	d04a      	beq.n	800ca8e <_svfprintf_r+0x10ee>
 800c9f8:	3f01      	subs	r7, #1
 800c9fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ca02:	6063      	str	r3, [r4, #4]
 800ca04:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ca06:	4413      	add	r3, r2
 800ca08:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ca0a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	2b07      	cmp	r3, #7
 800ca10:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ca12:	dc43      	bgt.n	800ca9c <_svfprintf_r+0x10fc>
 800ca14:	3408      	adds	r4, #8
 800ca16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca18:	781a      	ldrb	r2, [r3, #0]
 800ca1a:	9b06      	ldr	r3, [sp, #24]
 800ca1c:	eba3 0308 	sub.w	r3, r3, r8
 800ca20:	429a      	cmp	r2, r3
 800ca22:	bfa8      	it	ge
 800ca24:	461a      	movge	r2, r3
 800ca26:	2a00      	cmp	r2, #0
 800ca28:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ca2a:	4691      	mov	r9, r2
 800ca2c:	dd09      	ble.n	800ca42 <_svfprintf_r+0x10a2>
 800ca2e:	4413      	add	r3, r2
 800ca30:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ca32:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ca34:	3301      	adds	r3, #1
 800ca36:	2b07      	cmp	r3, #7
 800ca38:	e9c4 8200 	strd	r8, r2, [r4]
 800ca3c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ca3e:	dc37      	bgt.n	800cab0 <_svfprintf_r+0x1110>
 800ca40:	3408      	adds	r4, #8
 800ca42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca44:	781e      	ldrb	r6, [r3, #0]
 800ca46:	f1b9 0f00 	cmp.w	r9, #0
 800ca4a:	bfa8      	it	ge
 800ca4c:	eba6 0609 	subge.w	r6, r6, r9
 800ca50:	2e00      	cmp	r6, #0
 800ca52:	dd18      	ble.n	800ca86 <_svfprintf_r+0x10e6>
 800ca54:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800ca58:	482f      	ldr	r0, [pc, #188]	@ (800cb18 <_svfprintf_r+0x1178>)
 800ca5a:	6020      	str	r0, [r4, #0]
 800ca5c:	2e10      	cmp	r6, #16
 800ca5e:	f103 0301 	add.w	r3, r3, #1
 800ca62:	f104 0108 	add.w	r1, r4, #8
 800ca66:	dc2d      	bgt.n	800cac4 <_svfprintf_r+0x1124>
 800ca68:	6066      	str	r6, [r4, #4]
 800ca6a:	2b07      	cmp	r3, #7
 800ca6c:	4416      	add	r6, r2
 800ca6e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800ca72:	dd3a      	ble.n	800caea <_svfprintf_r+0x114a>
 800ca74:	9803      	ldr	r0, [sp, #12]
 800ca76:	aa26      	add	r2, sp, #152	@ 0x98
 800ca78:	4659      	mov	r1, fp
 800ca7a:	f001 fc99 	bl	800e3b0 <__ssprint_r>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f040 8109 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800ca84:	ac29      	add	r4, sp, #164	@ 0xa4
 800ca86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	4498      	add	r8, r3
 800ca8c:	e733      	b.n	800c8f6 <_svfprintf_r+0xf56>
 800ca8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca90:	3b01      	subs	r3, #1
 800ca92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca94:	9b08      	ldr	r3, [sp, #32]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	9308      	str	r3, [sp, #32]
 800ca9a:	e7ae      	b.n	800c9fa <_svfprintf_r+0x105a>
 800ca9c:	9803      	ldr	r0, [sp, #12]
 800ca9e:	aa26      	add	r2, sp, #152	@ 0x98
 800caa0:	4659      	mov	r1, fp
 800caa2:	f001 fc85 	bl	800e3b0 <__ssprint_r>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f040 80f5 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800caac:	ac29      	add	r4, sp, #164	@ 0xa4
 800caae:	e7b2      	b.n	800ca16 <_svfprintf_r+0x1076>
 800cab0:	9803      	ldr	r0, [sp, #12]
 800cab2:	aa26      	add	r2, sp, #152	@ 0x98
 800cab4:	4659      	mov	r1, fp
 800cab6:	f001 fc7b 	bl	800e3b0 <__ssprint_r>
 800caba:	2800      	cmp	r0, #0
 800cabc:	f040 80eb 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800cac0:	ac29      	add	r4, sp, #164	@ 0xa4
 800cac2:	e7be      	b.n	800ca42 <_svfprintf_r+0x10a2>
 800cac4:	2010      	movs	r0, #16
 800cac6:	4402      	add	r2, r0
 800cac8:	2b07      	cmp	r3, #7
 800caca:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800cace:	6060      	str	r0, [r4, #4]
 800cad0:	dd08      	ble.n	800cae4 <_svfprintf_r+0x1144>
 800cad2:	9803      	ldr	r0, [sp, #12]
 800cad4:	aa26      	add	r2, sp, #152	@ 0x98
 800cad6:	4659      	mov	r1, fp
 800cad8:	f001 fc6a 	bl	800e3b0 <__ssprint_r>
 800cadc:	2800      	cmp	r0, #0
 800cade:	f040 80da 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800cae2:	a929      	add	r1, sp, #164	@ 0xa4
 800cae4:	3e10      	subs	r6, #16
 800cae6:	460c      	mov	r4, r1
 800cae8:	e7b4      	b.n	800ca54 <_svfprintf_r+0x10b4>
 800caea:	460c      	mov	r4, r1
 800caec:	e7cb      	b.n	800ca86 <_svfprintf_r+0x10e6>
 800caee:	9803      	ldr	r0, [sp, #12]
 800caf0:	aa26      	add	r2, sp, #152	@ 0x98
 800caf2:	4659      	mov	r1, fp
 800caf4:	f001 fc5c 	bl	800e3b0 <__ssprint_r>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	f040 80cc 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800cafe:	ac29      	add	r4, sp, #164	@ 0xa4
 800cb00:	e717      	b.n	800c932 <_svfprintf_r+0xf92>
 800cb02:	9803      	ldr	r0, [sp, #12]
 800cb04:	aa26      	add	r2, sp, #152	@ 0x98
 800cb06:	4659      	mov	r1, fp
 800cb08:	f001 fc52 	bl	800e3b0 <__ssprint_r>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	f040 80c2 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800cb12:	ac29      	add	r4, sp, #164	@ 0xa4
 800cb14:	e724      	b.n	800c960 <_svfprintf_r+0xfc0>
 800cb16:	bf00      	nop
 800cb18:	0800fa94 	.word	0x0800fa94
 800cb1c:	9904      	ldr	r1, [sp, #16]
 800cb1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb20:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800cb22:	2901      	cmp	r1, #1
 800cb24:	f103 0301 	add.w	r3, r3, #1
 800cb28:	f102 0201 	add.w	r2, r2, #1
 800cb2c:	f104 0608 	add.w	r6, r4, #8
 800cb30:	dc02      	bgt.n	800cb38 <_svfprintf_r+0x1198>
 800cb32:	07e9      	lsls	r1, r5, #31
 800cb34:	f140 8083 	bpl.w	800cc3e <_svfprintf_r+0x129e>
 800cb38:	2101      	movs	r1, #1
 800cb3a:	2a07      	cmp	r2, #7
 800cb3c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800cb40:	f8c4 9000 	str.w	r9, [r4]
 800cb44:	6061      	str	r1, [r4, #4]
 800cb46:	dd08      	ble.n	800cb5a <_svfprintf_r+0x11ba>
 800cb48:	9803      	ldr	r0, [sp, #12]
 800cb4a:	aa26      	add	r2, sp, #152	@ 0x98
 800cb4c:	4659      	mov	r1, fp
 800cb4e:	f001 fc2f 	bl	800e3b0 <__ssprint_r>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	f040 809f 	bne.w	800cc96 <_svfprintf_r+0x12f6>
 800cb58:	ae29      	add	r6, sp, #164	@ 0xa4
 800cb5a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cb5c:	6033      	str	r3, [r6, #0]
 800cb5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb62:	6073      	str	r3, [r6, #4]
 800cb64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800cb66:	4413      	add	r3, r2
 800cb68:	9328      	str	r3, [sp, #160]	@ 0xa0
 800cb6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	2b07      	cmp	r3, #7
 800cb70:	9327      	str	r3, [sp, #156]	@ 0x9c
 800cb72:	dc33      	bgt.n	800cbdc <_svfprintf_r+0x123c>
 800cb74:	3608      	adds	r6, #8
 800cb76:	9b04      	ldr	r3, [sp, #16]
 800cb78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cb7c:	1e5c      	subs	r4, r3, #1
 800cb7e:	2200      	movs	r2, #0
 800cb80:	2300      	movs	r3, #0
 800cb82:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800cb86:	f7f3 ff9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d12f      	bne.n	800cbee <_svfprintf_r+0x124e>
 800cb8e:	f109 0201 	add.w	r2, r9, #1
 800cb92:	e9c6 2400 	strd	r2, r4, [r6]
 800cb96:	9a04      	ldr	r2, [sp, #16]
 800cb98:	f108 0301 	add.w	r3, r8, #1
 800cb9c:	3f01      	subs	r7, #1
 800cb9e:	4417      	add	r7, r2
 800cba0:	2b07      	cmp	r3, #7
 800cba2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800cba6:	dd53      	ble.n	800cc50 <_svfprintf_r+0x12b0>
 800cba8:	9803      	ldr	r0, [sp, #12]
 800cbaa:	aa26      	add	r2, sp, #152	@ 0x98
 800cbac:	4659      	mov	r1, fp
 800cbae:	f001 fbff 	bl	800e3b0 <__ssprint_r>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d16f      	bne.n	800cc96 <_svfprintf_r+0x12f6>
 800cbb6:	ae29      	add	r6, sp, #164	@ 0xa4
 800cbb8:	ab22      	add	r3, sp, #136	@ 0x88
 800cbba:	6033      	str	r3, [r6, #0]
 800cbbc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800cbbe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800cbc0:	6073      	str	r3, [r6, #4]
 800cbc2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800cbc4:	4413      	add	r3, r2
 800cbc6:	9328      	str	r3, [sp, #160]	@ 0xa0
 800cbc8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800cbca:	3301      	adds	r3, #1
 800cbcc:	2b07      	cmp	r3, #7
 800cbce:	9327      	str	r3, [sp, #156]	@ 0x9c
 800cbd0:	f73f ada0 	bgt.w	800c714 <_svfprintf_r+0xd74>
 800cbd4:	f106 0408 	add.w	r4, r6, #8
 800cbd8:	f7ff baec 	b.w	800c1b4 <_svfprintf_r+0x814>
 800cbdc:	9803      	ldr	r0, [sp, #12]
 800cbde:	aa26      	add	r2, sp, #152	@ 0x98
 800cbe0:	4659      	mov	r1, fp
 800cbe2:	f001 fbe5 	bl	800e3b0 <__ssprint_r>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d155      	bne.n	800cc96 <_svfprintf_r+0x12f6>
 800cbea:	ae29      	add	r6, sp, #164	@ 0xa4
 800cbec:	e7c3      	b.n	800cb76 <_svfprintf_r+0x11d6>
 800cbee:	9b04      	ldr	r3, [sp, #16]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	dde1      	ble.n	800cbb8 <_svfprintf_r+0x1218>
 800cbf4:	4f57      	ldr	r7, [pc, #348]	@ (800cd54 <_svfprintf_r+0x13b4>)
 800cbf6:	f04f 0810 	mov.w	r8, #16
 800cbfa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800cbfe:	2c10      	cmp	r4, #16
 800cc00:	f103 0301 	add.w	r3, r3, #1
 800cc04:	f106 0108 	add.w	r1, r6, #8
 800cc08:	6037      	str	r7, [r6, #0]
 800cc0a:	dc07      	bgt.n	800cc1c <_svfprintf_r+0x127c>
 800cc0c:	6074      	str	r4, [r6, #4]
 800cc0e:	2b07      	cmp	r3, #7
 800cc10:	4414      	add	r4, r2
 800cc12:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800cc16:	dcc7      	bgt.n	800cba8 <_svfprintf_r+0x1208>
 800cc18:	460e      	mov	r6, r1
 800cc1a:	e7cd      	b.n	800cbb8 <_svfprintf_r+0x1218>
 800cc1c:	3210      	adds	r2, #16
 800cc1e:	2b07      	cmp	r3, #7
 800cc20:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800cc24:	f8c6 8004 	str.w	r8, [r6, #4]
 800cc28:	dd06      	ble.n	800cc38 <_svfprintf_r+0x1298>
 800cc2a:	9803      	ldr	r0, [sp, #12]
 800cc2c:	aa26      	add	r2, sp, #152	@ 0x98
 800cc2e:	4659      	mov	r1, fp
 800cc30:	f001 fbbe 	bl	800e3b0 <__ssprint_r>
 800cc34:	bb78      	cbnz	r0, 800cc96 <_svfprintf_r+0x12f6>
 800cc36:	a929      	add	r1, sp, #164	@ 0xa4
 800cc38:	3c10      	subs	r4, #16
 800cc3a:	460e      	mov	r6, r1
 800cc3c:	e7dd      	b.n	800cbfa <_svfprintf_r+0x125a>
 800cc3e:	2101      	movs	r1, #1
 800cc40:	2a07      	cmp	r2, #7
 800cc42:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800cc46:	f8c4 9000 	str.w	r9, [r4]
 800cc4a:	6061      	str	r1, [r4, #4]
 800cc4c:	ddb4      	ble.n	800cbb8 <_svfprintf_r+0x1218>
 800cc4e:	e7ab      	b.n	800cba8 <_svfprintf_r+0x1208>
 800cc50:	3608      	adds	r6, #8
 800cc52:	e7b1      	b.n	800cbb8 <_svfprintf_r+0x1218>
 800cc54:	460c      	mov	r4, r1
 800cc56:	f7ff baad 	b.w	800c1b4 <_svfprintf_r+0x814>
 800cc5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cc5e:	1a9d      	subs	r5, r3, r2
 800cc60:	2d00      	cmp	r5, #0
 800cc62:	f77f aaaa 	ble.w	800c1ba <_svfprintf_r+0x81a>
 800cc66:	4e3c      	ldr	r6, [pc, #240]	@ (800cd58 <_svfprintf_r+0x13b8>)
 800cc68:	2710      	movs	r7, #16
 800cc6a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800cc6e:	2d10      	cmp	r5, #16
 800cc70:	f103 0301 	add.w	r3, r3, #1
 800cc74:	6026      	str	r6, [r4, #0]
 800cc76:	dc18      	bgt.n	800ccaa <_svfprintf_r+0x130a>
 800cc78:	442a      	add	r2, r5
 800cc7a:	2b07      	cmp	r3, #7
 800cc7c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800cc80:	6065      	str	r5, [r4, #4]
 800cc82:	f77f aa9a 	ble.w	800c1ba <_svfprintf_r+0x81a>
 800cc86:	9803      	ldr	r0, [sp, #12]
 800cc88:	aa26      	add	r2, sp, #152	@ 0x98
 800cc8a:	4659      	mov	r1, fp
 800cc8c:	f001 fb90 	bl	800e3b0 <__ssprint_r>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	f43f aa92 	beq.w	800c1ba <_svfprintf_r+0x81a>
 800cc96:	f1ba 0f00 	cmp.w	sl, #0
 800cc9a:	f43f a89a 	beq.w	800bdd2 <_svfprintf_r+0x432>
 800cc9e:	9803      	ldr	r0, [sp, #12]
 800cca0:	4651      	mov	r1, sl
 800cca2:	f7fe fb75 	bl	800b390 <_free_r>
 800cca6:	f7ff b894 	b.w	800bdd2 <_svfprintf_r+0x432>
 800ccaa:	3210      	adds	r2, #16
 800ccac:	2b07      	cmp	r3, #7
 800ccae:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800ccb2:	6067      	str	r7, [r4, #4]
 800ccb4:	dc02      	bgt.n	800ccbc <_svfprintf_r+0x131c>
 800ccb6:	3408      	adds	r4, #8
 800ccb8:	3d10      	subs	r5, #16
 800ccba:	e7d6      	b.n	800cc6a <_svfprintf_r+0x12ca>
 800ccbc:	9803      	ldr	r0, [sp, #12]
 800ccbe:	aa26      	add	r2, sp, #152	@ 0x98
 800ccc0:	4659      	mov	r1, fp
 800ccc2:	f001 fb75 	bl	800e3b0 <__ssprint_r>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d1e5      	bne.n	800cc96 <_svfprintf_r+0x12f6>
 800ccca:	ac29      	add	r4, sp, #164	@ 0xa4
 800cccc:	e7f4      	b.n	800ccb8 <_svfprintf_r+0x1318>
 800ccce:	9803      	ldr	r0, [sp, #12]
 800ccd0:	4651      	mov	r1, sl
 800ccd2:	f7fe fb5d 	bl	800b390 <_free_r>
 800ccd6:	f7ff ba88 	b.w	800c1ea <_svfprintf_r+0x84a>
 800ccda:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f43f a878 	beq.w	800bdd2 <_svfprintf_r+0x432>
 800cce2:	9803      	ldr	r0, [sp, #12]
 800cce4:	aa26      	add	r2, sp, #152	@ 0x98
 800cce6:	4659      	mov	r1, fp
 800cce8:	f001 fb62 	bl	800e3b0 <__ssprint_r>
 800ccec:	f7ff b871 	b.w	800bdd2 <_svfprintf_r+0x432>
 800ccf0:	ea56 0207 	orrs.w	r2, r6, r7
 800ccf4:	9508      	str	r5, [sp, #32]
 800ccf6:	f43f ab7a 	beq.w	800c3ee <_svfprintf_r+0xa4e>
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	f43f abfb 	beq.w	800c4f6 <_svfprintf_r+0xb56>
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800cd06:	f43f ac3f 	beq.w	800c588 <_svfprintf_r+0xbe8>
 800cd0a:	f006 0307 	and.w	r3, r6, #7
 800cd0e:	08f6      	lsrs	r6, r6, #3
 800cd10:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800cd14:	08ff      	lsrs	r7, r7, #3
 800cd16:	3330      	adds	r3, #48	@ 0x30
 800cd18:	ea56 0107 	orrs.w	r1, r6, r7
 800cd1c:	464a      	mov	r2, r9
 800cd1e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800cd22:	d1f2      	bne.n	800cd0a <_svfprintf_r+0x136a>
 800cd24:	9908      	ldr	r1, [sp, #32]
 800cd26:	07c8      	lsls	r0, r1, #31
 800cd28:	d506      	bpl.n	800cd38 <_svfprintf_r+0x1398>
 800cd2a:	2b30      	cmp	r3, #48	@ 0x30
 800cd2c:	d004      	beq.n	800cd38 <_svfprintf_r+0x1398>
 800cd2e:	2330      	movs	r3, #48	@ 0x30
 800cd30:	f809 3c01 	strb.w	r3, [r9, #-1]
 800cd34:	f1a2 0902 	sub.w	r9, r2, #2
 800cd38:	ab52      	add	r3, sp, #328	@ 0x148
 800cd3a:	9d08      	ldr	r5, [sp, #32]
 800cd3c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800cd40:	f04f 0a00 	mov.w	sl, #0
 800cd44:	eba3 0809 	sub.w	r8, r3, r9
 800cd48:	4657      	mov	r7, sl
 800cd4a:	f8cd a020 	str.w	sl, [sp, #32]
 800cd4e:	4656      	mov	r6, sl
 800cd50:	f7ff b97c 	b.w	800c04c <_svfprintf_r+0x6ac>
 800cd54:	0800fa94 	.word	0x0800fa94
 800cd58:	0800faa4 	.word	0x0800faa4

0800cd5c <_fclose_r>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	4605      	mov	r5, r0
 800cd60:	460c      	mov	r4, r1
 800cd62:	b1b1      	cbz	r1, 800cd92 <_fclose_r+0x36>
 800cd64:	b118      	cbz	r0, 800cd6e <_fclose_r+0x12>
 800cd66:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cd68:	b90b      	cbnz	r3, 800cd6e <_fclose_r+0x12>
 800cd6a:	f7fe f995 	bl	800b098 <__sinit>
 800cd6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd70:	07de      	lsls	r6, r3, #31
 800cd72:	d405      	bmi.n	800cd80 <_fclose_r+0x24>
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	0598      	lsls	r0, r3, #22
 800cd78:	d402      	bmi.n	800cd80 <_fclose_r+0x24>
 800cd7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd7c:	f7fe faa0 	bl	800b2c0 <__retarget_lock_acquire_recursive>
 800cd80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd84:	b943      	cbnz	r3, 800cd98 <_fclose_r+0x3c>
 800cd86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd88:	07d9      	lsls	r1, r3, #31
 800cd8a:	d402      	bmi.n	800cd92 <_fclose_r+0x36>
 800cd8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd8e:	f7fe fa98 	bl	800b2c2 <__retarget_lock_release_recursive>
 800cd92:	2600      	movs	r6, #0
 800cd94:	4630      	mov	r0, r6
 800cd96:	bd70      	pop	{r4, r5, r6, pc}
 800cd98:	4621      	mov	r1, r4
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f000 f834 	bl	800ce08 <__sflush_r>
 800cda0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cda2:	4606      	mov	r6, r0
 800cda4:	b133      	cbz	r3, 800cdb4 <_fclose_r+0x58>
 800cda6:	69e1      	ldr	r1, [r4, #28]
 800cda8:	4628      	mov	r0, r5
 800cdaa:	4798      	blx	r3
 800cdac:	2800      	cmp	r0, #0
 800cdae:	bfb8      	it	lt
 800cdb0:	f04f 36ff 	movlt.w	r6, #4294967295
 800cdb4:	89a3      	ldrh	r3, [r4, #12]
 800cdb6:	061a      	lsls	r2, r3, #24
 800cdb8:	d503      	bpl.n	800cdc2 <_fclose_r+0x66>
 800cdba:	6921      	ldr	r1, [r4, #16]
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f7fe fae7 	bl	800b390 <_free_r>
 800cdc2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cdc4:	b141      	cbz	r1, 800cdd8 <_fclose_r+0x7c>
 800cdc6:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800cdca:	4299      	cmp	r1, r3
 800cdcc:	d002      	beq.n	800cdd4 <_fclose_r+0x78>
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f7fe fade 	bl	800b390 <_free_r>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	6323      	str	r3, [r4, #48]	@ 0x30
 800cdd8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cdda:	b121      	cbz	r1, 800cde6 <_fclose_r+0x8a>
 800cddc:	4628      	mov	r0, r5
 800cdde:	f7fe fad7 	bl	800b390 <_free_r>
 800cde2:	2300      	movs	r3, #0
 800cde4:	6463      	str	r3, [r4, #68]	@ 0x44
 800cde6:	f7fe f94b 	bl	800b080 <__sfp_lock_acquire>
 800cdea:	2300      	movs	r3, #0
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdf0:	07db      	lsls	r3, r3, #31
 800cdf2:	d402      	bmi.n	800cdfa <_fclose_r+0x9e>
 800cdf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdf6:	f7fe fa64 	bl	800b2c2 <__retarget_lock_release_recursive>
 800cdfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdfc:	f7fe fa5f 	bl	800b2be <__retarget_lock_close_recursive>
 800ce00:	f7fe f944 	bl	800b08c <__sfp_lock_release>
 800ce04:	e7c6      	b.n	800cd94 <_fclose_r+0x38>
	...

0800ce08 <__sflush_r>:
 800ce08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800ce12:	0706      	lsls	r6, r0, #28
 800ce14:	460c      	mov	r4, r1
 800ce16:	d457      	bmi.n	800cec8 <__sflush_r+0xc0>
 800ce18:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800ce1c:	818b      	strh	r3, [r1, #12]
 800ce1e:	684b      	ldr	r3, [r1, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	dc02      	bgt.n	800ce2a <__sflush_r+0x22>
 800ce24:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	dd4c      	ble.n	800cec4 <__sflush_r+0xbc>
 800ce2a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce2c:	2e00      	cmp	r6, #0
 800ce2e:	d049      	beq.n	800cec4 <__sflush_r+0xbc>
 800ce30:	2300      	movs	r3, #0
 800ce32:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800ce36:	682f      	ldr	r7, [r5, #0]
 800ce38:	69e1      	ldr	r1, [r4, #28]
 800ce3a:	602b      	str	r3, [r5, #0]
 800ce3c:	d034      	beq.n	800cea8 <__sflush_r+0xa0>
 800ce3e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	0759      	lsls	r1, r3, #29
 800ce44:	d505      	bpl.n	800ce52 <__sflush_r+0x4a>
 800ce46:	6863      	ldr	r3, [r4, #4]
 800ce48:	1ad2      	subs	r2, r2, r3
 800ce4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce4c:	b10b      	cbz	r3, 800ce52 <__sflush_r+0x4a>
 800ce4e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ce50:	1ad2      	subs	r2, r2, r3
 800ce52:	2300      	movs	r3, #0
 800ce54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce56:	69e1      	ldr	r1, [r4, #28]
 800ce58:	4628      	mov	r0, r5
 800ce5a:	47b0      	blx	r6
 800ce5c:	1c43      	adds	r3, r0, #1
 800ce5e:	d106      	bne.n	800ce6e <__sflush_r+0x66>
 800ce60:	682a      	ldr	r2, [r5, #0]
 800ce62:	2a1d      	cmp	r2, #29
 800ce64:	d848      	bhi.n	800cef8 <__sflush_r+0xf0>
 800ce66:	4b2b      	ldr	r3, [pc, #172]	@ (800cf14 <__sflush_r+0x10c>)
 800ce68:	4113      	asrs	r3, r2
 800ce6a:	07de      	lsls	r6, r3, #31
 800ce6c:	d444      	bmi.n	800cef8 <__sflush_r+0xf0>
 800ce6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce72:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ce76:	81a2      	strh	r2, [r4, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	6062      	str	r2, [r4, #4]
 800ce7c:	04d9      	lsls	r1, r3, #19
 800ce7e:	6922      	ldr	r2, [r4, #16]
 800ce80:	6022      	str	r2, [r4, #0]
 800ce82:	d504      	bpl.n	800ce8e <__sflush_r+0x86>
 800ce84:	1c42      	adds	r2, r0, #1
 800ce86:	d101      	bne.n	800ce8c <__sflush_r+0x84>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	b903      	cbnz	r3, 800ce8e <__sflush_r+0x86>
 800ce8c:	6520      	str	r0, [r4, #80]	@ 0x50
 800ce8e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ce90:	602f      	str	r7, [r5, #0]
 800ce92:	b1b9      	cbz	r1, 800cec4 <__sflush_r+0xbc>
 800ce94:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800ce98:	4299      	cmp	r1, r3
 800ce9a:	d002      	beq.n	800cea2 <__sflush_r+0x9a>
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	f7fe fa77 	bl	800b390 <_free_r>
 800cea2:	2300      	movs	r3, #0
 800cea4:	6323      	str	r3, [r4, #48]	@ 0x30
 800cea6:	e00d      	b.n	800cec4 <__sflush_r+0xbc>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	4628      	mov	r0, r5
 800ceac:	47b0      	blx	r6
 800ceae:	4602      	mov	r2, r0
 800ceb0:	1c50      	adds	r0, r2, #1
 800ceb2:	d1c5      	bne.n	800ce40 <__sflush_r+0x38>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d0c2      	beq.n	800ce40 <__sflush_r+0x38>
 800ceba:	2b1d      	cmp	r3, #29
 800cebc:	d001      	beq.n	800cec2 <__sflush_r+0xba>
 800cebe:	2b16      	cmp	r3, #22
 800cec0:	d11a      	bne.n	800cef8 <__sflush_r+0xf0>
 800cec2:	602f      	str	r7, [r5, #0]
 800cec4:	2000      	movs	r0, #0
 800cec6:	e01e      	b.n	800cf06 <__sflush_r+0xfe>
 800cec8:	690f      	ldr	r7, [r1, #16]
 800ceca:	2f00      	cmp	r7, #0
 800cecc:	d0fa      	beq.n	800cec4 <__sflush_r+0xbc>
 800cece:	0783      	lsls	r3, r0, #30
 800ced0:	680e      	ldr	r6, [r1, #0]
 800ced2:	bf08      	it	eq
 800ced4:	694b      	ldreq	r3, [r1, #20]
 800ced6:	600f      	str	r7, [r1, #0]
 800ced8:	bf18      	it	ne
 800ceda:	2300      	movne	r3, #0
 800cedc:	eba6 0807 	sub.w	r8, r6, r7
 800cee0:	608b      	str	r3, [r1, #8]
 800cee2:	f1b8 0f00 	cmp.w	r8, #0
 800cee6:	dded      	ble.n	800cec4 <__sflush_r+0xbc>
 800cee8:	69e1      	ldr	r1, [r4, #28]
 800ceea:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800ceec:	4643      	mov	r3, r8
 800ceee:	463a      	mov	r2, r7
 800cef0:	4628      	mov	r0, r5
 800cef2:	47b0      	blx	r6
 800cef4:	2800      	cmp	r0, #0
 800cef6:	dc08      	bgt.n	800cf0a <__sflush_r+0x102>
 800cef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cefc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf00:	81a3      	strh	r3, [r4, #12]
 800cf02:	f04f 30ff 	mov.w	r0, #4294967295
 800cf06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf0a:	4407      	add	r7, r0
 800cf0c:	eba8 0800 	sub.w	r8, r8, r0
 800cf10:	e7e7      	b.n	800cee2 <__sflush_r+0xda>
 800cf12:	bf00      	nop
 800cf14:	dfbffffe 	.word	0xdfbffffe

0800cf18 <_fflush_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	460c      	mov	r4, r1
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	b118      	cbz	r0, 800cf28 <_fflush_r+0x10>
 800cf20:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cf22:	b90b      	cbnz	r3, 800cf28 <_fflush_r+0x10>
 800cf24:	f7fe f8b8 	bl	800b098 <__sinit>
 800cf28:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800cf2c:	b1b8      	cbz	r0, 800cf5e <_fflush_r+0x46>
 800cf2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf30:	07db      	lsls	r3, r3, #31
 800cf32:	d404      	bmi.n	800cf3e <_fflush_r+0x26>
 800cf34:	0581      	lsls	r1, r0, #22
 800cf36:	d402      	bmi.n	800cf3e <_fflush_r+0x26>
 800cf38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf3a:	f7fe f9c1 	bl	800b2c0 <__retarget_lock_acquire_recursive>
 800cf3e:	4628      	mov	r0, r5
 800cf40:	4621      	mov	r1, r4
 800cf42:	f7ff ff61 	bl	800ce08 <__sflush_r>
 800cf46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf48:	07da      	lsls	r2, r3, #31
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	d405      	bmi.n	800cf5a <_fflush_r+0x42>
 800cf4e:	89a3      	ldrh	r3, [r4, #12]
 800cf50:	059b      	lsls	r3, r3, #22
 800cf52:	d402      	bmi.n	800cf5a <_fflush_r+0x42>
 800cf54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf56:	f7fe f9b4 	bl	800b2c2 <__retarget_lock_release_recursive>
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	bd38      	pop	{r3, r4, r5, pc}
 800cf5e:	4605      	mov	r5, r0
 800cf60:	e7fb      	b.n	800cf5a <_fflush_r+0x42>

0800cf62 <strncpy>:
 800cf62:	b510      	push	{r4, lr}
 800cf64:	3901      	subs	r1, #1
 800cf66:	4603      	mov	r3, r0
 800cf68:	b132      	cbz	r2, 800cf78 <strncpy+0x16>
 800cf6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf6e:	f803 4b01 	strb.w	r4, [r3], #1
 800cf72:	3a01      	subs	r2, #1
 800cf74:	2c00      	cmp	r4, #0
 800cf76:	d1f7      	bne.n	800cf68 <strncpy+0x6>
 800cf78:	441a      	add	r2, r3
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d100      	bne.n	800cf82 <strncpy+0x20>
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	f803 1b01 	strb.w	r1, [r3], #1
 800cf86:	e7f9      	b.n	800cf7c <strncpy+0x1a>

0800cf88 <_localeconv_r>:
 800cf88:	4800      	ldr	r0, [pc, #0]	@ (800cf8c <_localeconv_r+0x4>)
 800cf8a:	4770      	bx	lr
 800cf8c:	20000734 	.word	0x20000734

0800cf90 <_sbrk_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4d06      	ldr	r5, [pc, #24]	@ (800cfac <_sbrk_r+0x1c>)
 800cf94:	2300      	movs	r3, #0
 800cf96:	4604      	mov	r4, r0
 800cf98:	4608      	mov	r0, r1
 800cf9a:	602b      	str	r3, [r5, #0]
 800cf9c:	f7f4 fe24 	bl	8001be8 <_sbrk>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d102      	bne.n	800cfaa <_sbrk_r+0x1a>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	b103      	cbz	r3, 800cfaa <_sbrk_r+0x1a>
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	200026a8 	.word	0x200026a8

0800cfb0 <__libc_fini_array>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d07      	ldr	r5, [pc, #28]	@ (800cfd0 <__libc_fini_array+0x20>)
 800cfb4:	4c07      	ldr	r4, [pc, #28]	@ (800cfd4 <__libc_fini_array+0x24>)
 800cfb6:	1b64      	subs	r4, r4, r5
 800cfb8:	10a4      	asrs	r4, r4, #2
 800cfba:	b91c      	cbnz	r4, 800cfc4 <__libc_fini_array+0x14>
 800cfbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfc0:	f002 bd0e 	b.w	800f9e0 <_fini>
 800cfc4:	3c01      	subs	r4, #1
 800cfc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cfca:	4798      	blx	r3
 800cfcc:	e7f5      	b.n	800cfba <__libc_fini_array+0xa>
 800cfce:	bf00      	nop
 800cfd0:	0800fdf8 	.word	0x0800fdf8
 800cfd4:	0800fdfc 	.word	0x0800fdfc

0800cfd8 <sysconf>:
 800cfd8:	2808      	cmp	r0, #8
 800cfda:	b508      	push	{r3, lr}
 800cfdc:	d006      	beq.n	800cfec <sysconf+0x14>
 800cfde:	f7fe f943 	bl	800b268 <__errno>
 800cfe2:	2316      	movs	r3, #22
 800cfe4:	6003      	str	r3, [r0, #0]
 800cfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfea:	bd08      	pop	{r3, pc}
 800cfec:	2080      	movs	r0, #128	@ 0x80
 800cfee:	e7fc      	b.n	800cfea <sysconf+0x12>

0800cff0 <frexp>:
 800cff0:	b570      	push	{r4, r5, r6, lr}
 800cff2:	2100      	movs	r1, #0
 800cff4:	ec55 4b10 	vmov	r4, r5, d0
 800cff8:	6001      	str	r1, [r0, #0]
 800cffa:	4915      	ldr	r1, [pc, #84]	@ (800d050 <frexp+0x60>)
 800cffc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d000:	428a      	cmp	r2, r1
 800d002:	4606      	mov	r6, r0
 800d004:	462b      	mov	r3, r5
 800d006:	d820      	bhi.n	800d04a <frexp+0x5a>
 800d008:	4621      	mov	r1, r4
 800d00a:	4311      	orrs	r1, r2
 800d00c:	d01d      	beq.n	800d04a <frexp+0x5a>
 800d00e:	4911      	ldr	r1, [pc, #68]	@ (800d054 <frexp+0x64>)
 800d010:	4029      	ands	r1, r5
 800d012:	b961      	cbnz	r1, 800d02e <frexp+0x3e>
 800d014:	4b10      	ldr	r3, [pc, #64]	@ (800d058 <frexp+0x68>)
 800d016:	2200      	movs	r2, #0
 800d018:	4620      	mov	r0, r4
 800d01a:	4629      	mov	r1, r5
 800d01c:	f7f3 faec 	bl	80005f8 <__aeabi_dmul>
 800d020:	460b      	mov	r3, r1
 800d022:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800d026:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800d02a:	4604      	mov	r4, r0
 800d02c:	6031      	str	r1, [r6, #0]
 800d02e:	6831      	ldr	r1, [r6, #0]
 800d030:	1512      	asrs	r2, r2, #20
 800d032:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d036:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800d03a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d03e:	4411      	add	r1, r2
 800d040:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800d044:	6031      	str	r1, [r6, #0]
 800d046:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800d04a:	ec45 4b10 	vmov	d0, r4, r5
 800d04e:	bd70      	pop	{r4, r5, r6, pc}
 800d050:	7fefffff 	.word	0x7fefffff
 800d054:	7ff00000 	.word	0x7ff00000
 800d058:	43500000 	.word	0x43500000

0800d05c <__register_exitproc>:
 800d05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d060:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800d0d8 <__register_exitproc+0x7c>
 800d064:	4606      	mov	r6, r0
 800d066:	f8da 0000 	ldr.w	r0, [sl]
 800d06a:	4698      	mov	r8, r3
 800d06c:	460f      	mov	r7, r1
 800d06e:	4691      	mov	r9, r2
 800d070:	f7fe f926 	bl	800b2c0 <__retarget_lock_acquire_recursive>
 800d074:	4b16      	ldr	r3, [pc, #88]	@ (800d0d0 <__register_exitproc+0x74>)
 800d076:	681c      	ldr	r4, [r3, #0]
 800d078:	b90c      	cbnz	r4, 800d07e <__register_exitproc+0x22>
 800d07a:	4c16      	ldr	r4, [pc, #88]	@ (800d0d4 <__register_exitproc+0x78>)
 800d07c:	601c      	str	r4, [r3, #0]
 800d07e:	6865      	ldr	r5, [r4, #4]
 800d080:	f8da 0000 	ldr.w	r0, [sl]
 800d084:	2d1f      	cmp	r5, #31
 800d086:	dd05      	ble.n	800d094 <__register_exitproc+0x38>
 800d088:	f7fe f91b 	bl	800b2c2 <__retarget_lock_release_recursive>
 800d08c:	f04f 30ff 	mov.w	r0, #4294967295
 800d090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d094:	b19e      	cbz	r6, 800d0be <__register_exitproc+0x62>
 800d096:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800d09a:	2201      	movs	r2, #1
 800d09c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800d0a0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800d0a4:	40aa      	lsls	r2, r5
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800d0ac:	2e02      	cmp	r6, #2
 800d0ae:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800d0b2:	bf02      	ittt	eq
 800d0b4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800d0b8:	4313      	orreq	r3, r2
 800d0ba:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800d0be:	1c6b      	adds	r3, r5, #1
 800d0c0:	3502      	adds	r5, #2
 800d0c2:	6063      	str	r3, [r4, #4]
 800d0c4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800d0c8:	f7fe f8fb 	bl	800b2c2 <__retarget_lock_release_recursive>
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e7df      	b.n	800d090 <__register_exitproc+0x34>
 800d0d0:	200026b0 	.word	0x200026b0
 800d0d4:	200026e8 	.word	0x200026e8
 800d0d8:	20000230 	.word	0x20000230

0800d0dc <quorem>:
 800d0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e0:	6903      	ldr	r3, [r0, #16]
 800d0e2:	690c      	ldr	r4, [r1, #16]
 800d0e4:	42a3      	cmp	r3, r4
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	db7e      	blt.n	800d1e8 <quorem+0x10c>
 800d0ea:	3c01      	subs	r4, #1
 800d0ec:	f101 0814 	add.w	r8, r1, #20
 800d0f0:	00a3      	lsls	r3, r4, #2
 800d0f2:	f100 0514 	add.w	r5, r0, #20
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d106:	3301      	adds	r3, #1
 800d108:	429a      	cmp	r2, r3
 800d10a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d10e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d112:	d32e      	bcc.n	800d172 <quorem+0x96>
 800d114:	f04f 0a00 	mov.w	sl, #0
 800d118:	46c4      	mov	ip, r8
 800d11a:	46ae      	mov	lr, r5
 800d11c:	46d3      	mov	fp, sl
 800d11e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d122:	b298      	uxth	r0, r3
 800d124:	fb06 a000 	mla	r0, r6, r0, sl
 800d128:	0c02      	lsrs	r2, r0, #16
 800d12a:	0c1b      	lsrs	r3, r3, #16
 800d12c:	fb06 2303 	mla	r3, r6, r3, r2
 800d130:	f8de 2000 	ldr.w	r2, [lr]
 800d134:	b280      	uxth	r0, r0
 800d136:	b292      	uxth	r2, r2
 800d138:	1a12      	subs	r2, r2, r0
 800d13a:	445a      	add	r2, fp
 800d13c:	f8de 0000 	ldr.w	r0, [lr]
 800d140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d144:	b29b      	uxth	r3, r3
 800d146:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d14a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d14e:	b292      	uxth	r2, r2
 800d150:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d154:	45e1      	cmp	r9, ip
 800d156:	f84e 2b04 	str.w	r2, [lr], #4
 800d15a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d15e:	d2de      	bcs.n	800d11e <quorem+0x42>
 800d160:	9b00      	ldr	r3, [sp, #0]
 800d162:	58eb      	ldr	r3, [r5, r3]
 800d164:	b92b      	cbnz	r3, 800d172 <quorem+0x96>
 800d166:	9b01      	ldr	r3, [sp, #4]
 800d168:	3b04      	subs	r3, #4
 800d16a:	429d      	cmp	r5, r3
 800d16c:	461a      	mov	r2, r3
 800d16e:	d32f      	bcc.n	800d1d0 <quorem+0xf4>
 800d170:	613c      	str	r4, [r7, #16]
 800d172:	4638      	mov	r0, r7
 800d174:	f001 f814 	bl	800e1a0 <__mcmp>
 800d178:	2800      	cmp	r0, #0
 800d17a:	db25      	blt.n	800d1c8 <quorem+0xec>
 800d17c:	4629      	mov	r1, r5
 800d17e:	2000      	movs	r0, #0
 800d180:	f858 2b04 	ldr.w	r2, [r8], #4
 800d184:	f8d1 c000 	ldr.w	ip, [r1]
 800d188:	fa1f fe82 	uxth.w	lr, r2
 800d18c:	fa1f f38c 	uxth.w	r3, ip
 800d190:	eba3 030e 	sub.w	r3, r3, lr
 800d194:	4403      	add	r3, r0
 800d196:	0c12      	lsrs	r2, r2, #16
 800d198:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d19c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1a6:	45c1      	cmp	r9, r8
 800d1a8:	f841 3b04 	str.w	r3, [r1], #4
 800d1ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d1b0:	d2e6      	bcs.n	800d180 <quorem+0xa4>
 800d1b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1ba:	b922      	cbnz	r2, 800d1c6 <quorem+0xea>
 800d1bc:	3b04      	subs	r3, #4
 800d1be:	429d      	cmp	r5, r3
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	d30b      	bcc.n	800d1dc <quorem+0x100>
 800d1c4:	613c      	str	r4, [r7, #16]
 800d1c6:	3601      	adds	r6, #1
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	b003      	add	sp, #12
 800d1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d0:	6812      	ldr	r2, [r2, #0]
 800d1d2:	3b04      	subs	r3, #4
 800d1d4:	2a00      	cmp	r2, #0
 800d1d6:	d1cb      	bne.n	800d170 <quorem+0x94>
 800d1d8:	3c01      	subs	r4, #1
 800d1da:	e7c6      	b.n	800d16a <quorem+0x8e>
 800d1dc:	6812      	ldr	r2, [r2, #0]
 800d1de:	3b04      	subs	r3, #4
 800d1e0:	2a00      	cmp	r2, #0
 800d1e2:	d1ef      	bne.n	800d1c4 <quorem+0xe8>
 800d1e4:	3c01      	subs	r4, #1
 800d1e6:	e7ea      	b.n	800d1be <quorem+0xe2>
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	e7ee      	b.n	800d1ca <quorem+0xee>
 800d1ec:	0000      	movs	r0, r0
	...

0800d1f0 <_dtoa_r>:
 800d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f4:	b099      	sub	sp, #100	@ 0x64
 800d1f6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800d1fc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800d1fe:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d200:	920e      	str	r2, [sp, #56]	@ 0x38
 800d202:	ec55 4b10 	vmov	r4, r5, d0
 800d206:	4683      	mov	fp, r0
 800d208:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d20a:	b149      	cbz	r1, 800d220 <_dtoa_r+0x30>
 800d20c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d20e:	604a      	str	r2, [r1, #4]
 800d210:	2301      	movs	r3, #1
 800d212:	4093      	lsls	r3, r2
 800d214:	608b      	str	r3, [r1, #8]
 800d216:	f000 fdbc 	bl	800dd92 <_Bfree>
 800d21a:	2300      	movs	r3, #0
 800d21c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800d220:	1e2b      	subs	r3, r5, #0
 800d222:	bfb9      	ittee	lt
 800d224:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d228:	9303      	strlt	r3, [sp, #12]
 800d22a:	2300      	movge	r3, #0
 800d22c:	6033      	strge	r3, [r6, #0]
 800d22e:	9f03      	ldr	r7, [sp, #12]
 800d230:	4b97      	ldr	r3, [pc, #604]	@ (800d490 <_dtoa_r+0x2a0>)
 800d232:	bfbc      	itt	lt
 800d234:	2201      	movlt	r2, #1
 800d236:	6032      	strlt	r2, [r6, #0]
 800d238:	43bb      	bics	r3, r7
 800d23a:	d114      	bne.n	800d266 <_dtoa_r+0x76>
 800d23c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d23e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d248:	4323      	orrs	r3, r4
 800d24a:	f000 854c 	beq.w	800dce6 <_dtoa_r+0xaf6>
 800d24e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d250:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d4a8 <_dtoa_r+0x2b8>
 800d254:	b11b      	cbz	r3, 800d25e <_dtoa_r+0x6e>
 800d256:	f10a 0303 	add.w	r3, sl, #3
 800d25a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	4650      	mov	r0, sl
 800d260:	b019      	add	sp, #100	@ 0x64
 800d262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d26a:	2200      	movs	r2, #0
 800d26c:	ec51 0b17 	vmov	r0, r1, d7
 800d270:	2300      	movs	r3, #0
 800d272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d276:	f7f3 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800d27a:	4680      	mov	r8, r0
 800d27c:	b150      	cbz	r0, 800d294 <_dtoa_r+0xa4>
 800d27e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d280:	2301      	movs	r3, #1
 800d282:	6013      	str	r3, [r2, #0]
 800d284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d286:	b113      	cbz	r3, 800d28e <_dtoa_r+0x9e>
 800d288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d28a:	4b82      	ldr	r3, [pc, #520]	@ (800d494 <_dtoa_r+0x2a4>)
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800d4ac <_dtoa_r+0x2bc>
 800d292:	e7e4      	b.n	800d25e <_dtoa_r+0x6e>
 800d294:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d298:	aa16      	add	r2, sp, #88	@ 0x58
 800d29a:	a917      	add	r1, sp, #92	@ 0x5c
 800d29c:	4658      	mov	r0, fp
 800d29e:	f001 f82f 	bl	800e300 <__d2b>
 800d2a2:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d2a6:	4681      	mov	r9, r0
 800d2a8:	2e00      	cmp	r6, #0
 800d2aa:	d077      	beq.n	800d39c <_dtoa_r+0x1ac>
 800d2ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d2ae:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d2b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2ba:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d2be:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d2c2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	4b73      	ldr	r3, [pc, #460]	@ (800d498 <_dtoa_r+0x2a8>)
 800d2cc:	f7f2 ffdc 	bl	8000288 <__aeabi_dsub>
 800d2d0:	a369      	add	r3, pc, #420	@ (adr r3, 800d478 <_dtoa_r+0x288>)
 800d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d6:	f7f3 f98f 	bl	80005f8 <__aeabi_dmul>
 800d2da:	a369      	add	r3, pc, #420	@ (adr r3, 800d480 <_dtoa_r+0x290>)
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	f7f2 ffd4 	bl	800028c <__adddf3>
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	460d      	mov	r5, r1
 800d2ea:	f7f3 f91b 	bl	8000524 <__aeabi_i2d>
 800d2ee:	a366      	add	r3, pc, #408	@ (adr r3, 800d488 <_dtoa_r+0x298>)
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	f7f3 f980 	bl	80005f8 <__aeabi_dmul>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	4629      	mov	r1, r5
 800d300:	f7f2 ffc4 	bl	800028c <__adddf3>
 800d304:	4604      	mov	r4, r0
 800d306:	460d      	mov	r5, r1
 800d308:	f7f3 fc26 	bl	8000b58 <__aeabi_d2iz>
 800d30c:	2200      	movs	r2, #0
 800d30e:	4607      	mov	r7, r0
 800d310:	2300      	movs	r3, #0
 800d312:	4620      	mov	r0, r4
 800d314:	4629      	mov	r1, r5
 800d316:	f7f3 fbe1 	bl	8000adc <__aeabi_dcmplt>
 800d31a:	b140      	cbz	r0, 800d32e <_dtoa_r+0x13e>
 800d31c:	4638      	mov	r0, r7
 800d31e:	f7f3 f901 	bl	8000524 <__aeabi_i2d>
 800d322:	4622      	mov	r2, r4
 800d324:	462b      	mov	r3, r5
 800d326:	f7f3 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800d32a:	b900      	cbnz	r0, 800d32e <_dtoa_r+0x13e>
 800d32c:	3f01      	subs	r7, #1
 800d32e:	2f16      	cmp	r7, #22
 800d330:	d851      	bhi.n	800d3d6 <_dtoa_r+0x1e6>
 800d332:	4b5a      	ldr	r3, [pc, #360]	@ (800d49c <_dtoa_r+0x2ac>)
 800d334:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d340:	f7f3 fbcc 	bl	8000adc <__aeabi_dcmplt>
 800d344:	2800      	cmp	r0, #0
 800d346:	d048      	beq.n	800d3da <_dtoa_r+0x1ea>
 800d348:	3f01      	subs	r7, #1
 800d34a:	2300      	movs	r3, #0
 800d34c:	9312      	str	r3, [sp, #72]	@ 0x48
 800d34e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d350:	1b9b      	subs	r3, r3, r6
 800d352:	1e5a      	subs	r2, r3, #1
 800d354:	bf44      	itt	mi
 800d356:	f1c3 0801 	rsbmi	r8, r3, #1
 800d35a:	2300      	movmi	r3, #0
 800d35c:	9208      	str	r2, [sp, #32]
 800d35e:	bf54      	ite	pl
 800d360:	f04f 0800 	movpl.w	r8, #0
 800d364:	9308      	strmi	r3, [sp, #32]
 800d366:	2f00      	cmp	r7, #0
 800d368:	db39      	blt.n	800d3de <_dtoa_r+0x1ee>
 800d36a:	9b08      	ldr	r3, [sp, #32]
 800d36c:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d36e:	443b      	add	r3, r7
 800d370:	9308      	str	r3, [sp, #32]
 800d372:	2300      	movs	r3, #0
 800d374:	930a      	str	r3, [sp, #40]	@ 0x28
 800d376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d378:	2b09      	cmp	r3, #9
 800d37a:	d865      	bhi.n	800d448 <_dtoa_r+0x258>
 800d37c:	2b05      	cmp	r3, #5
 800d37e:	bfc4      	itt	gt
 800d380:	3b04      	subgt	r3, #4
 800d382:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d386:	f1a3 0302 	sub.w	r3, r3, #2
 800d38a:	bfcc      	ite	gt
 800d38c:	2400      	movgt	r4, #0
 800d38e:	2401      	movle	r4, #1
 800d390:	2b03      	cmp	r3, #3
 800d392:	d864      	bhi.n	800d45e <_dtoa_r+0x26e>
 800d394:	e8df f003 	tbb	[pc, r3]
 800d398:	5635372a 	.word	0x5635372a
 800d39c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d3a0:	441e      	add	r6, r3
 800d3a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d3a6:	2b20      	cmp	r3, #32
 800d3a8:	bfc1      	itttt	gt
 800d3aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d3ae:	409f      	lslgt	r7, r3
 800d3b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d3b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d3b8:	bfd6      	itet	le
 800d3ba:	f1c3 0320 	rsble	r3, r3, #32
 800d3be:	ea47 0003 	orrgt.w	r0, r7, r3
 800d3c2:	fa04 f003 	lslle.w	r0, r4, r3
 800d3c6:	f7f3 f89d 	bl	8000504 <__aeabi_ui2d>
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d3d0:	3e01      	subs	r6, #1
 800d3d2:	9214      	str	r2, [sp, #80]	@ 0x50
 800d3d4:	e777      	b.n	800d2c6 <_dtoa_r+0xd6>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e7b8      	b.n	800d34c <_dtoa_r+0x15c>
 800d3da:	9012      	str	r0, [sp, #72]	@ 0x48
 800d3dc:	e7b7      	b.n	800d34e <_dtoa_r+0x15e>
 800d3de:	427b      	negs	r3, r7
 800d3e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	eba8 0807 	sub.w	r8, r8, r7
 800d3e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3ea:	e7c4      	b.n	800d376 <_dtoa_r+0x186>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	dc36      	bgt.n	800d464 <_dtoa_r+0x274>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	9307      	str	r3, [sp, #28]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800d400:	e00b      	b.n	800d41a <_dtoa_r+0x22a>
 800d402:	2301      	movs	r3, #1
 800d404:	e7f3      	b.n	800d3ee <_dtoa_r+0x1fe>
 800d406:	2300      	movs	r3, #0
 800d408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d40c:	18fb      	adds	r3, r7, r3
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	3301      	adds	r3, #1
 800d412:	2b01      	cmp	r3, #1
 800d414:	9307      	str	r3, [sp, #28]
 800d416:	bfb8      	it	lt
 800d418:	2301      	movlt	r3, #1
 800d41a:	2100      	movs	r1, #0
 800d41c:	2204      	movs	r2, #4
 800d41e:	f102 0014 	add.w	r0, r2, #20
 800d422:	4298      	cmp	r0, r3
 800d424:	d922      	bls.n	800d46c <_dtoa_r+0x27c>
 800d426:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800d42a:	4658      	mov	r0, fp
 800d42c:	f000 fc8c 	bl	800dd48 <_Balloc>
 800d430:	4682      	mov	sl, r0
 800d432:	2800      	cmp	r0, #0
 800d434:	d13c      	bne.n	800d4b0 <_dtoa_r+0x2c0>
 800d436:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a0 <_dtoa_r+0x2b0>)
 800d438:	4602      	mov	r2, r0
 800d43a:	f240 11af 	movw	r1, #431	@ 0x1af
 800d43e:	4819      	ldr	r0, [pc, #100]	@ (800d4a4 <_dtoa_r+0x2b4>)
 800d440:	f001 f862 	bl	800e508 <__assert_func>
 800d444:	2301      	movs	r3, #1
 800d446:	e7df      	b.n	800d408 <_dtoa_r+0x218>
 800d448:	2401      	movs	r4, #1
 800d44a:	2300      	movs	r3, #0
 800d44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d44e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d450:	f04f 33ff 	mov.w	r3, #4294967295
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	9307      	str	r3, [sp, #28]
 800d458:	2200      	movs	r2, #0
 800d45a:	2312      	movs	r3, #18
 800d45c:	e7cf      	b.n	800d3fe <_dtoa_r+0x20e>
 800d45e:	2301      	movs	r3, #1
 800d460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d462:	e7f5      	b.n	800d450 <_dtoa_r+0x260>
 800d464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	9307      	str	r3, [sp, #28]
 800d46a:	e7d6      	b.n	800d41a <_dtoa_r+0x22a>
 800d46c:	3101      	adds	r1, #1
 800d46e:	0052      	lsls	r2, r2, #1
 800d470:	e7d5      	b.n	800d41e <_dtoa_r+0x22e>
 800d472:	bf00      	nop
 800d474:	f3af 8000 	nop.w
 800d478:	636f4361 	.word	0x636f4361
 800d47c:	3fd287a7 	.word	0x3fd287a7
 800d480:	8b60c8b3 	.word	0x8b60c8b3
 800d484:	3fc68a28 	.word	0x3fc68a28
 800d488:	509f79fb 	.word	0x509f79fb
 800d48c:	3fd34413 	.word	0x3fd34413
 800d490:	7ff00000 	.word	0x7ff00000
 800d494:	0800fa93 	.word	0x0800fa93
 800d498:	3ff80000 	.word	0x3ff80000
 800d49c:	0800fbb8 	.word	0x0800fbb8
 800d4a0:	0800fac1 	.word	0x0800fac1
 800d4a4:	0800fad2 	.word	0x0800fad2
 800d4a8:	0800fabd 	.word	0x0800fabd
 800d4ac:	0800fa92 	.word	0x0800fa92
 800d4b0:	9b07      	ldr	r3, [sp, #28]
 800d4b2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800d4b6:	2b0e      	cmp	r3, #14
 800d4b8:	f200 80a4 	bhi.w	800d604 <_dtoa_r+0x414>
 800d4bc:	2c00      	cmp	r4, #0
 800d4be:	f000 80a1 	beq.w	800d604 <_dtoa_r+0x414>
 800d4c2:	2f00      	cmp	r7, #0
 800d4c4:	dd33      	ble.n	800d52e <_dtoa_r+0x33e>
 800d4c6:	4bae      	ldr	r3, [pc, #696]	@ (800d780 <_dtoa_r+0x590>)
 800d4c8:	f007 020f 	and.w	r2, r7, #15
 800d4cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4d0:	ed93 7b00 	vldr	d7, [r3]
 800d4d4:	05f8      	lsls	r0, r7, #23
 800d4d6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d4da:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d4de:	d516      	bpl.n	800d50e <_dtoa_r+0x31e>
 800d4e0:	4ba8      	ldr	r3, [pc, #672]	@ (800d784 <_dtoa_r+0x594>)
 800d4e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4ea:	f7f3 f9af 	bl	800084c <__aeabi_ddiv>
 800d4ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4f2:	f004 040f 	and.w	r4, r4, #15
 800d4f6:	2603      	movs	r6, #3
 800d4f8:	4da2      	ldr	r5, [pc, #648]	@ (800d784 <_dtoa_r+0x594>)
 800d4fa:	b954      	cbnz	r4, 800d512 <_dtoa_r+0x322>
 800d4fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d504:	f7f3 f9a2 	bl	800084c <__aeabi_ddiv>
 800d508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d50c:	e028      	b.n	800d560 <_dtoa_r+0x370>
 800d50e:	2602      	movs	r6, #2
 800d510:	e7f2      	b.n	800d4f8 <_dtoa_r+0x308>
 800d512:	07e1      	lsls	r1, r4, #31
 800d514:	d508      	bpl.n	800d528 <_dtoa_r+0x338>
 800d516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d51a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d51e:	f7f3 f86b 	bl	80005f8 <__aeabi_dmul>
 800d522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d526:	3601      	adds	r6, #1
 800d528:	1064      	asrs	r4, r4, #1
 800d52a:	3508      	adds	r5, #8
 800d52c:	e7e5      	b.n	800d4fa <_dtoa_r+0x30a>
 800d52e:	f000 80d2 	beq.w	800d6d6 <_dtoa_r+0x4e6>
 800d532:	427c      	negs	r4, r7
 800d534:	4b92      	ldr	r3, [pc, #584]	@ (800d780 <_dtoa_r+0x590>)
 800d536:	4d93      	ldr	r5, [pc, #588]	@ (800d784 <_dtoa_r+0x594>)
 800d538:	f004 020f 	and.w	r2, r4, #15
 800d53c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d548:	f7f3 f856 	bl	80005f8 <__aeabi_dmul>
 800d54c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d550:	1124      	asrs	r4, r4, #4
 800d552:	2300      	movs	r3, #0
 800d554:	2602      	movs	r6, #2
 800d556:	2c00      	cmp	r4, #0
 800d558:	f040 80b2 	bne.w	800d6c0 <_dtoa_r+0x4d0>
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1d3      	bne.n	800d508 <_dtoa_r+0x318>
 800d560:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d562:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 80b7 	beq.w	800d6da <_dtoa_r+0x4ea>
 800d56c:	4b86      	ldr	r3, [pc, #536]	@ (800d788 <_dtoa_r+0x598>)
 800d56e:	2200      	movs	r2, #0
 800d570:	4620      	mov	r0, r4
 800d572:	4629      	mov	r1, r5
 800d574:	f7f3 fab2 	bl	8000adc <__aeabi_dcmplt>
 800d578:	2800      	cmp	r0, #0
 800d57a:	f000 80ae 	beq.w	800d6da <_dtoa_r+0x4ea>
 800d57e:	9b07      	ldr	r3, [sp, #28]
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 80aa 	beq.w	800d6da <_dtoa_r+0x4ea>
 800d586:	9b00      	ldr	r3, [sp, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dd37      	ble.n	800d5fc <_dtoa_r+0x40c>
 800d58c:	1e7b      	subs	r3, r7, #1
 800d58e:	9304      	str	r3, [sp, #16]
 800d590:	4620      	mov	r0, r4
 800d592:	4b7e      	ldr	r3, [pc, #504]	@ (800d78c <_dtoa_r+0x59c>)
 800d594:	2200      	movs	r2, #0
 800d596:	4629      	mov	r1, r5
 800d598:	f7f3 f82e 	bl	80005f8 <__aeabi_dmul>
 800d59c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5a0:	9c00      	ldr	r4, [sp, #0]
 800d5a2:	3601      	adds	r6, #1
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f7f2 ffbd 	bl	8000524 <__aeabi_i2d>
 800d5aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5ae:	f7f3 f823 	bl	80005f8 <__aeabi_dmul>
 800d5b2:	4b77      	ldr	r3, [pc, #476]	@ (800d790 <_dtoa_r+0x5a0>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f7f2 fe69 	bl	800028c <__adddf3>
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d5c0:	2c00      	cmp	r4, #0
 800d5c2:	f040 808d 	bne.w	800d6e0 <_dtoa_r+0x4f0>
 800d5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ca:	4b72      	ldr	r3, [pc, #456]	@ (800d794 <_dtoa_r+0x5a4>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f7f2 fe5b 	bl	8000288 <__aeabi_dsub>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5da:	462a      	mov	r2, r5
 800d5dc:	4633      	mov	r3, r6
 800d5de:	f7f3 fa9b 	bl	8000b18 <__aeabi_dcmpgt>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	f040 828c 	bne.w	800db00 <_dtoa_r+0x910>
 800d5e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ec:	462a      	mov	r2, r5
 800d5ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d5f2:	f7f3 fa73 	bl	8000adc <__aeabi_dcmplt>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	f040 8129 	bne.w	800d84e <_dtoa_r+0x65e>
 800d5fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d600:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d604:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d606:	2b00      	cmp	r3, #0
 800d608:	f2c0 815b 	blt.w	800d8c2 <_dtoa_r+0x6d2>
 800d60c:	2f0e      	cmp	r7, #14
 800d60e:	f300 8158 	bgt.w	800d8c2 <_dtoa_r+0x6d2>
 800d612:	4b5b      	ldr	r3, [pc, #364]	@ (800d780 <_dtoa_r+0x590>)
 800d614:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d618:	ed93 7b00 	vldr	d7, [r3]
 800d61c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d61e:	2b00      	cmp	r3, #0
 800d620:	ed8d 7b00 	vstr	d7, [sp]
 800d624:	da03      	bge.n	800d62e <_dtoa_r+0x43e>
 800d626:	9b07      	ldr	r3, [sp, #28]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f340 8102 	ble.w	800d832 <_dtoa_r+0x642>
 800d62e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d632:	4656      	mov	r6, sl
 800d634:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d638:	4620      	mov	r0, r4
 800d63a:	4629      	mov	r1, r5
 800d63c:	f7f3 f906 	bl	800084c <__aeabi_ddiv>
 800d640:	f7f3 fa8a 	bl	8000b58 <__aeabi_d2iz>
 800d644:	4680      	mov	r8, r0
 800d646:	f7f2 ff6d 	bl	8000524 <__aeabi_i2d>
 800d64a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d64e:	f7f2 ffd3 	bl	80005f8 <__aeabi_dmul>
 800d652:	4602      	mov	r2, r0
 800d654:	460b      	mov	r3, r1
 800d656:	4620      	mov	r0, r4
 800d658:	4629      	mov	r1, r5
 800d65a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d65e:	f7f2 fe13 	bl	8000288 <__aeabi_dsub>
 800d662:	f806 4b01 	strb.w	r4, [r6], #1
 800d666:	9d07      	ldr	r5, [sp, #28]
 800d668:	eba6 040a 	sub.w	r4, r6, sl
 800d66c:	42a5      	cmp	r5, r4
 800d66e:	4602      	mov	r2, r0
 800d670:	460b      	mov	r3, r1
 800d672:	f040 8118 	bne.w	800d8a6 <_dtoa_r+0x6b6>
 800d676:	f7f2 fe09 	bl	800028c <__adddf3>
 800d67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d67e:	4604      	mov	r4, r0
 800d680:	460d      	mov	r5, r1
 800d682:	f7f3 fa49 	bl	8000b18 <__aeabi_dcmpgt>
 800d686:	2800      	cmp	r0, #0
 800d688:	f040 80fa 	bne.w	800d880 <_dtoa_r+0x690>
 800d68c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d690:	4620      	mov	r0, r4
 800d692:	4629      	mov	r1, r5
 800d694:	f7f3 fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 800d698:	b118      	cbz	r0, 800d6a2 <_dtoa_r+0x4b2>
 800d69a:	f018 0f01 	tst.w	r8, #1
 800d69e:	f040 80ef 	bne.w	800d880 <_dtoa_r+0x690>
 800d6a2:	4649      	mov	r1, r9
 800d6a4:	4658      	mov	r0, fp
 800d6a6:	f000 fb74 	bl	800dd92 <_Bfree>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	7033      	strb	r3, [r6, #0]
 800d6ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d6b0:	3701      	adds	r7, #1
 800d6b2:	601f      	str	r7, [r3, #0]
 800d6b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f43f add1 	beq.w	800d25e <_dtoa_r+0x6e>
 800d6bc:	601e      	str	r6, [r3, #0]
 800d6be:	e5ce      	b.n	800d25e <_dtoa_r+0x6e>
 800d6c0:	07e2      	lsls	r2, r4, #31
 800d6c2:	d505      	bpl.n	800d6d0 <_dtoa_r+0x4e0>
 800d6c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6c8:	f7f2 ff96 	bl	80005f8 <__aeabi_dmul>
 800d6cc:	3601      	adds	r6, #1
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	1064      	asrs	r4, r4, #1
 800d6d2:	3508      	adds	r5, #8
 800d6d4:	e73f      	b.n	800d556 <_dtoa_r+0x366>
 800d6d6:	2602      	movs	r6, #2
 800d6d8:	e742      	b.n	800d560 <_dtoa_r+0x370>
 800d6da:	9c07      	ldr	r4, [sp, #28]
 800d6dc:	9704      	str	r7, [sp, #16]
 800d6de:	e761      	b.n	800d5a4 <_dtoa_r+0x3b4>
 800d6e0:	4b27      	ldr	r3, [pc, #156]	@ (800d780 <_dtoa_r+0x590>)
 800d6e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6ec:	4454      	add	r4, sl
 800d6ee:	2900      	cmp	r1, #0
 800d6f0:	d054      	beq.n	800d79c <_dtoa_r+0x5ac>
 800d6f2:	4929      	ldr	r1, [pc, #164]	@ (800d798 <_dtoa_r+0x5a8>)
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	f7f3 f8a9 	bl	800084c <__aeabi_ddiv>
 800d6fa:	4633      	mov	r3, r6
 800d6fc:	462a      	mov	r2, r5
 800d6fe:	f7f2 fdc3 	bl	8000288 <__aeabi_dsub>
 800d702:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d706:	4656      	mov	r6, sl
 800d708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d70c:	f7f3 fa24 	bl	8000b58 <__aeabi_d2iz>
 800d710:	4605      	mov	r5, r0
 800d712:	f7f2 ff07 	bl	8000524 <__aeabi_i2d>
 800d716:	4602      	mov	r2, r0
 800d718:	460b      	mov	r3, r1
 800d71a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d71e:	f7f2 fdb3 	bl	8000288 <__aeabi_dsub>
 800d722:	3530      	adds	r5, #48	@ 0x30
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d72c:	f806 5b01 	strb.w	r5, [r6], #1
 800d730:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d734:	f7f3 f9d2 	bl	8000adc <__aeabi_dcmplt>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d172      	bne.n	800d822 <_dtoa_r+0x632>
 800d73c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d740:	4911      	ldr	r1, [pc, #68]	@ (800d788 <_dtoa_r+0x598>)
 800d742:	2000      	movs	r0, #0
 800d744:	f7f2 fda0 	bl	8000288 <__aeabi_dsub>
 800d748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d74c:	f7f3 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800d750:	2800      	cmp	r0, #0
 800d752:	f040 8096 	bne.w	800d882 <_dtoa_r+0x692>
 800d756:	42a6      	cmp	r6, r4
 800d758:	f43f af50 	beq.w	800d5fc <_dtoa_r+0x40c>
 800d75c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d760:	4b0a      	ldr	r3, [pc, #40]	@ (800d78c <_dtoa_r+0x59c>)
 800d762:	2200      	movs	r2, #0
 800d764:	f7f2 ff48 	bl	80005f8 <__aeabi_dmul>
 800d768:	4b08      	ldr	r3, [pc, #32]	@ (800d78c <_dtoa_r+0x59c>)
 800d76a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d76e:	2200      	movs	r2, #0
 800d770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d774:	f7f2 ff40 	bl	80005f8 <__aeabi_dmul>
 800d778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d77c:	e7c4      	b.n	800d708 <_dtoa_r+0x518>
 800d77e:	bf00      	nop
 800d780:	0800fbb8 	.word	0x0800fbb8
 800d784:	0800fb90 	.word	0x0800fb90
 800d788:	3ff00000 	.word	0x3ff00000
 800d78c:	40240000 	.word	0x40240000
 800d790:	401c0000 	.word	0x401c0000
 800d794:	40140000 	.word	0x40140000
 800d798:	3fe00000 	.word	0x3fe00000
 800d79c:	4631      	mov	r1, r6
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7f2 ff2a 	bl	80005f8 <__aeabi_dmul>
 800d7a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7a8:	9415      	str	r4, [sp, #84]	@ 0x54
 800d7aa:	4656      	mov	r6, sl
 800d7ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7b0:	f7f3 f9d2 	bl	8000b58 <__aeabi_d2iz>
 800d7b4:	4605      	mov	r5, r0
 800d7b6:	f7f2 feb5 	bl	8000524 <__aeabi_i2d>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7c2:	f7f2 fd61 	bl	8000288 <__aeabi_dsub>
 800d7c6:	3530      	adds	r5, #48	@ 0x30
 800d7c8:	f806 5b01 	strb.w	r5, [r6], #1
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	42a6      	cmp	r6, r4
 800d7d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7d6:	f04f 0200 	mov.w	r2, #0
 800d7da:	d124      	bne.n	800d826 <_dtoa_r+0x636>
 800d7dc:	4bac      	ldr	r3, [pc, #688]	@ (800da90 <_dtoa_r+0x8a0>)
 800d7de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7e2:	f7f2 fd53 	bl	800028c <__adddf3>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ee:	f7f3 f993 	bl	8000b18 <__aeabi_dcmpgt>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d145      	bne.n	800d882 <_dtoa_r+0x692>
 800d7f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7fa:	49a5      	ldr	r1, [pc, #660]	@ (800da90 <_dtoa_r+0x8a0>)
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	f7f2 fd43 	bl	8000288 <__aeabi_dsub>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d80a:	f7f3 f967 	bl	8000adc <__aeabi_dcmplt>
 800d80e:	2800      	cmp	r0, #0
 800d810:	f43f aef4 	beq.w	800d5fc <_dtoa_r+0x40c>
 800d814:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d816:	1e73      	subs	r3, r6, #1
 800d818:	9315      	str	r3, [sp, #84]	@ 0x54
 800d81a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d81e:	2b30      	cmp	r3, #48	@ 0x30
 800d820:	d0f8      	beq.n	800d814 <_dtoa_r+0x624>
 800d822:	9f04      	ldr	r7, [sp, #16]
 800d824:	e73d      	b.n	800d6a2 <_dtoa_r+0x4b2>
 800d826:	4b9b      	ldr	r3, [pc, #620]	@ (800da94 <_dtoa_r+0x8a4>)
 800d828:	f7f2 fee6 	bl	80005f8 <__aeabi_dmul>
 800d82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d830:	e7bc      	b.n	800d7ac <_dtoa_r+0x5bc>
 800d832:	d10c      	bne.n	800d84e <_dtoa_r+0x65e>
 800d834:	4b98      	ldr	r3, [pc, #608]	@ (800da98 <_dtoa_r+0x8a8>)
 800d836:	2200      	movs	r2, #0
 800d838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d83c:	f7f2 fedc 	bl	80005f8 <__aeabi_dmul>
 800d840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d844:	f7f3 f95e 	bl	8000b04 <__aeabi_dcmpge>
 800d848:	2800      	cmp	r0, #0
 800d84a:	f000 8157 	beq.w	800dafc <_dtoa_r+0x90c>
 800d84e:	2400      	movs	r4, #0
 800d850:	4625      	mov	r5, r4
 800d852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d854:	43db      	mvns	r3, r3
 800d856:	9304      	str	r3, [sp, #16]
 800d858:	4656      	mov	r6, sl
 800d85a:	2700      	movs	r7, #0
 800d85c:	4621      	mov	r1, r4
 800d85e:	4658      	mov	r0, fp
 800d860:	f000 fa97 	bl	800dd92 <_Bfree>
 800d864:	2d00      	cmp	r5, #0
 800d866:	d0dc      	beq.n	800d822 <_dtoa_r+0x632>
 800d868:	b12f      	cbz	r7, 800d876 <_dtoa_r+0x686>
 800d86a:	42af      	cmp	r7, r5
 800d86c:	d003      	beq.n	800d876 <_dtoa_r+0x686>
 800d86e:	4639      	mov	r1, r7
 800d870:	4658      	mov	r0, fp
 800d872:	f000 fa8e 	bl	800dd92 <_Bfree>
 800d876:	4629      	mov	r1, r5
 800d878:	4658      	mov	r0, fp
 800d87a:	f000 fa8a 	bl	800dd92 <_Bfree>
 800d87e:	e7d0      	b.n	800d822 <_dtoa_r+0x632>
 800d880:	9704      	str	r7, [sp, #16]
 800d882:	4633      	mov	r3, r6
 800d884:	461e      	mov	r6, r3
 800d886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d88a:	2a39      	cmp	r2, #57	@ 0x39
 800d88c:	d107      	bne.n	800d89e <_dtoa_r+0x6ae>
 800d88e:	459a      	cmp	sl, r3
 800d890:	d1f8      	bne.n	800d884 <_dtoa_r+0x694>
 800d892:	9a04      	ldr	r2, [sp, #16]
 800d894:	3201      	adds	r2, #1
 800d896:	9204      	str	r2, [sp, #16]
 800d898:	2230      	movs	r2, #48	@ 0x30
 800d89a:	f88a 2000 	strb.w	r2, [sl]
 800d89e:	781a      	ldrb	r2, [r3, #0]
 800d8a0:	3201      	adds	r2, #1
 800d8a2:	701a      	strb	r2, [r3, #0]
 800d8a4:	e7bd      	b.n	800d822 <_dtoa_r+0x632>
 800d8a6:	4b7b      	ldr	r3, [pc, #492]	@ (800da94 <_dtoa_r+0x8a4>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f7f2 fea5 	bl	80005f8 <__aeabi_dmul>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	460d      	mov	r5, r1
 800d8b6:	f7f3 f907 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f43f aeba 	beq.w	800d634 <_dtoa_r+0x444>
 800d8c0:	e6ef      	b.n	800d6a2 <_dtoa_r+0x4b2>
 800d8c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d8c4:	2a00      	cmp	r2, #0
 800d8c6:	f000 80db 	beq.w	800da80 <_dtoa_r+0x890>
 800d8ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8cc:	2a01      	cmp	r2, #1
 800d8ce:	f300 80bf 	bgt.w	800da50 <_dtoa_r+0x860>
 800d8d2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d8d4:	2a00      	cmp	r2, #0
 800d8d6:	f000 80b7 	beq.w	800da48 <_dtoa_r+0x858>
 800d8da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d8de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d8e0:	4646      	mov	r6, r8
 800d8e2:	9a08      	ldr	r2, [sp, #32]
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	441a      	add	r2, r3
 800d8e8:	4658      	mov	r0, fp
 800d8ea:	4498      	add	r8, r3
 800d8ec:	9208      	str	r2, [sp, #32]
 800d8ee:	f000 faeb 	bl	800dec8 <__i2b>
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	b15e      	cbz	r6, 800d90e <_dtoa_r+0x71e>
 800d8f6:	9b08      	ldr	r3, [sp, #32]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	dd08      	ble.n	800d90e <_dtoa_r+0x71e>
 800d8fc:	42b3      	cmp	r3, r6
 800d8fe:	9a08      	ldr	r2, [sp, #32]
 800d900:	bfa8      	it	ge
 800d902:	4633      	movge	r3, r6
 800d904:	eba8 0803 	sub.w	r8, r8, r3
 800d908:	1af6      	subs	r6, r6, r3
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	9308      	str	r3, [sp, #32]
 800d90e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d910:	b1f3      	cbz	r3, 800d950 <_dtoa_r+0x760>
 800d912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d914:	2b00      	cmp	r3, #0
 800d916:	f000 80b7 	beq.w	800da88 <_dtoa_r+0x898>
 800d91a:	b18c      	cbz	r4, 800d940 <_dtoa_r+0x750>
 800d91c:	4629      	mov	r1, r5
 800d91e:	4622      	mov	r2, r4
 800d920:	4658      	mov	r0, fp
 800d922:	f000 fb91 	bl	800e048 <__pow5mult>
 800d926:	464a      	mov	r2, r9
 800d928:	4601      	mov	r1, r0
 800d92a:	4605      	mov	r5, r0
 800d92c:	4658      	mov	r0, fp
 800d92e:	f000 fae1 	bl	800def4 <__multiply>
 800d932:	4649      	mov	r1, r9
 800d934:	9004      	str	r0, [sp, #16]
 800d936:	4658      	mov	r0, fp
 800d938:	f000 fa2b 	bl	800dd92 <_Bfree>
 800d93c:	9b04      	ldr	r3, [sp, #16]
 800d93e:	4699      	mov	r9, r3
 800d940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d942:	1b1a      	subs	r2, r3, r4
 800d944:	d004      	beq.n	800d950 <_dtoa_r+0x760>
 800d946:	4649      	mov	r1, r9
 800d948:	4658      	mov	r0, fp
 800d94a:	f000 fb7d 	bl	800e048 <__pow5mult>
 800d94e:	4681      	mov	r9, r0
 800d950:	2101      	movs	r1, #1
 800d952:	4658      	mov	r0, fp
 800d954:	f000 fab8 	bl	800dec8 <__i2b>
 800d958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d95a:	4604      	mov	r4, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 81cc 	beq.w	800dcfa <_dtoa_r+0xb0a>
 800d962:	461a      	mov	r2, r3
 800d964:	4601      	mov	r1, r0
 800d966:	4658      	mov	r0, fp
 800d968:	f000 fb6e 	bl	800e048 <__pow5mult>
 800d96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d96e:	2b01      	cmp	r3, #1
 800d970:	4604      	mov	r4, r0
 800d972:	f300 8095 	bgt.w	800daa0 <_dtoa_r+0x8b0>
 800d976:	9b02      	ldr	r3, [sp, #8]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f040 8087 	bne.w	800da8c <_dtoa_r+0x89c>
 800d97e:	9b03      	ldr	r3, [sp, #12]
 800d980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d984:	2b00      	cmp	r3, #0
 800d986:	f040 8089 	bne.w	800da9c <_dtoa_r+0x8ac>
 800d98a:	9b03      	ldr	r3, [sp, #12]
 800d98c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d990:	0d1b      	lsrs	r3, r3, #20
 800d992:	051b      	lsls	r3, r3, #20
 800d994:	b12b      	cbz	r3, 800d9a2 <_dtoa_r+0x7b2>
 800d996:	9b08      	ldr	r3, [sp, #32]
 800d998:	3301      	adds	r3, #1
 800d99a:	9308      	str	r3, [sp, #32]
 800d99c:	f108 0801 	add.w	r8, r8, #1
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 81ad 	beq.w	800dd06 <_dtoa_r+0xb16>
 800d9ac:	6923      	ldr	r3, [r4, #16]
 800d9ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9b2:	6918      	ldr	r0, [r3, #16]
 800d9b4:	f000 fa3c 	bl	800de30 <__hi0bits>
 800d9b8:	f1c0 0020 	rsb	r0, r0, #32
 800d9bc:	9b08      	ldr	r3, [sp, #32]
 800d9be:	4418      	add	r0, r3
 800d9c0:	f010 001f 	ands.w	r0, r0, #31
 800d9c4:	d077      	beq.n	800dab6 <_dtoa_r+0x8c6>
 800d9c6:	f1c0 0320 	rsb	r3, r0, #32
 800d9ca:	2b04      	cmp	r3, #4
 800d9cc:	dd6b      	ble.n	800daa6 <_dtoa_r+0x8b6>
 800d9ce:	9b08      	ldr	r3, [sp, #32]
 800d9d0:	f1c0 001c 	rsb	r0, r0, #28
 800d9d4:	4403      	add	r3, r0
 800d9d6:	4480      	add	r8, r0
 800d9d8:	4406      	add	r6, r0
 800d9da:	9308      	str	r3, [sp, #32]
 800d9dc:	f1b8 0f00 	cmp.w	r8, #0
 800d9e0:	dd05      	ble.n	800d9ee <_dtoa_r+0x7fe>
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	4642      	mov	r2, r8
 800d9e6:	4658      	mov	r0, fp
 800d9e8:	f000 fb6e 	bl	800e0c8 <__lshift>
 800d9ec:	4681      	mov	r9, r0
 800d9ee:	9b08      	ldr	r3, [sp, #32]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	dd05      	ble.n	800da00 <_dtoa_r+0x810>
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	4658      	mov	r0, fp
 800d9fa:	f000 fb65 	bl	800e0c8 <__lshift>
 800d9fe:	4604      	mov	r4, r0
 800da00:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da02:	2b00      	cmp	r3, #0
 800da04:	d059      	beq.n	800daba <_dtoa_r+0x8ca>
 800da06:	4621      	mov	r1, r4
 800da08:	4648      	mov	r0, r9
 800da0a:	f000 fbc9 	bl	800e1a0 <__mcmp>
 800da0e:	2800      	cmp	r0, #0
 800da10:	da53      	bge.n	800daba <_dtoa_r+0x8ca>
 800da12:	1e7b      	subs	r3, r7, #1
 800da14:	9304      	str	r3, [sp, #16]
 800da16:	4649      	mov	r1, r9
 800da18:	2300      	movs	r3, #0
 800da1a:	220a      	movs	r2, #10
 800da1c:	4658      	mov	r0, fp
 800da1e:	f000 f9c1 	bl	800dda4 <__multadd>
 800da22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da24:	4681      	mov	r9, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	f000 816f 	beq.w	800dd0a <_dtoa_r+0xb1a>
 800da2c:	2300      	movs	r3, #0
 800da2e:	4629      	mov	r1, r5
 800da30:	220a      	movs	r2, #10
 800da32:	4658      	mov	r0, fp
 800da34:	f000 f9b6 	bl	800dda4 <__multadd>
 800da38:	9b00      	ldr	r3, [sp, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	4605      	mov	r5, r0
 800da3e:	dc67      	bgt.n	800db10 <_dtoa_r+0x920>
 800da40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da42:	2b02      	cmp	r3, #2
 800da44:	dc41      	bgt.n	800daca <_dtoa_r+0x8da>
 800da46:	e063      	b.n	800db10 <_dtoa_r+0x920>
 800da48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da4a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da4e:	e746      	b.n	800d8de <_dtoa_r+0x6ee>
 800da50:	9b07      	ldr	r3, [sp, #28]
 800da52:	1e5c      	subs	r4, r3, #1
 800da54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da56:	42a3      	cmp	r3, r4
 800da58:	bfbf      	itttt	lt
 800da5a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800da5c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800da5e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800da60:	1ae3      	sublt	r3, r4, r3
 800da62:	bfb4      	ite	lt
 800da64:	18d2      	addlt	r2, r2, r3
 800da66:	1b1c      	subge	r4, r3, r4
 800da68:	9b07      	ldr	r3, [sp, #28]
 800da6a:	bfbc      	itt	lt
 800da6c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800da6e:	2400      	movlt	r4, #0
 800da70:	2b00      	cmp	r3, #0
 800da72:	bfb5      	itete	lt
 800da74:	eba8 0603 	sublt.w	r6, r8, r3
 800da78:	9b07      	ldrge	r3, [sp, #28]
 800da7a:	2300      	movlt	r3, #0
 800da7c:	4646      	movge	r6, r8
 800da7e:	e730      	b.n	800d8e2 <_dtoa_r+0x6f2>
 800da80:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da82:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800da84:	4646      	mov	r6, r8
 800da86:	e735      	b.n	800d8f4 <_dtoa_r+0x704>
 800da88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da8a:	e75c      	b.n	800d946 <_dtoa_r+0x756>
 800da8c:	2300      	movs	r3, #0
 800da8e:	e788      	b.n	800d9a2 <_dtoa_r+0x7b2>
 800da90:	3fe00000 	.word	0x3fe00000
 800da94:	40240000 	.word	0x40240000
 800da98:	40140000 	.word	0x40140000
 800da9c:	9b02      	ldr	r3, [sp, #8]
 800da9e:	e780      	b.n	800d9a2 <_dtoa_r+0x7b2>
 800daa0:	2300      	movs	r3, #0
 800daa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800daa4:	e782      	b.n	800d9ac <_dtoa_r+0x7bc>
 800daa6:	d099      	beq.n	800d9dc <_dtoa_r+0x7ec>
 800daa8:	9a08      	ldr	r2, [sp, #32]
 800daaa:	331c      	adds	r3, #28
 800daac:	441a      	add	r2, r3
 800daae:	4498      	add	r8, r3
 800dab0:	441e      	add	r6, r3
 800dab2:	9208      	str	r2, [sp, #32]
 800dab4:	e792      	b.n	800d9dc <_dtoa_r+0x7ec>
 800dab6:	4603      	mov	r3, r0
 800dab8:	e7f6      	b.n	800daa8 <_dtoa_r+0x8b8>
 800daba:	9b07      	ldr	r3, [sp, #28]
 800dabc:	9704      	str	r7, [sp, #16]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	dc20      	bgt.n	800db04 <_dtoa_r+0x914>
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	dd1e      	ble.n	800db08 <_dtoa_r+0x918>
 800daca:	9b00      	ldr	r3, [sp, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f47f aec0 	bne.w	800d852 <_dtoa_r+0x662>
 800dad2:	4621      	mov	r1, r4
 800dad4:	2205      	movs	r2, #5
 800dad6:	4658      	mov	r0, fp
 800dad8:	f000 f964 	bl	800dda4 <__multadd>
 800dadc:	4601      	mov	r1, r0
 800dade:	4604      	mov	r4, r0
 800dae0:	4648      	mov	r0, r9
 800dae2:	f000 fb5d 	bl	800e1a0 <__mcmp>
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f77f aeb3 	ble.w	800d852 <_dtoa_r+0x662>
 800daec:	4656      	mov	r6, sl
 800daee:	2331      	movs	r3, #49	@ 0x31
 800daf0:	f806 3b01 	strb.w	r3, [r6], #1
 800daf4:	9b04      	ldr	r3, [sp, #16]
 800daf6:	3301      	adds	r3, #1
 800daf8:	9304      	str	r3, [sp, #16]
 800dafa:	e6ae      	b.n	800d85a <_dtoa_r+0x66a>
 800dafc:	9c07      	ldr	r4, [sp, #28]
 800dafe:	9704      	str	r7, [sp, #16]
 800db00:	4625      	mov	r5, r4
 800db02:	e7f3      	b.n	800daec <_dtoa_r+0x8fc>
 800db04:	9b07      	ldr	r3, [sp, #28]
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f000 8101 	beq.w	800dd12 <_dtoa_r+0xb22>
 800db10:	2e00      	cmp	r6, #0
 800db12:	dd05      	ble.n	800db20 <_dtoa_r+0x930>
 800db14:	4629      	mov	r1, r5
 800db16:	4632      	mov	r2, r6
 800db18:	4658      	mov	r0, fp
 800db1a:	f000 fad5 	bl	800e0c8 <__lshift>
 800db1e:	4605      	mov	r5, r0
 800db20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db22:	2b00      	cmp	r3, #0
 800db24:	d059      	beq.n	800dbda <_dtoa_r+0x9ea>
 800db26:	6869      	ldr	r1, [r5, #4]
 800db28:	4658      	mov	r0, fp
 800db2a:	f000 f90d 	bl	800dd48 <_Balloc>
 800db2e:	4606      	mov	r6, r0
 800db30:	b920      	cbnz	r0, 800db3c <_dtoa_r+0x94c>
 800db32:	4b83      	ldr	r3, [pc, #524]	@ (800dd40 <_dtoa_r+0xb50>)
 800db34:	4602      	mov	r2, r0
 800db36:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db3a:	e480      	b.n	800d43e <_dtoa_r+0x24e>
 800db3c:	692a      	ldr	r2, [r5, #16]
 800db3e:	3202      	adds	r2, #2
 800db40:	0092      	lsls	r2, r2, #2
 800db42:	f105 010c 	add.w	r1, r5, #12
 800db46:	300c      	adds	r0, #12
 800db48:	f000 fcd0 	bl	800e4ec <memcpy>
 800db4c:	2201      	movs	r2, #1
 800db4e:	4631      	mov	r1, r6
 800db50:	4658      	mov	r0, fp
 800db52:	f000 fab9 	bl	800e0c8 <__lshift>
 800db56:	f10a 0301 	add.w	r3, sl, #1
 800db5a:	9307      	str	r3, [sp, #28]
 800db5c:	9b00      	ldr	r3, [sp, #0]
 800db5e:	4453      	add	r3, sl
 800db60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db62:	9b02      	ldr	r3, [sp, #8]
 800db64:	f003 0301 	and.w	r3, r3, #1
 800db68:	462f      	mov	r7, r5
 800db6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800db6c:	4605      	mov	r5, r0
 800db6e:	9b07      	ldr	r3, [sp, #28]
 800db70:	4621      	mov	r1, r4
 800db72:	3b01      	subs	r3, #1
 800db74:	4648      	mov	r0, r9
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	f7ff fab0 	bl	800d0dc <quorem>
 800db7c:	4639      	mov	r1, r7
 800db7e:	9002      	str	r0, [sp, #8]
 800db80:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db84:	4648      	mov	r0, r9
 800db86:	f000 fb0b 	bl	800e1a0 <__mcmp>
 800db8a:	462a      	mov	r2, r5
 800db8c:	9008      	str	r0, [sp, #32]
 800db8e:	4621      	mov	r1, r4
 800db90:	4658      	mov	r0, fp
 800db92:	f000 fb21 	bl	800e1d8 <__mdiff>
 800db96:	68c2      	ldr	r2, [r0, #12]
 800db98:	4606      	mov	r6, r0
 800db9a:	bb02      	cbnz	r2, 800dbde <_dtoa_r+0x9ee>
 800db9c:	4601      	mov	r1, r0
 800db9e:	4648      	mov	r0, r9
 800dba0:	f000 fafe 	bl	800e1a0 <__mcmp>
 800dba4:	4602      	mov	r2, r0
 800dba6:	4631      	mov	r1, r6
 800dba8:	4658      	mov	r0, fp
 800dbaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800dbac:	f000 f8f1 	bl	800dd92 <_Bfree>
 800dbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbb4:	9e07      	ldr	r6, [sp, #28]
 800dbb6:	ea43 0102 	orr.w	r1, r3, r2
 800dbba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbbc:	4319      	orrs	r1, r3
 800dbbe:	d110      	bne.n	800dbe2 <_dtoa_r+0x9f2>
 800dbc0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbc4:	d029      	beq.n	800dc1a <_dtoa_r+0xa2a>
 800dbc6:	9b08      	ldr	r3, [sp, #32]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	dd02      	ble.n	800dbd2 <_dtoa_r+0x9e2>
 800dbcc:	9b02      	ldr	r3, [sp, #8]
 800dbce:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dbd2:	9b00      	ldr	r3, [sp, #0]
 800dbd4:	f883 8000 	strb.w	r8, [r3]
 800dbd8:	e640      	b.n	800d85c <_dtoa_r+0x66c>
 800dbda:	4628      	mov	r0, r5
 800dbdc:	e7bb      	b.n	800db56 <_dtoa_r+0x966>
 800dbde:	2201      	movs	r2, #1
 800dbe0:	e7e1      	b.n	800dba6 <_dtoa_r+0x9b6>
 800dbe2:	9b08      	ldr	r3, [sp, #32]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	db04      	blt.n	800dbf2 <_dtoa_r+0xa02>
 800dbe8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbea:	430b      	orrs	r3, r1
 800dbec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dbee:	430b      	orrs	r3, r1
 800dbf0:	d120      	bne.n	800dc34 <_dtoa_r+0xa44>
 800dbf2:	2a00      	cmp	r2, #0
 800dbf4:	dded      	ble.n	800dbd2 <_dtoa_r+0x9e2>
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	4658      	mov	r0, fp
 800dbfc:	f000 fa64 	bl	800e0c8 <__lshift>
 800dc00:	4621      	mov	r1, r4
 800dc02:	4681      	mov	r9, r0
 800dc04:	f000 facc 	bl	800e1a0 <__mcmp>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	dc03      	bgt.n	800dc14 <_dtoa_r+0xa24>
 800dc0c:	d1e1      	bne.n	800dbd2 <_dtoa_r+0x9e2>
 800dc0e:	f018 0f01 	tst.w	r8, #1
 800dc12:	d0de      	beq.n	800dbd2 <_dtoa_r+0x9e2>
 800dc14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc18:	d1d8      	bne.n	800dbcc <_dtoa_r+0x9dc>
 800dc1a:	9a00      	ldr	r2, [sp, #0]
 800dc1c:	2339      	movs	r3, #57	@ 0x39
 800dc1e:	7013      	strb	r3, [r2, #0]
 800dc20:	4633      	mov	r3, r6
 800dc22:	461e      	mov	r6, r3
 800dc24:	3b01      	subs	r3, #1
 800dc26:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc2a:	2a39      	cmp	r2, #57	@ 0x39
 800dc2c:	d052      	beq.n	800dcd4 <_dtoa_r+0xae4>
 800dc2e:	3201      	adds	r2, #1
 800dc30:	701a      	strb	r2, [r3, #0]
 800dc32:	e613      	b.n	800d85c <_dtoa_r+0x66c>
 800dc34:	2a00      	cmp	r2, #0
 800dc36:	dd07      	ble.n	800dc48 <_dtoa_r+0xa58>
 800dc38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc3c:	d0ed      	beq.n	800dc1a <_dtoa_r+0xa2a>
 800dc3e:	9a00      	ldr	r2, [sp, #0]
 800dc40:	f108 0301 	add.w	r3, r8, #1
 800dc44:	7013      	strb	r3, [r2, #0]
 800dc46:	e609      	b.n	800d85c <_dtoa_r+0x66c>
 800dc48:	9b07      	ldr	r3, [sp, #28]
 800dc4a:	9a07      	ldr	r2, [sp, #28]
 800dc4c:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dc50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d028      	beq.n	800dca8 <_dtoa_r+0xab8>
 800dc56:	4649      	mov	r1, r9
 800dc58:	2300      	movs	r3, #0
 800dc5a:	220a      	movs	r2, #10
 800dc5c:	4658      	mov	r0, fp
 800dc5e:	f000 f8a1 	bl	800dda4 <__multadd>
 800dc62:	42af      	cmp	r7, r5
 800dc64:	4681      	mov	r9, r0
 800dc66:	f04f 0300 	mov.w	r3, #0
 800dc6a:	f04f 020a 	mov.w	r2, #10
 800dc6e:	4639      	mov	r1, r7
 800dc70:	4658      	mov	r0, fp
 800dc72:	d107      	bne.n	800dc84 <_dtoa_r+0xa94>
 800dc74:	f000 f896 	bl	800dda4 <__multadd>
 800dc78:	4607      	mov	r7, r0
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	9b07      	ldr	r3, [sp, #28]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	9307      	str	r3, [sp, #28]
 800dc82:	e774      	b.n	800db6e <_dtoa_r+0x97e>
 800dc84:	f000 f88e 	bl	800dda4 <__multadd>
 800dc88:	4629      	mov	r1, r5
 800dc8a:	4607      	mov	r7, r0
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	220a      	movs	r2, #10
 800dc90:	4658      	mov	r0, fp
 800dc92:	f000 f887 	bl	800dda4 <__multadd>
 800dc96:	4605      	mov	r5, r0
 800dc98:	e7f0      	b.n	800dc7c <_dtoa_r+0xa8c>
 800dc9a:	9b00      	ldr	r3, [sp, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bfcc      	ite	gt
 800dca0:	461e      	movgt	r6, r3
 800dca2:	2601      	movle	r6, #1
 800dca4:	4456      	add	r6, sl
 800dca6:	2700      	movs	r7, #0
 800dca8:	4649      	mov	r1, r9
 800dcaa:	2201      	movs	r2, #1
 800dcac:	4658      	mov	r0, fp
 800dcae:	f000 fa0b 	bl	800e0c8 <__lshift>
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	4681      	mov	r9, r0
 800dcb6:	f000 fa73 	bl	800e1a0 <__mcmp>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	dcb0      	bgt.n	800dc20 <_dtoa_r+0xa30>
 800dcbe:	d102      	bne.n	800dcc6 <_dtoa_r+0xad6>
 800dcc0:	f018 0f01 	tst.w	r8, #1
 800dcc4:	d1ac      	bne.n	800dc20 <_dtoa_r+0xa30>
 800dcc6:	4633      	mov	r3, r6
 800dcc8:	461e      	mov	r6, r3
 800dcca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcce:	2a30      	cmp	r2, #48	@ 0x30
 800dcd0:	d0fa      	beq.n	800dcc8 <_dtoa_r+0xad8>
 800dcd2:	e5c3      	b.n	800d85c <_dtoa_r+0x66c>
 800dcd4:	459a      	cmp	sl, r3
 800dcd6:	d1a4      	bne.n	800dc22 <_dtoa_r+0xa32>
 800dcd8:	9b04      	ldr	r3, [sp, #16]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	9304      	str	r3, [sp, #16]
 800dcde:	2331      	movs	r3, #49	@ 0x31
 800dce0:	f88a 3000 	strb.w	r3, [sl]
 800dce4:	e5ba      	b.n	800d85c <_dtoa_r+0x66c>
 800dce6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dce8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dd44 <_dtoa_r+0xb54>
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f43f aab6 	beq.w	800d25e <_dtoa_r+0x6e>
 800dcf2:	f10a 0308 	add.w	r3, sl, #8
 800dcf6:	f7ff bab0 	b.w	800d25a <_dtoa_r+0x6a>
 800dcfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	f77f ae3a 	ble.w	800d976 <_dtoa_r+0x786>
 800dd02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd04:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd06:	2001      	movs	r0, #1
 800dd08:	e658      	b.n	800d9bc <_dtoa_r+0x7cc>
 800dd0a:	9b00      	ldr	r3, [sp, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f77f aed9 	ble.w	800dac4 <_dtoa_r+0x8d4>
 800dd12:	4656      	mov	r6, sl
 800dd14:	4621      	mov	r1, r4
 800dd16:	4648      	mov	r0, r9
 800dd18:	f7ff f9e0 	bl	800d0dc <quorem>
 800dd1c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd20:	f806 8b01 	strb.w	r8, [r6], #1
 800dd24:	9b00      	ldr	r3, [sp, #0]
 800dd26:	eba6 020a 	sub.w	r2, r6, sl
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	ddb5      	ble.n	800dc9a <_dtoa_r+0xaaa>
 800dd2e:	4649      	mov	r1, r9
 800dd30:	2300      	movs	r3, #0
 800dd32:	220a      	movs	r2, #10
 800dd34:	4658      	mov	r0, fp
 800dd36:	f000 f835 	bl	800dda4 <__multadd>
 800dd3a:	4681      	mov	r9, r0
 800dd3c:	e7ea      	b.n	800dd14 <_dtoa_r+0xb24>
 800dd3e:	bf00      	nop
 800dd40:	0800fac1 	.word	0x0800fac1
 800dd44:	0800fab4 	.word	0x0800fab4

0800dd48 <_Balloc>:
 800dd48:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800dd4a:	b570      	push	{r4, r5, r6, lr}
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	460c      	mov	r4, r1
 800dd50:	b17b      	cbz	r3, 800dd72 <_Balloc+0x2a>
 800dd52:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800dd54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800dd58:	b9a0      	cbnz	r0, 800dd84 <_Balloc+0x3c>
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	fa01 f604 	lsl.w	r6, r1, r4
 800dd60:	1d72      	adds	r2, r6, #5
 800dd62:	0092      	lsls	r2, r2, #2
 800dd64:	4628      	mov	r0, r5
 800dd66:	f000 fbed 	bl	800e544 <_calloc_r>
 800dd6a:	b148      	cbz	r0, 800dd80 <_Balloc+0x38>
 800dd6c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800dd70:	e00b      	b.n	800dd8a <_Balloc+0x42>
 800dd72:	2221      	movs	r2, #33	@ 0x21
 800dd74:	2104      	movs	r1, #4
 800dd76:	f000 fbe5 	bl	800e544 <_calloc_r>
 800dd7a:	6468      	str	r0, [r5, #68]	@ 0x44
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	d1e8      	bne.n	800dd52 <_Balloc+0xa>
 800dd80:	2000      	movs	r0, #0
 800dd82:	bd70      	pop	{r4, r5, r6, pc}
 800dd84:	6802      	ldr	r2, [r0, #0]
 800dd86:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd90:	e7f7      	b.n	800dd82 <_Balloc+0x3a>

0800dd92 <_Bfree>:
 800dd92:	b131      	cbz	r1, 800dda2 <_Bfree+0x10>
 800dd94:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800dd96:	684a      	ldr	r2, [r1, #4]
 800dd98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dd9c:	6008      	str	r0, [r1, #0]
 800dd9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800dda2:	4770      	bx	lr

0800dda4 <__multadd>:
 800dda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda8:	690d      	ldr	r5, [r1, #16]
 800ddaa:	4607      	mov	r7, r0
 800ddac:	460c      	mov	r4, r1
 800ddae:	461e      	mov	r6, r3
 800ddb0:	f101 0c14 	add.w	ip, r1, #20
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	f8dc 3000 	ldr.w	r3, [ip]
 800ddba:	b299      	uxth	r1, r3
 800ddbc:	fb02 6101 	mla	r1, r2, r1, r6
 800ddc0:	0c1e      	lsrs	r6, r3, #16
 800ddc2:	0c0b      	lsrs	r3, r1, #16
 800ddc4:	fb02 3306 	mla	r3, r2, r6, r3
 800ddc8:	b289      	uxth	r1, r1
 800ddca:	3001      	adds	r0, #1
 800ddcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ddd0:	4285      	cmp	r5, r0
 800ddd2:	f84c 1b04 	str.w	r1, [ip], #4
 800ddd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ddda:	dcec      	bgt.n	800ddb6 <__multadd+0x12>
 800dddc:	b30e      	cbz	r6, 800de22 <__multadd+0x7e>
 800ddde:	68a3      	ldr	r3, [r4, #8]
 800dde0:	42ab      	cmp	r3, r5
 800dde2:	dc19      	bgt.n	800de18 <__multadd+0x74>
 800dde4:	6861      	ldr	r1, [r4, #4]
 800dde6:	4638      	mov	r0, r7
 800dde8:	3101      	adds	r1, #1
 800ddea:	f7ff ffad 	bl	800dd48 <_Balloc>
 800ddee:	4680      	mov	r8, r0
 800ddf0:	b928      	cbnz	r0, 800ddfe <__multadd+0x5a>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	4b0c      	ldr	r3, [pc, #48]	@ (800de28 <__multadd+0x84>)
 800ddf6:	480d      	ldr	r0, [pc, #52]	@ (800de2c <__multadd+0x88>)
 800ddf8:	21ba      	movs	r1, #186	@ 0xba
 800ddfa:	f000 fb85 	bl	800e508 <__assert_func>
 800ddfe:	6922      	ldr	r2, [r4, #16]
 800de00:	3202      	adds	r2, #2
 800de02:	f104 010c 	add.w	r1, r4, #12
 800de06:	0092      	lsls	r2, r2, #2
 800de08:	300c      	adds	r0, #12
 800de0a:	f000 fb6f 	bl	800e4ec <memcpy>
 800de0e:	4621      	mov	r1, r4
 800de10:	4638      	mov	r0, r7
 800de12:	f7ff ffbe 	bl	800dd92 <_Bfree>
 800de16:	4644      	mov	r4, r8
 800de18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de1c:	3501      	adds	r5, #1
 800de1e:	615e      	str	r6, [r3, #20]
 800de20:	6125      	str	r5, [r4, #16]
 800de22:	4620      	mov	r0, r4
 800de24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de28:	0800fac1 	.word	0x0800fac1
 800de2c:	0800fb2a 	.word	0x0800fb2a

0800de30 <__hi0bits>:
 800de30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800de34:	4603      	mov	r3, r0
 800de36:	bf36      	itet	cc
 800de38:	0403      	lslcc	r3, r0, #16
 800de3a:	2000      	movcs	r0, #0
 800de3c:	2010      	movcc	r0, #16
 800de3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de42:	bf3c      	itt	cc
 800de44:	021b      	lslcc	r3, r3, #8
 800de46:	3008      	addcc	r0, #8
 800de48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de4c:	bf3c      	itt	cc
 800de4e:	011b      	lslcc	r3, r3, #4
 800de50:	3004      	addcc	r0, #4
 800de52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de56:	bf3c      	itt	cc
 800de58:	009b      	lslcc	r3, r3, #2
 800de5a:	3002      	addcc	r0, #2
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	db05      	blt.n	800de6c <__hi0bits+0x3c>
 800de60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800de64:	f100 0001 	add.w	r0, r0, #1
 800de68:	bf08      	it	eq
 800de6a:	2020      	moveq	r0, #32
 800de6c:	4770      	bx	lr

0800de6e <__lo0bits>:
 800de6e:	6803      	ldr	r3, [r0, #0]
 800de70:	4602      	mov	r2, r0
 800de72:	f013 0007 	ands.w	r0, r3, #7
 800de76:	d00b      	beq.n	800de90 <__lo0bits+0x22>
 800de78:	07d9      	lsls	r1, r3, #31
 800de7a:	d421      	bmi.n	800dec0 <__lo0bits+0x52>
 800de7c:	0798      	lsls	r0, r3, #30
 800de7e:	bf49      	itett	mi
 800de80:	085b      	lsrmi	r3, r3, #1
 800de82:	089b      	lsrpl	r3, r3, #2
 800de84:	2001      	movmi	r0, #1
 800de86:	6013      	strmi	r3, [r2, #0]
 800de88:	bf5c      	itt	pl
 800de8a:	6013      	strpl	r3, [r2, #0]
 800de8c:	2002      	movpl	r0, #2
 800de8e:	4770      	bx	lr
 800de90:	b299      	uxth	r1, r3
 800de92:	b909      	cbnz	r1, 800de98 <__lo0bits+0x2a>
 800de94:	0c1b      	lsrs	r3, r3, #16
 800de96:	2010      	movs	r0, #16
 800de98:	b2d9      	uxtb	r1, r3
 800de9a:	b909      	cbnz	r1, 800dea0 <__lo0bits+0x32>
 800de9c:	3008      	adds	r0, #8
 800de9e:	0a1b      	lsrs	r3, r3, #8
 800dea0:	0719      	lsls	r1, r3, #28
 800dea2:	bf04      	itt	eq
 800dea4:	091b      	lsreq	r3, r3, #4
 800dea6:	3004      	addeq	r0, #4
 800dea8:	0799      	lsls	r1, r3, #30
 800deaa:	bf04      	itt	eq
 800deac:	089b      	lsreq	r3, r3, #2
 800deae:	3002      	addeq	r0, #2
 800deb0:	07d9      	lsls	r1, r3, #31
 800deb2:	d403      	bmi.n	800debc <__lo0bits+0x4e>
 800deb4:	085b      	lsrs	r3, r3, #1
 800deb6:	f100 0001 	add.w	r0, r0, #1
 800deba:	d003      	beq.n	800dec4 <__lo0bits+0x56>
 800debc:	6013      	str	r3, [r2, #0]
 800debe:	4770      	bx	lr
 800dec0:	2000      	movs	r0, #0
 800dec2:	4770      	bx	lr
 800dec4:	2020      	movs	r0, #32
 800dec6:	4770      	bx	lr

0800dec8 <__i2b>:
 800dec8:	b510      	push	{r4, lr}
 800deca:	460c      	mov	r4, r1
 800decc:	2101      	movs	r1, #1
 800dece:	f7ff ff3b 	bl	800dd48 <_Balloc>
 800ded2:	4602      	mov	r2, r0
 800ded4:	b928      	cbnz	r0, 800dee2 <__i2b+0x1a>
 800ded6:	4b05      	ldr	r3, [pc, #20]	@ (800deec <__i2b+0x24>)
 800ded8:	4805      	ldr	r0, [pc, #20]	@ (800def0 <__i2b+0x28>)
 800deda:	f240 1145 	movw	r1, #325	@ 0x145
 800dede:	f000 fb13 	bl	800e508 <__assert_func>
 800dee2:	2301      	movs	r3, #1
 800dee4:	6144      	str	r4, [r0, #20]
 800dee6:	6103      	str	r3, [r0, #16]
 800dee8:	bd10      	pop	{r4, pc}
 800deea:	bf00      	nop
 800deec:	0800fac1 	.word	0x0800fac1
 800def0:	0800fb2a 	.word	0x0800fb2a

0800def4 <__multiply>:
 800def4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def8:	4614      	mov	r4, r2
 800defa:	690a      	ldr	r2, [r1, #16]
 800defc:	6923      	ldr	r3, [r4, #16]
 800defe:	429a      	cmp	r2, r3
 800df00:	bfa8      	it	ge
 800df02:	4623      	movge	r3, r4
 800df04:	460f      	mov	r7, r1
 800df06:	bfa4      	itt	ge
 800df08:	460c      	movge	r4, r1
 800df0a:	461f      	movge	r7, r3
 800df0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800df10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800df14:	68a3      	ldr	r3, [r4, #8]
 800df16:	6861      	ldr	r1, [r4, #4]
 800df18:	eb0a 0609 	add.w	r6, sl, r9
 800df1c:	42b3      	cmp	r3, r6
 800df1e:	b085      	sub	sp, #20
 800df20:	bfb8      	it	lt
 800df22:	3101      	addlt	r1, #1
 800df24:	f7ff ff10 	bl	800dd48 <_Balloc>
 800df28:	b930      	cbnz	r0, 800df38 <__multiply+0x44>
 800df2a:	4602      	mov	r2, r0
 800df2c:	4b44      	ldr	r3, [pc, #272]	@ (800e040 <__multiply+0x14c>)
 800df2e:	4845      	ldr	r0, [pc, #276]	@ (800e044 <__multiply+0x150>)
 800df30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800df34:	f000 fae8 	bl	800e508 <__assert_func>
 800df38:	f100 0514 	add.w	r5, r0, #20
 800df3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df40:	462b      	mov	r3, r5
 800df42:	2200      	movs	r2, #0
 800df44:	4543      	cmp	r3, r8
 800df46:	d321      	bcc.n	800df8c <__multiply+0x98>
 800df48:	f107 0114 	add.w	r1, r7, #20
 800df4c:	f104 0214 	add.w	r2, r4, #20
 800df50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800df54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800df58:	9302      	str	r3, [sp, #8]
 800df5a:	1b13      	subs	r3, r2, r4
 800df5c:	3b15      	subs	r3, #21
 800df5e:	f023 0303 	bic.w	r3, r3, #3
 800df62:	3304      	adds	r3, #4
 800df64:	f104 0715 	add.w	r7, r4, #21
 800df68:	42ba      	cmp	r2, r7
 800df6a:	bf38      	it	cc
 800df6c:	2304      	movcc	r3, #4
 800df6e:	9301      	str	r3, [sp, #4]
 800df70:	9b02      	ldr	r3, [sp, #8]
 800df72:	9103      	str	r1, [sp, #12]
 800df74:	428b      	cmp	r3, r1
 800df76:	d80c      	bhi.n	800df92 <__multiply+0x9e>
 800df78:	2e00      	cmp	r6, #0
 800df7a:	dd03      	ble.n	800df84 <__multiply+0x90>
 800df7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df80:	2b00      	cmp	r3, #0
 800df82:	d05b      	beq.n	800e03c <__multiply+0x148>
 800df84:	6106      	str	r6, [r0, #16]
 800df86:	b005      	add	sp, #20
 800df88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df8c:	f843 2b04 	str.w	r2, [r3], #4
 800df90:	e7d8      	b.n	800df44 <__multiply+0x50>
 800df92:	f8b1 a000 	ldrh.w	sl, [r1]
 800df96:	f1ba 0f00 	cmp.w	sl, #0
 800df9a:	d024      	beq.n	800dfe6 <__multiply+0xf2>
 800df9c:	f104 0e14 	add.w	lr, r4, #20
 800dfa0:	46a9      	mov	r9, r5
 800dfa2:	f04f 0c00 	mov.w	ip, #0
 800dfa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dfaa:	f8d9 3000 	ldr.w	r3, [r9]
 800dfae:	fa1f fb87 	uxth.w	fp, r7
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800dfb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dfbc:	f8d9 7000 	ldr.w	r7, [r9]
 800dfc0:	4463      	add	r3, ip
 800dfc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dfc6:	fb0a c70b 	mla	r7, sl, fp, ip
 800dfca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dfd4:	4572      	cmp	r2, lr
 800dfd6:	f849 3b04 	str.w	r3, [r9], #4
 800dfda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dfde:	d8e2      	bhi.n	800dfa6 <__multiply+0xb2>
 800dfe0:	9b01      	ldr	r3, [sp, #4]
 800dfe2:	f845 c003 	str.w	ip, [r5, r3]
 800dfe6:	9b03      	ldr	r3, [sp, #12]
 800dfe8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dfec:	3104      	adds	r1, #4
 800dfee:	f1b9 0f00 	cmp.w	r9, #0
 800dff2:	d021      	beq.n	800e038 <__multiply+0x144>
 800dff4:	682b      	ldr	r3, [r5, #0]
 800dff6:	f104 0c14 	add.w	ip, r4, #20
 800dffa:	46ae      	mov	lr, r5
 800dffc:	f04f 0a00 	mov.w	sl, #0
 800e000:	f8bc b000 	ldrh.w	fp, [ip]
 800e004:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e008:	fb09 770b 	mla	r7, r9, fp, r7
 800e00c:	4457      	add	r7, sl
 800e00e:	b29b      	uxth	r3, r3
 800e010:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e014:	f84e 3b04 	str.w	r3, [lr], #4
 800e018:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e01c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e020:	f8be 3000 	ldrh.w	r3, [lr]
 800e024:	fb09 330a 	mla	r3, r9, sl, r3
 800e028:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e02c:	4562      	cmp	r2, ip
 800e02e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e032:	d8e5      	bhi.n	800e000 <__multiply+0x10c>
 800e034:	9f01      	ldr	r7, [sp, #4]
 800e036:	51eb      	str	r3, [r5, r7]
 800e038:	3504      	adds	r5, #4
 800e03a:	e799      	b.n	800df70 <__multiply+0x7c>
 800e03c:	3e01      	subs	r6, #1
 800e03e:	e79b      	b.n	800df78 <__multiply+0x84>
 800e040:	0800fac1 	.word	0x0800fac1
 800e044:	0800fb2a 	.word	0x0800fb2a

0800e048 <__pow5mult>:
 800e048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e04c:	4615      	mov	r5, r2
 800e04e:	f012 0203 	ands.w	r2, r2, #3
 800e052:	4607      	mov	r7, r0
 800e054:	460e      	mov	r6, r1
 800e056:	d007      	beq.n	800e068 <__pow5mult+0x20>
 800e058:	4c1a      	ldr	r4, [pc, #104]	@ (800e0c4 <__pow5mult+0x7c>)
 800e05a:	3a01      	subs	r2, #1
 800e05c:	2300      	movs	r3, #0
 800e05e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e062:	f7ff fe9f 	bl	800dda4 <__multadd>
 800e066:	4606      	mov	r6, r0
 800e068:	10ad      	asrs	r5, r5, #2
 800e06a:	d027      	beq.n	800e0bc <__pow5mult+0x74>
 800e06c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800e06e:	b944      	cbnz	r4, 800e082 <__pow5mult+0x3a>
 800e070:	f240 2171 	movw	r1, #625	@ 0x271
 800e074:	4638      	mov	r0, r7
 800e076:	f7ff ff27 	bl	800dec8 <__i2b>
 800e07a:	2300      	movs	r3, #0
 800e07c:	6438      	str	r0, [r7, #64]	@ 0x40
 800e07e:	4604      	mov	r4, r0
 800e080:	6003      	str	r3, [r0, #0]
 800e082:	f04f 0900 	mov.w	r9, #0
 800e086:	07eb      	lsls	r3, r5, #31
 800e088:	d50a      	bpl.n	800e0a0 <__pow5mult+0x58>
 800e08a:	4631      	mov	r1, r6
 800e08c:	4622      	mov	r2, r4
 800e08e:	4638      	mov	r0, r7
 800e090:	f7ff ff30 	bl	800def4 <__multiply>
 800e094:	4631      	mov	r1, r6
 800e096:	4680      	mov	r8, r0
 800e098:	4638      	mov	r0, r7
 800e09a:	f7ff fe7a 	bl	800dd92 <_Bfree>
 800e09e:	4646      	mov	r6, r8
 800e0a0:	106d      	asrs	r5, r5, #1
 800e0a2:	d00b      	beq.n	800e0bc <__pow5mult+0x74>
 800e0a4:	6820      	ldr	r0, [r4, #0]
 800e0a6:	b938      	cbnz	r0, 800e0b8 <__pow5mult+0x70>
 800e0a8:	4622      	mov	r2, r4
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	f7ff ff21 	bl	800def4 <__multiply>
 800e0b2:	6020      	str	r0, [r4, #0]
 800e0b4:	f8c0 9000 	str.w	r9, [r0]
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	e7e4      	b.n	800e086 <__pow5mult+0x3e>
 800e0bc:	4630      	mov	r0, r6
 800e0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0800fb84 	.word	0x0800fb84

0800e0c8 <__lshift>:
 800e0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	6849      	ldr	r1, [r1, #4]
 800e0d0:	6923      	ldr	r3, [r4, #16]
 800e0d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e0d6:	68a3      	ldr	r3, [r4, #8]
 800e0d8:	4607      	mov	r7, r0
 800e0da:	4691      	mov	r9, r2
 800e0dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0e0:	f108 0601 	add.w	r6, r8, #1
 800e0e4:	42b3      	cmp	r3, r6
 800e0e6:	db0b      	blt.n	800e100 <__lshift+0x38>
 800e0e8:	4638      	mov	r0, r7
 800e0ea:	f7ff fe2d 	bl	800dd48 <_Balloc>
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	b948      	cbnz	r0, 800e106 <__lshift+0x3e>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	4b28      	ldr	r3, [pc, #160]	@ (800e198 <__lshift+0xd0>)
 800e0f6:	4829      	ldr	r0, [pc, #164]	@ (800e19c <__lshift+0xd4>)
 800e0f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e0fc:	f000 fa04 	bl	800e508 <__assert_func>
 800e100:	3101      	adds	r1, #1
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	e7ee      	b.n	800e0e4 <__lshift+0x1c>
 800e106:	2300      	movs	r3, #0
 800e108:	f100 0114 	add.w	r1, r0, #20
 800e10c:	f100 0210 	add.w	r2, r0, #16
 800e110:	4618      	mov	r0, r3
 800e112:	4553      	cmp	r3, sl
 800e114:	db33      	blt.n	800e17e <__lshift+0xb6>
 800e116:	6920      	ldr	r0, [r4, #16]
 800e118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e11c:	f104 0314 	add.w	r3, r4, #20
 800e120:	f019 091f 	ands.w	r9, r9, #31
 800e124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e128:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e12c:	d02b      	beq.n	800e186 <__lshift+0xbe>
 800e12e:	f1c9 0e20 	rsb	lr, r9, #32
 800e132:	468a      	mov	sl, r1
 800e134:	2200      	movs	r2, #0
 800e136:	6818      	ldr	r0, [r3, #0]
 800e138:	fa00 f009 	lsl.w	r0, r0, r9
 800e13c:	4310      	orrs	r0, r2
 800e13e:	f84a 0b04 	str.w	r0, [sl], #4
 800e142:	f853 2b04 	ldr.w	r2, [r3], #4
 800e146:	459c      	cmp	ip, r3
 800e148:	fa22 f20e 	lsr.w	r2, r2, lr
 800e14c:	d8f3      	bhi.n	800e136 <__lshift+0x6e>
 800e14e:	ebac 0304 	sub.w	r3, ip, r4
 800e152:	3b15      	subs	r3, #21
 800e154:	f023 0303 	bic.w	r3, r3, #3
 800e158:	3304      	adds	r3, #4
 800e15a:	f104 0015 	add.w	r0, r4, #21
 800e15e:	4584      	cmp	ip, r0
 800e160:	bf38      	it	cc
 800e162:	2304      	movcc	r3, #4
 800e164:	50ca      	str	r2, [r1, r3]
 800e166:	b10a      	cbz	r2, 800e16c <__lshift+0xa4>
 800e168:	f108 0602 	add.w	r6, r8, #2
 800e16c:	3e01      	subs	r6, #1
 800e16e:	4638      	mov	r0, r7
 800e170:	612e      	str	r6, [r5, #16]
 800e172:	4621      	mov	r1, r4
 800e174:	f7ff fe0d 	bl	800dd92 <_Bfree>
 800e178:	4628      	mov	r0, r5
 800e17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e17e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e182:	3301      	adds	r3, #1
 800e184:	e7c5      	b.n	800e112 <__lshift+0x4a>
 800e186:	3904      	subs	r1, #4
 800e188:	f853 2b04 	ldr.w	r2, [r3], #4
 800e18c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e190:	459c      	cmp	ip, r3
 800e192:	d8f9      	bhi.n	800e188 <__lshift+0xc0>
 800e194:	e7ea      	b.n	800e16c <__lshift+0xa4>
 800e196:	bf00      	nop
 800e198:	0800fac1 	.word	0x0800fac1
 800e19c:	0800fb2a 	.word	0x0800fb2a

0800e1a0 <__mcmp>:
 800e1a0:	690a      	ldr	r2, [r1, #16]
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	6900      	ldr	r0, [r0, #16]
 800e1a6:	1a80      	subs	r0, r0, r2
 800e1a8:	b530      	push	{r4, r5, lr}
 800e1aa:	d10e      	bne.n	800e1ca <__mcmp+0x2a>
 800e1ac:	3314      	adds	r3, #20
 800e1ae:	3114      	adds	r1, #20
 800e1b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e1b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e1b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e1bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e1c0:	4295      	cmp	r5, r2
 800e1c2:	d003      	beq.n	800e1cc <__mcmp+0x2c>
 800e1c4:	d205      	bcs.n	800e1d2 <__mcmp+0x32>
 800e1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ca:	bd30      	pop	{r4, r5, pc}
 800e1cc:	42a3      	cmp	r3, r4
 800e1ce:	d3f3      	bcc.n	800e1b8 <__mcmp+0x18>
 800e1d0:	e7fb      	b.n	800e1ca <__mcmp+0x2a>
 800e1d2:	2001      	movs	r0, #1
 800e1d4:	e7f9      	b.n	800e1ca <__mcmp+0x2a>
	...

0800e1d8 <__mdiff>:
 800e1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	4689      	mov	r9, r1
 800e1de:	4606      	mov	r6, r0
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	4648      	mov	r0, r9
 800e1e4:	4614      	mov	r4, r2
 800e1e6:	f7ff ffdb 	bl	800e1a0 <__mcmp>
 800e1ea:	1e05      	subs	r5, r0, #0
 800e1ec:	d112      	bne.n	800e214 <__mdiff+0x3c>
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f7ff fda9 	bl	800dd48 <_Balloc>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	b928      	cbnz	r0, 800e206 <__mdiff+0x2e>
 800e1fa:	4b3f      	ldr	r3, [pc, #252]	@ (800e2f8 <__mdiff+0x120>)
 800e1fc:	f240 2137 	movw	r1, #567	@ 0x237
 800e200:	483e      	ldr	r0, [pc, #248]	@ (800e2fc <__mdiff+0x124>)
 800e202:	f000 f981 	bl	800e508 <__assert_func>
 800e206:	2301      	movs	r3, #1
 800e208:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e20c:	4610      	mov	r0, r2
 800e20e:	b003      	add	sp, #12
 800e210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e214:	bfbc      	itt	lt
 800e216:	464b      	movlt	r3, r9
 800e218:	46a1      	movlt	r9, r4
 800e21a:	4630      	mov	r0, r6
 800e21c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e220:	bfba      	itte	lt
 800e222:	461c      	movlt	r4, r3
 800e224:	2501      	movlt	r5, #1
 800e226:	2500      	movge	r5, #0
 800e228:	f7ff fd8e 	bl	800dd48 <_Balloc>
 800e22c:	4602      	mov	r2, r0
 800e22e:	b918      	cbnz	r0, 800e238 <__mdiff+0x60>
 800e230:	4b31      	ldr	r3, [pc, #196]	@ (800e2f8 <__mdiff+0x120>)
 800e232:	f240 2145 	movw	r1, #581	@ 0x245
 800e236:	e7e3      	b.n	800e200 <__mdiff+0x28>
 800e238:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e23c:	6926      	ldr	r6, [r4, #16]
 800e23e:	60c5      	str	r5, [r0, #12]
 800e240:	f109 0310 	add.w	r3, r9, #16
 800e244:	f109 0514 	add.w	r5, r9, #20
 800e248:	f104 0e14 	add.w	lr, r4, #20
 800e24c:	f100 0b14 	add.w	fp, r0, #20
 800e250:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e254:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	46d9      	mov	r9, fp
 800e25c:	f04f 0c00 	mov.w	ip, #0
 800e260:	9b01      	ldr	r3, [sp, #4]
 800e262:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e266:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e26a:	9301      	str	r3, [sp, #4]
 800e26c:	fa1f f38a 	uxth.w	r3, sl
 800e270:	4619      	mov	r1, r3
 800e272:	b283      	uxth	r3, r0
 800e274:	1acb      	subs	r3, r1, r3
 800e276:	0c00      	lsrs	r0, r0, #16
 800e278:	4463      	add	r3, ip
 800e27a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e27e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e282:	b29b      	uxth	r3, r3
 800e284:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e288:	4576      	cmp	r6, lr
 800e28a:	f849 3b04 	str.w	r3, [r9], #4
 800e28e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e292:	d8e5      	bhi.n	800e260 <__mdiff+0x88>
 800e294:	1b33      	subs	r3, r6, r4
 800e296:	3b15      	subs	r3, #21
 800e298:	f023 0303 	bic.w	r3, r3, #3
 800e29c:	3415      	adds	r4, #21
 800e29e:	3304      	adds	r3, #4
 800e2a0:	42a6      	cmp	r6, r4
 800e2a2:	bf38      	it	cc
 800e2a4:	2304      	movcc	r3, #4
 800e2a6:	441d      	add	r5, r3
 800e2a8:	445b      	add	r3, fp
 800e2aa:	461e      	mov	r6, r3
 800e2ac:	462c      	mov	r4, r5
 800e2ae:	4544      	cmp	r4, r8
 800e2b0:	d30e      	bcc.n	800e2d0 <__mdiff+0xf8>
 800e2b2:	f108 0103 	add.w	r1, r8, #3
 800e2b6:	1b49      	subs	r1, r1, r5
 800e2b8:	f021 0103 	bic.w	r1, r1, #3
 800e2bc:	3d03      	subs	r5, #3
 800e2be:	45a8      	cmp	r8, r5
 800e2c0:	bf38      	it	cc
 800e2c2:	2100      	movcc	r1, #0
 800e2c4:	440b      	add	r3, r1
 800e2c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2ca:	b191      	cbz	r1, 800e2f2 <__mdiff+0x11a>
 800e2cc:	6117      	str	r7, [r2, #16]
 800e2ce:	e79d      	b.n	800e20c <__mdiff+0x34>
 800e2d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e2d4:	46e6      	mov	lr, ip
 800e2d6:	0c08      	lsrs	r0, r1, #16
 800e2d8:	fa1c fc81 	uxtah	ip, ip, r1
 800e2dc:	4471      	add	r1, lr
 800e2de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e2e2:	b289      	uxth	r1, r1
 800e2e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e2e8:	f846 1b04 	str.w	r1, [r6], #4
 800e2ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e2f0:	e7dd      	b.n	800e2ae <__mdiff+0xd6>
 800e2f2:	3f01      	subs	r7, #1
 800e2f4:	e7e7      	b.n	800e2c6 <__mdiff+0xee>
 800e2f6:	bf00      	nop
 800e2f8:	0800fac1 	.word	0x0800fac1
 800e2fc:	0800fb2a 	.word	0x0800fb2a

0800e300 <__d2b>:
 800e300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e304:	460f      	mov	r7, r1
 800e306:	2101      	movs	r1, #1
 800e308:	ec59 8b10 	vmov	r8, r9, d0
 800e30c:	4616      	mov	r6, r2
 800e30e:	f7ff fd1b 	bl	800dd48 <_Balloc>
 800e312:	4604      	mov	r4, r0
 800e314:	b930      	cbnz	r0, 800e324 <__d2b+0x24>
 800e316:	4602      	mov	r2, r0
 800e318:	4b23      	ldr	r3, [pc, #140]	@ (800e3a8 <__d2b+0xa8>)
 800e31a:	4824      	ldr	r0, [pc, #144]	@ (800e3ac <__d2b+0xac>)
 800e31c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e320:	f000 f8f2 	bl	800e508 <__assert_func>
 800e324:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e32c:	b10d      	cbz	r5, 800e332 <__d2b+0x32>
 800e32e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e332:	9301      	str	r3, [sp, #4]
 800e334:	f1b8 0300 	subs.w	r3, r8, #0
 800e338:	d023      	beq.n	800e382 <__d2b+0x82>
 800e33a:	4668      	mov	r0, sp
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	f7ff fd96 	bl	800de6e <__lo0bits>
 800e342:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e346:	b1d0      	cbz	r0, 800e37e <__d2b+0x7e>
 800e348:	f1c0 0320 	rsb	r3, r0, #32
 800e34c:	fa02 f303 	lsl.w	r3, r2, r3
 800e350:	430b      	orrs	r3, r1
 800e352:	40c2      	lsrs	r2, r0
 800e354:	6163      	str	r3, [r4, #20]
 800e356:	9201      	str	r2, [sp, #4]
 800e358:	9b01      	ldr	r3, [sp, #4]
 800e35a:	61a3      	str	r3, [r4, #24]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bf0c      	ite	eq
 800e360:	2201      	moveq	r2, #1
 800e362:	2202      	movne	r2, #2
 800e364:	6122      	str	r2, [r4, #16]
 800e366:	b1a5      	cbz	r5, 800e392 <__d2b+0x92>
 800e368:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e36c:	4405      	add	r5, r0
 800e36e:	603d      	str	r5, [r7, #0]
 800e370:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e374:	6030      	str	r0, [r6, #0]
 800e376:	4620      	mov	r0, r4
 800e378:	b003      	add	sp, #12
 800e37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e37e:	6161      	str	r1, [r4, #20]
 800e380:	e7ea      	b.n	800e358 <__d2b+0x58>
 800e382:	a801      	add	r0, sp, #4
 800e384:	f7ff fd73 	bl	800de6e <__lo0bits>
 800e388:	9b01      	ldr	r3, [sp, #4]
 800e38a:	6163      	str	r3, [r4, #20]
 800e38c:	3020      	adds	r0, #32
 800e38e:	2201      	movs	r2, #1
 800e390:	e7e8      	b.n	800e364 <__d2b+0x64>
 800e392:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e396:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e39a:	6038      	str	r0, [r7, #0]
 800e39c:	6918      	ldr	r0, [r3, #16]
 800e39e:	f7ff fd47 	bl	800de30 <__hi0bits>
 800e3a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3a6:	e7e5      	b.n	800e374 <__d2b+0x74>
 800e3a8:	0800fac1 	.word	0x0800fac1
 800e3ac:	0800fb2a 	.word	0x0800fb2a

0800e3b0 <__ssprint_r>:
 800e3b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b4:	6893      	ldr	r3, [r2, #8]
 800e3b6:	f8d2 b000 	ldr.w	fp, [r2]
 800e3ba:	9001      	str	r0, [sp, #4]
 800e3bc:	460c      	mov	r4, r1
 800e3be:	4617      	mov	r7, r2
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d157      	bne.n	800e474 <__ssprint_r+0xc4>
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	607b      	str	r3, [r7, #4]
 800e3ca:	b003      	add	sp, #12
 800e3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d0:	e9db a800 	ldrd	sl, r8, [fp]
 800e3d4:	f10b 0b08 	add.w	fp, fp, #8
 800e3d8:	68a6      	ldr	r6, [r4, #8]
 800e3da:	6820      	ldr	r0, [r4, #0]
 800e3dc:	f1b8 0f00 	cmp.w	r8, #0
 800e3e0:	d0f6      	beq.n	800e3d0 <__ssprint_r+0x20>
 800e3e2:	45b0      	cmp	r8, r6
 800e3e4:	d32e      	bcc.n	800e444 <__ssprint_r+0x94>
 800e3e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3ea:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3ee:	d029      	beq.n	800e444 <__ssprint_r+0x94>
 800e3f0:	6921      	ldr	r1, [r4, #16]
 800e3f2:	6965      	ldr	r5, [r4, #20]
 800e3f4:	eba0 0901 	sub.w	r9, r0, r1
 800e3f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e400:	f109 0001 	add.w	r0, r9, #1
 800e404:	106d      	asrs	r5, r5, #1
 800e406:	4440      	add	r0, r8
 800e408:	4285      	cmp	r5, r0
 800e40a:	bf38      	it	cc
 800e40c:	4605      	movcc	r5, r0
 800e40e:	0553      	lsls	r3, r2, #21
 800e410:	d534      	bpl.n	800e47c <__ssprint_r+0xcc>
 800e412:	9801      	ldr	r0, [sp, #4]
 800e414:	4629      	mov	r1, r5
 800e416:	f7fd f87b 	bl	800b510 <_malloc_r>
 800e41a:	4606      	mov	r6, r0
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d038      	beq.n	800e492 <__ssprint_r+0xe2>
 800e420:	464a      	mov	r2, r9
 800e422:	6921      	ldr	r1, [r4, #16]
 800e424:	f000 f862 	bl	800e4ec <memcpy>
 800e428:	89a2      	ldrh	r2, [r4, #12]
 800e42a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800e42e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800e432:	81a2      	strh	r2, [r4, #12]
 800e434:	6126      	str	r6, [r4, #16]
 800e436:	6165      	str	r5, [r4, #20]
 800e438:	444e      	add	r6, r9
 800e43a:	eba5 0509 	sub.w	r5, r5, r9
 800e43e:	6026      	str	r6, [r4, #0]
 800e440:	60a5      	str	r5, [r4, #8]
 800e442:	4646      	mov	r6, r8
 800e444:	4546      	cmp	r6, r8
 800e446:	bf28      	it	cs
 800e448:	4646      	movcs	r6, r8
 800e44a:	4632      	mov	r2, r6
 800e44c:	4651      	mov	r1, sl
 800e44e:	6820      	ldr	r0, [r4, #0]
 800e450:	f000 f82b 	bl	800e4aa <memmove>
 800e454:	68a2      	ldr	r2, [r4, #8]
 800e456:	1b92      	subs	r2, r2, r6
 800e458:	60a2      	str	r2, [r4, #8]
 800e45a:	6822      	ldr	r2, [r4, #0]
 800e45c:	4432      	add	r2, r6
 800e45e:	6022      	str	r2, [r4, #0]
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	eba2 0308 	sub.w	r3, r2, r8
 800e466:	44c2      	add	sl, r8
 800e468:	60bb      	str	r3, [r7, #8]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0aa      	beq.n	800e3c4 <__ssprint_r+0x14>
 800e46e:	f04f 0800 	mov.w	r8, #0
 800e472:	e7b1      	b.n	800e3d8 <__ssprint_r+0x28>
 800e474:	f04f 0a00 	mov.w	sl, #0
 800e478:	46d0      	mov	r8, sl
 800e47a:	e7ad      	b.n	800e3d8 <__ssprint_r+0x28>
 800e47c:	9801      	ldr	r0, [sp, #4]
 800e47e:	462a      	mov	r2, r5
 800e480:	f000 f8a8 	bl	800e5d4 <_realloc_r>
 800e484:	4606      	mov	r6, r0
 800e486:	2800      	cmp	r0, #0
 800e488:	d1d4      	bne.n	800e434 <__ssprint_r+0x84>
 800e48a:	6921      	ldr	r1, [r4, #16]
 800e48c:	9801      	ldr	r0, [sp, #4]
 800e48e:	f7fc ff7f 	bl	800b390 <_free_r>
 800e492:	9a01      	ldr	r2, [sp, #4]
 800e494:	230c      	movs	r3, #12
 800e496:	6013      	str	r3, [r2, #0]
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e49e:	81a3      	strh	r3, [r4, #12]
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	60bb      	str	r3, [r7, #8]
 800e4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a8:	e78d      	b.n	800e3c6 <__ssprint_r+0x16>

0800e4aa <memmove>:
 800e4aa:	4288      	cmp	r0, r1
 800e4ac:	b510      	push	{r4, lr}
 800e4ae:	eb01 0402 	add.w	r4, r1, r2
 800e4b2:	d902      	bls.n	800e4ba <memmove+0x10>
 800e4b4:	4284      	cmp	r4, r0
 800e4b6:	4623      	mov	r3, r4
 800e4b8:	d807      	bhi.n	800e4ca <memmove+0x20>
 800e4ba:	1e43      	subs	r3, r0, #1
 800e4bc:	42a1      	cmp	r1, r4
 800e4be:	d008      	beq.n	800e4d2 <memmove+0x28>
 800e4c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4c8:	e7f8      	b.n	800e4bc <memmove+0x12>
 800e4ca:	4402      	add	r2, r0
 800e4cc:	4601      	mov	r1, r0
 800e4ce:	428a      	cmp	r2, r1
 800e4d0:	d100      	bne.n	800e4d4 <memmove+0x2a>
 800e4d2:	bd10      	pop	{r4, pc}
 800e4d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4dc:	e7f7      	b.n	800e4ce <memmove+0x24>
	...

0800e4e0 <__locale_mb_cur_max>:
 800e4e0:	4b01      	ldr	r3, [pc, #4]	@ (800e4e8 <__locale_mb_cur_max+0x8>)
 800e4e2:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800e4e6:	4770      	bx	lr
 800e4e8:	20000644 	.word	0x20000644

0800e4ec <memcpy>:
 800e4ec:	440a      	add	r2, r1
 800e4ee:	4291      	cmp	r1, r2
 800e4f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4f4:	d100      	bne.n	800e4f8 <memcpy+0xc>
 800e4f6:	4770      	bx	lr
 800e4f8:	b510      	push	{r4, lr}
 800e4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e502:	4291      	cmp	r1, r2
 800e504:	d1f9      	bne.n	800e4fa <memcpy+0xe>
 800e506:	bd10      	pop	{r4, pc}

0800e508 <__assert_func>:
 800e508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e50a:	4614      	mov	r4, r2
 800e50c:	461a      	mov	r2, r3
 800e50e:	4b09      	ldr	r3, [pc, #36]	@ (800e534 <__assert_func+0x2c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4605      	mov	r5, r0
 800e514:	68d8      	ldr	r0, [r3, #12]
 800e516:	b954      	cbnz	r4, 800e52e <__assert_func+0x26>
 800e518:	4b07      	ldr	r3, [pc, #28]	@ (800e538 <__assert_func+0x30>)
 800e51a:	461c      	mov	r4, r3
 800e51c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e520:	9100      	str	r1, [sp, #0]
 800e522:	462b      	mov	r3, r5
 800e524:	4905      	ldr	r1, [pc, #20]	@ (800e53c <__assert_func+0x34>)
 800e526:	f000 fa0b 	bl	800e940 <fiprintf>
 800e52a:	f001 f921 	bl	800f770 <abort>
 800e52e:	4b04      	ldr	r3, [pc, #16]	@ (800e540 <__assert_func+0x38>)
 800e530:	e7f4      	b.n	800e51c <__assert_func+0x14>
 800e532:	bf00      	nop
 800e534:	20000108 	.word	0x20000108
 800e538:	0800fcc5 	.word	0x0800fcc5
 800e53c:	0800fc97 	.word	0x0800fc97
 800e540:	0800fc8a 	.word	0x0800fc8a

0800e544 <_calloc_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	fba1 1502 	umull	r1, r5, r1, r2
 800e54a:	b935      	cbnz	r5, 800e55a <_calloc_r+0x16>
 800e54c:	f7fc ffe0 	bl	800b510 <_malloc_r>
 800e550:	4604      	mov	r4, r0
 800e552:	b938      	cbnz	r0, 800e564 <_calloc_r+0x20>
 800e554:	2400      	movs	r4, #0
 800e556:	4620      	mov	r0, r4
 800e558:	bd38      	pop	{r3, r4, r5, pc}
 800e55a:	f7fc fe85 	bl	800b268 <__errno>
 800e55e:	230c      	movs	r3, #12
 800e560:	6003      	str	r3, [r0, #0]
 800e562:	e7f7      	b.n	800e554 <_calloc_r+0x10>
 800e564:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e568:	f022 0203 	bic.w	r2, r2, #3
 800e56c:	3a04      	subs	r2, #4
 800e56e:	2a24      	cmp	r2, #36	@ 0x24
 800e570:	d819      	bhi.n	800e5a6 <_calloc_r+0x62>
 800e572:	2a13      	cmp	r2, #19
 800e574:	d915      	bls.n	800e5a2 <_calloc_r+0x5e>
 800e576:	2a1b      	cmp	r2, #27
 800e578:	e9c0 5500 	strd	r5, r5, [r0]
 800e57c:	d806      	bhi.n	800e58c <_calloc_r+0x48>
 800e57e:	f100 0308 	add.w	r3, r0, #8
 800e582:	2200      	movs	r2, #0
 800e584:	e9c3 2200 	strd	r2, r2, [r3]
 800e588:	609a      	str	r2, [r3, #8]
 800e58a:	e7e4      	b.n	800e556 <_calloc_r+0x12>
 800e58c:	2a24      	cmp	r2, #36	@ 0x24
 800e58e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e592:	bf11      	iteee	ne
 800e594:	f100 0310 	addne.w	r3, r0, #16
 800e598:	6105      	streq	r5, [r0, #16]
 800e59a:	f100 0318 	addeq.w	r3, r0, #24
 800e59e:	6145      	streq	r5, [r0, #20]
 800e5a0:	e7ef      	b.n	800e582 <_calloc_r+0x3e>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	e7ed      	b.n	800e582 <_calloc_r+0x3e>
 800e5a6:	4629      	mov	r1, r5
 800e5a8:	f7fc fe0f 	bl	800b1ca <memset>
 800e5ac:	e7d3      	b.n	800e556 <_calloc_r+0x12>

0800e5ae <__ascii_mbtowc>:
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	b901      	cbnz	r1, 800e5b4 <__ascii_mbtowc+0x6>
 800e5b2:	a901      	add	r1, sp, #4
 800e5b4:	b142      	cbz	r2, 800e5c8 <__ascii_mbtowc+0x1a>
 800e5b6:	b14b      	cbz	r3, 800e5cc <__ascii_mbtowc+0x1e>
 800e5b8:	7813      	ldrb	r3, [r2, #0]
 800e5ba:	600b      	str	r3, [r1, #0]
 800e5bc:	7812      	ldrb	r2, [r2, #0]
 800e5be:	1e10      	subs	r0, r2, #0
 800e5c0:	bf18      	it	ne
 800e5c2:	2001      	movne	r0, #1
 800e5c4:	b002      	add	sp, #8
 800e5c6:	4770      	bx	lr
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	e7fb      	b.n	800e5c4 <__ascii_mbtowc+0x16>
 800e5cc:	f06f 0001 	mvn.w	r0, #1
 800e5d0:	e7f8      	b.n	800e5c4 <__ascii_mbtowc+0x16>
	...

0800e5d4 <_realloc_r>:
 800e5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d8:	4682      	mov	sl, r0
 800e5da:	4693      	mov	fp, r2
 800e5dc:	460c      	mov	r4, r1
 800e5de:	b929      	cbnz	r1, 800e5ec <_realloc_r+0x18>
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	b003      	add	sp, #12
 800e5e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e8:	f7fc bf92 	b.w	800b510 <_malloc_r>
 800e5ec:	f7fd f9ca 	bl	800b984 <__malloc_lock>
 800e5f0:	f10b 080b 	add.w	r8, fp, #11
 800e5f4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800e5f8:	f1b8 0f16 	cmp.w	r8, #22
 800e5fc:	f1a4 0908 	sub.w	r9, r4, #8
 800e600:	f025 0603 	bic.w	r6, r5, #3
 800e604:	d908      	bls.n	800e618 <_realloc_r+0x44>
 800e606:	f038 0807 	bics.w	r8, r8, #7
 800e60a:	d507      	bpl.n	800e61c <_realloc_r+0x48>
 800e60c:	230c      	movs	r3, #12
 800e60e:	f8ca 3000 	str.w	r3, [sl]
 800e612:	f04f 0b00 	mov.w	fp, #0
 800e616:	e032      	b.n	800e67e <_realloc_r+0xaa>
 800e618:	f04f 0810 	mov.w	r8, #16
 800e61c:	45c3      	cmp	fp, r8
 800e61e:	d8f5      	bhi.n	800e60c <_realloc_r+0x38>
 800e620:	4546      	cmp	r6, r8
 800e622:	f280 8174 	bge.w	800e90e <_realloc_r+0x33a>
 800e626:	4b9e      	ldr	r3, [pc, #632]	@ (800e8a0 <_realloc_r+0x2cc>)
 800e628:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800e62c:	eb09 0106 	add.w	r1, r9, r6
 800e630:	458c      	cmp	ip, r1
 800e632:	6848      	ldr	r0, [r1, #4]
 800e634:	d005      	beq.n	800e642 <_realloc_r+0x6e>
 800e636:	f020 0201 	bic.w	r2, r0, #1
 800e63a:	440a      	add	r2, r1
 800e63c:	6852      	ldr	r2, [r2, #4]
 800e63e:	07d7      	lsls	r7, r2, #31
 800e640:	d449      	bmi.n	800e6d6 <_realloc_r+0x102>
 800e642:	f020 0003 	bic.w	r0, r0, #3
 800e646:	458c      	cmp	ip, r1
 800e648:	eb06 0700 	add.w	r7, r6, r0
 800e64c:	d11b      	bne.n	800e686 <_realloc_r+0xb2>
 800e64e:	f108 0210 	add.w	r2, r8, #16
 800e652:	42ba      	cmp	r2, r7
 800e654:	dc41      	bgt.n	800e6da <_realloc_r+0x106>
 800e656:	eb09 0208 	add.w	r2, r9, r8
 800e65a:	eba7 0708 	sub.w	r7, r7, r8
 800e65e:	f047 0701 	orr.w	r7, r7, #1
 800e662:	609a      	str	r2, [r3, #8]
 800e664:	6057      	str	r7, [r2, #4]
 800e666:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e66a:	f003 0301 	and.w	r3, r3, #1
 800e66e:	ea43 0308 	orr.w	r3, r3, r8
 800e672:	f844 3c04 	str.w	r3, [r4, #-4]
 800e676:	4650      	mov	r0, sl
 800e678:	f7fd f98a 	bl	800b990 <__malloc_unlock>
 800e67c:	46a3      	mov	fp, r4
 800e67e:	4658      	mov	r0, fp
 800e680:	b003      	add	sp, #12
 800e682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e686:	45b8      	cmp	r8, r7
 800e688:	dc27      	bgt.n	800e6da <_realloc_r+0x106>
 800e68a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800e68e:	60d3      	str	r3, [r2, #12]
 800e690:	609a      	str	r2, [r3, #8]
 800e692:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e696:	eba7 0008 	sub.w	r0, r7, r8
 800e69a:	280f      	cmp	r0, #15
 800e69c:	f003 0301 	and.w	r3, r3, #1
 800e6a0:	eb09 0207 	add.w	r2, r9, r7
 800e6a4:	f240 8135 	bls.w	800e912 <_realloc_r+0x33e>
 800e6a8:	eb09 0108 	add.w	r1, r9, r8
 800e6ac:	ea48 0303 	orr.w	r3, r8, r3
 800e6b0:	f040 0001 	orr.w	r0, r0, #1
 800e6b4:	f8c9 3004 	str.w	r3, [r9, #4]
 800e6b8:	6048      	str	r0, [r1, #4]
 800e6ba:	6853      	ldr	r3, [r2, #4]
 800e6bc:	f043 0301 	orr.w	r3, r3, #1
 800e6c0:	6053      	str	r3, [r2, #4]
 800e6c2:	3108      	adds	r1, #8
 800e6c4:	4650      	mov	r0, sl
 800e6c6:	f7fc fe63 	bl	800b390 <_free_r>
 800e6ca:	4650      	mov	r0, sl
 800e6cc:	f7fd f960 	bl	800b990 <__malloc_unlock>
 800e6d0:	f109 0b08 	add.w	fp, r9, #8
 800e6d4:	e7d3      	b.n	800e67e <_realloc_r+0xaa>
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	4601      	mov	r1, r0
 800e6da:	07ea      	lsls	r2, r5, #31
 800e6dc:	f100 80c7 	bmi.w	800e86e <_realloc_r+0x29a>
 800e6e0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800e6e4:	eba9 0505 	sub.w	r5, r9, r5
 800e6e8:	686a      	ldr	r2, [r5, #4]
 800e6ea:	f022 0203 	bic.w	r2, r2, #3
 800e6ee:	4432      	add	r2, r6
 800e6f0:	9201      	str	r2, [sp, #4]
 800e6f2:	2900      	cmp	r1, #0
 800e6f4:	f000 8086 	beq.w	800e804 <_realloc_r+0x230>
 800e6f8:	458c      	cmp	ip, r1
 800e6fa:	eb00 0702 	add.w	r7, r0, r2
 800e6fe:	d149      	bne.n	800e794 <_realloc_r+0x1c0>
 800e700:	f108 0210 	add.w	r2, r8, #16
 800e704:	42ba      	cmp	r2, r7
 800e706:	dc7d      	bgt.n	800e804 <_realloc_r+0x230>
 800e708:	46ab      	mov	fp, r5
 800e70a:	68ea      	ldr	r2, [r5, #12]
 800e70c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800e710:	60ca      	str	r2, [r1, #12]
 800e712:	6091      	str	r1, [r2, #8]
 800e714:	1f32      	subs	r2, r6, #4
 800e716:	2a24      	cmp	r2, #36	@ 0x24
 800e718:	d836      	bhi.n	800e788 <_realloc_r+0x1b4>
 800e71a:	2a13      	cmp	r2, #19
 800e71c:	d932      	bls.n	800e784 <_realloc_r+0x1b0>
 800e71e:	6821      	ldr	r1, [r4, #0]
 800e720:	60a9      	str	r1, [r5, #8]
 800e722:	6861      	ldr	r1, [r4, #4]
 800e724:	60e9      	str	r1, [r5, #12]
 800e726:	2a1b      	cmp	r2, #27
 800e728:	d81a      	bhi.n	800e760 <_realloc_r+0x18c>
 800e72a:	3408      	adds	r4, #8
 800e72c:	f105 0210 	add.w	r2, r5, #16
 800e730:	6821      	ldr	r1, [r4, #0]
 800e732:	6011      	str	r1, [r2, #0]
 800e734:	6861      	ldr	r1, [r4, #4]
 800e736:	6051      	str	r1, [r2, #4]
 800e738:	68a1      	ldr	r1, [r4, #8]
 800e73a:	6091      	str	r1, [r2, #8]
 800e73c:	eb05 0208 	add.w	r2, r5, r8
 800e740:	eba7 0708 	sub.w	r7, r7, r8
 800e744:	f047 0701 	orr.w	r7, r7, #1
 800e748:	609a      	str	r2, [r3, #8]
 800e74a:	6057      	str	r7, [r2, #4]
 800e74c:	686b      	ldr	r3, [r5, #4]
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	ea43 0308 	orr.w	r3, r3, r8
 800e756:	606b      	str	r3, [r5, #4]
 800e758:	4650      	mov	r0, sl
 800e75a:	f7fd f919 	bl	800b990 <__malloc_unlock>
 800e75e:	e78e      	b.n	800e67e <_realloc_r+0xaa>
 800e760:	68a1      	ldr	r1, [r4, #8]
 800e762:	6129      	str	r1, [r5, #16]
 800e764:	68e1      	ldr	r1, [r4, #12]
 800e766:	6169      	str	r1, [r5, #20]
 800e768:	2a24      	cmp	r2, #36	@ 0x24
 800e76a:	bf01      	itttt	eq
 800e76c:	6922      	ldreq	r2, [r4, #16]
 800e76e:	61aa      	streq	r2, [r5, #24]
 800e770:	6961      	ldreq	r1, [r4, #20]
 800e772:	61e9      	streq	r1, [r5, #28]
 800e774:	bf19      	ittee	ne
 800e776:	3410      	addne	r4, #16
 800e778:	f105 0218 	addne.w	r2, r5, #24
 800e77c:	f105 0220 	addeq.w	r2, r5, #32
 800e780:	3418      	addeq	r4, #24
 800e782:	e7d5      	b.n	800e730 <_realloc_r+0x15c>
 800e784:	465a      	mov	r2, fp
 800e786:	e7d3      	b.n	800e730 <_realloc_r+0x15c>
 800e788:	4621      	mov	r1, r4
 800e78a:	4658      	mov	r0, fp
 800e78c:	f7ff fe8d 	bl	800e4aa <memmove>
 800e790:	4b43      	ldr	r3, [pc, #268]	@ (800e8a0 <_realloc_r+0x2cc>)
 800e792:	e7d3      	b.n	800e73c <_realloc_r+0x168>
 800e794:	45b8      	cmp	r8, r7
 800e796:	dc35      	bgt.n	800e804 <_realloc_r+0x230>
 800e798:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800e79c:	4628      	mov	r0, r5
 800e79e:	60d3      	str	r3, [r2, #12]
 800e7a0:	609a      	str	r2, [r3, #8]
 800e7a2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e7a6:	68eb      	ldr	r3, [r5, #12]
 800e7a8:	60d3      	str	r3, [r2, #12]
 800e7aa:	609a      	str	r2, [r3, #8]
 800e7ac:	1f32      	subs	r2, r6, #4
 800e7ae:	2a24      	cmp	r2, #36	@ 0x24
 800e7b0:	d824      	bhi.n	800e7fc <_realloc_r+0x228>
 800e7b2:	2a13      	cmp	r2, #19
 800e7b4:	d908      	bls.n	800e7c8 <_realloc_r+0x1f4>
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	60ab      	str	r3, [r5, #8]
 800e7ba:	6863      	ldr	r3, [r4, #4]
 800e7bc:	60eb      	str	r3, [r5, #12]
 800e7be:	2a1b      	cmp	r2, #27
 800e7c0:	d80a      	bhi.n	800e7d8 <_realloc_r+0x204>
 800e7c2:	3408      	adds	r4, #8
 800e7c4:	f105 0010 	add.w	r0, r5, #16
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	6003      	str	r3, [r0, #0]
 800e7cc:	6863      	ldr	r3, [r4, #4]
 800e7ce:	6043      	str	r3, [r0, #4]
 800e7d0:	68a3      	ldr	r3, [r4, #8]
 800e7d2:	6083      	str	r3, [r0, #8]
 800e7d4:	46a9      	mov	r9, r5
 800e7d6:	e75c      	b.n	800e692 <_realloc_r+0xbe>
 800e7d8:	68a3      	ldr	r3, [r4, #8]
 800e7da:	612b      	str	r3, [r5, #16]
 800e7dc:	68e3      	ldr	r3, [r4, #12]
 800e7de:	616b      	str	r3, [r5, #20]
 800e7e0:	2a24      	cmp	r2, #36	@ 0x24
 800e7e2:	bf01      	itttt	eq
 800e7e4:	6923      	ldreq	r3, [r4, #16]
 800e7e6:	61ab      	streq	r3, [r5, #24]
 800e7e8:	6963      	ldreq	r3, [r4, #20]
 800e7ea:	61eb      	streq	r3, [r5, #28]
 800e7ec:	bf19      	ittee	ne
 800e7ee:	3410      	addne	r4, #16
 800e7f0:	f105 0018 	addne.w	r0, r5, #24
 800e7f4:	f105 0020 	addeq.w	r0, r5, #32
 800e7f8:	3418      	addeq	r4, #24
 800e7fa:	e7e5      	b.n	800e7c8 <_realloc_r+0x1f4>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	f7ff fe54 	bl	800e4aa <memmove>
 800e802:	e7e7      	b.n	800e7d4 <_realloc_r+0x200>
 800e804:	9b01      	ldr	r3, [sp, #4]
 800e806:	4598      	cmp	r8, r3
 800e808:	dc31      	bgt.n	800e86e <_realloc_r+0x29a>
 800e80a:	4628      	mov	r0, r5
 800e80c:	68eb      	ldr	r3, [r5, #12]
 800e80e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e812:	60d3      	str	r3, [r2, #12]
 800e814:	609a      	str	r2, [r3, #8]
 800e816:	1f32      	subs	r2, r6, #4
 800e818:	2a24      	cmp	r2, #36	@ 0x24
 800e81a:	d824      	bhi.n	800e866 <_realloc_r+0x292>
 800e81c:	2a13      	cmp	r2, #19
 800e81e:	d908      	bls.n	800e832 <_realloc_r+0x25e>
 800e820:	6823      	ldr	r3, [r4, #0]
 800e822:	60ab      	str	r3, [r5, #8]
 800e824:	6863      	ldr	r3, [r4, #4]
 800e826:	60eb      	str	r3, [r5, #12]
 800e828:	2a1b      	cmp	r2, #27
 800e82a:	d80a      	bhi.n	800e842 <_realloc_r+0x26e>
 800e82c:	3408      	adds	r4, #8
 800e82e:	f105 0010 	add.w	r0, r5, #16
 800e832:	6823      	ldr	r3, [r4, #0]
 800e834:	6003      	str	r3, [r0, #0]
 800e836:	6863      	ldr	r3, [r4, #4]
 800e838:	6043      	str	r3, [r0, #4]
 800e83a:	68a3      	ldr	r3, [r4, #8]
 800e83c:	6083      	str	r3, [r0, #8]
 800e83e:	9f01      	ldr	r7, [sp, #4]
 800e840:	e7c8      	b.n	800e7d4 <_realloc_r+0x200>
 800e842:	68a3      	ldr	r3, [r4, #8]
 800e844:	612b      	str	r3, [r5, #16]
 800e846:	68e3      	ldr	r3, [r4, #12]
 800e848:	616b      	str	r3, [r5, #20]
 800e84a:	2a24      	cmp	r2, #36	@ 0x24
 800e84c:	bf01      	itttt	eq
 800e84e:	6923      	ldreq	r3, [r4, #16]
 800e850:	61ab      	streq	r3, [r5, #24]
 800e852:	6963      	ldreq	r3, [r4, #20]
 800e854:	61eb      	streq	r3, [r5, #28]
 800e856:	bf19      	ittee	ne
 800e858:	3410      	addne	r4, #16
 800e85a:	f105 0018 	addne.w	r0, r5, #24
 800e85e:	f105 0020 	addeq.w	r0, r5, #32
 800e862:	3418      	addeq	r4, #24
 800e864:	e7e5      	b.n	800e832 <_realloc_r+0x25e>
 800e866:	4621      	mov	r1, r4
 800e868:	f7ff fe1f 	bl	800e4aa <memmove>
 800e86c:	e7e7      	b.n	800e83e <_realloc_r+0x26a>
 800e86e:	4659      	mov	r1, fp
 800e870:	4650      	mov	r0, sl
 800e872:	f7fc fe4d 	bl	800b510 <_malloc_r>
 800e876:	4683      	mov	fp, r0
 800e878:	b918      	cbnz	r0, 800e882 <_realloc_r+0x2ae>
 800e87a:	4650      	mov	r0, sl
 800e87c:	f7fd f888 	bl	800b990 <__malloc_unlock>
 800e880:	e6c7      	b.n	800e612 <_realloc_r+0x3e>
 800e882:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e886:	f023 0301 	bic.w	r3, r3, #1
 800e88a:	444b      	add	r3, r9
 800e88c:	f1a0 0208 	sub.w	r2, r0, #8
 800e890:	4293      	cmp	r3, r2
 800e892:	d107      	bne.n	800e8a4 <_realloc_r+0x2d0>
 800e894:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800e898:	f027 0703 	bic.w	r7, r7, #3
 800e89c:	4437      	add	r7, r6
 800e89e:	e6f8      	b.n	800e692 <_realloc_r+0xbe>
 800e8a0:	2000023c 	.word	0x2000023c
 800e8a4:	1f32      	subs	r2, r6, #4
 800e8a6:	2a24      	cmp	r2, #36	@ 0x24
 800e8a8:	d82d      	bhi.n	800e906 <_realloc_r+0x332>
 800e8aa:	2a13      	cmp	r2, #19
 800e8ac:	d928      	bls.n	800e900 <_realloc_r+0x32c>
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	6003      	str	r3, [r0, #0]
 800e8b2:	6863      	ldr	r3, [r4, #4]
 800e8b4:	6043      	str	r3, [r0, #4]
 800e8b6:	2a1b      	cmp	r2, #27
 800e8b8:	d80e      	bhi.n	800e8d8 <_realloc_r+0x304>
 800e8ba:	f104 0208 	add.w	r2, r4, #8
 800e8be:	f100 0308 	add.w	r3, r0, #8
 800e8c2:	6811      	ldr	r1, [r2, #0]
 800e8c4:	6019      	str	r1, [r3, #0]
 800e8c6:	6851      	ldr	r1, [r2, #4]
 800e8c8:	6059      	str	r1, [r3, #4]
 800e8ca:	6892      	ldr	r2, [r2, #8]
 800e8cc:	609a      	str	r2, [r3, #8]
 800e8ce:	4621      	mov	r1, r4
 800e8d0:	4650      	mov	r0, sl
 800e8d2:	f7fc fd5d 	bl	800b390 <_free_r>
 800e8d6:	e73f      	b.n	800e758 <_realloc_r+0x184>
 800e8d8:	68a3      	ldr	r3, [r4, #8]
 800e8da:	6083      	str	r3, [r0, #8]
 800e8dc:	68e3      	ldr	r3, [r4, #12]
 800e8de:	60c3      	str	r3, [r0, #12]
 800e8e0:	2a24      	cmp	r2, #36	@ 0x24
 800e8e2:	bf01      	itttt	eq
 800e8e4:	6923      	ldreq	r3, [r4, #16]
 800e8e6:	6103      	streq	r3, [r0, #16]
 800e8e8:	6961      	ldreq	r1, [r4, #20]
 800e8ea:	6141      	streq	r1, [r0, #20]
 800e8ec:	bf19      	ittee	ne
 800e8ee:	f104 0210 	addne.w	r2, r4, #16
 800e8f2:	f100 0310 	addne.w	r3, r0, #16
 800e8f6:	f104 0218 	addeq.w	r2, r4, #24
 800e8fa:	f100 0318 	addeq.w	r3, r0, #24
 800e8fe:	e7e0      	b.n	800e8c2 <_realloc_r+0x2ee>
 800e900:	4603      	mov	r3, r0
 800e902:	4622      	mov	r2, r4
 800e904:	e7dd      	b.n	800e8c2 <_realloc_r+0x2ee>
 800e906:	4621      	mov	r1, r4
 800e908:	f7ff fdcf 	bl	800e4aa <memmove>
 800e90c:	e7df      	b.n	800e8ce <_realloc_r+0x2fa>
 800e90e:	4637      	mov	r7, r6
 800e910:	e6bf      	b.n	800e692 <_realloc_r+0xbe>
 800e912:	431f      	orrs	r7, r3
 800e914:	f8c9 7004 	str.w	r7, [r9, #4]
 800e918:	6853      	ldr	r3, [r2, #4]
 800e91a:	f043 0301 	orr.w	r3, r3, #1
 800e91e:	6053      	str	r3, [r2, #4]
 800e920:	e6d3      	b.n	800e6ca <_realloc_r+0xf6>
 800e922:	bf00      	nop

0800e924 <__ascii_wctomb>:
 800e924:	4603      	mov	r3, r0
 800e926:	4608      	mov	r0, r1
 800e928:	b141      	cbz	r1, 800e93c <__ascii_wctomb+0x18>
 800e92a:	2aff      	cmp	r2, #255	@ 0xff
 800e92c:	d904      	bls.n	800e938 <__ascii_wctomb+0x14>
 800e92e:	228a      	movs	r2, #138	@ 0x8a
 800e930:	601a      	str	r2, [r3, #0]
 800e932:	f04f 30ff 	mov.w	r0, #4294967295
 800e936:	4770      	bx	lr
 800e938:	700a      	strb	r2, [r1, #0]
 800e93a:	2001      	movs	r0, #1
 800e93c:	4770      	bx	lr
	...

0800e940 <fiprintf>:
 800e940:	b40e      	push	{r1, r2, r3}
 800e942:	b503      	push	{r0, r1, lr}
 800e944:	4601      	mov	r1, r0
 800e946:	ab03      	add	r3, sp, #12
 800e948:	4805      	ldr	r0, [pc, #20]	@ (800e960 <fiprintf+0x20>)
 800e94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e94e:	6800      	ldr	r0, [r0, #0]
 800e950:	9301      	str	r3, [sp, #4]
 800e952:	f000 f839 	bl	800e9c8 <_vfiprintf_r>
 800e956:	b002      	add	sp, #8
 800e958:	f85d eb04 	ldr.w	lr, [sp], #4
 800e95c:	b003      	add	sp, #12
 800e95e:	4770      	bx	lr
 800e960:	20000108 	.word	0x20000108

0800e964 <__sprint_r>:
 800e964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e968:	6893      	ldr	r3, [r2, #8]
 800e96a:	4680      	mov	r8, r0
 800e96c:	460e      	mov	r6, r1
 800e96e:	4614      	mov	r4, r2
 800e970:	b343      	cbz	r3, 800e9c4 <__sprint_r+0x60>
 800e972:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800e974:	049d      	lsls	r5, r3, #18
 800e976:	d522      	bpl.n	800e9be <__sprint_r+0x5a>
 800e978:	6815      	ldr	r5, [r2, #0]
 800e97a:	68a0      	ldr	r0, [r4, #8]
 800e97c:	3508      	adds	r5, #8
 800e97e:	b928      	cbnz	r0, 800e98c <__sprint_r+0x28>
 800e980:	2300      	movs	r3, #0
 800e982:	60a3      	str	r3, [r4, #8]
 800e984:	2300      	movs	r3, #0
 800e986:	6063      	str	r3, [r4, #4]
 800e988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98c:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800e990:	f04f 0900 	mov.w	r9, #0
 800e994:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800e998:	45ca      	cmp	sl, r9
 800e99a:	dc05      	bgt.n	800e9a8 <__sprint_r+0x44>
 800e99c:	68a3      	ldr	r3, [r4, #8]
 800e99e:	f027 0703 	bic.w	r7, r7, #3
 800e9a2:	1bdb      	subs	r3, r3, r7
 800e9a4:	60a3      	str	r3, [r4, #8]
 800e9a6:	e7e8      	b.n	800e97a <__sprint_r+0x16>
 800e9a8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e9ac:	4632      	mov	r2, r6
 800e9ae:	4640      	mov	r0, r8
 800e9b0:	f000 feb5 	bl	800f71e <_fputwc_r>
 800e9b4:	1c43      	adds	r3, r0, #1
 800e9b6:	d0e3      	beq.n	800e980 <__sprint_r+0x1c>
 800e9b8:	f109 0901 	add.w	r9, r9, #1
 800e9bc:	e7ec      	b.n	800e998 <__sprint_r+0x34>
 800e9be:	f000 fccb 	bl	800f358 <__sfvwrite_r>
 800e9c2:	e7dd      	b.n	800e980 <__sprint_r+0x1c>
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	e7dd      	b.n	800e984 <__sprint_r+0x20>

0800e9c8 <_vfiprintf_r>:
 800e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9cc:	b0bb      	sub	sp, #236	@ 0xec
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	4693      	mov	fp, r2
 800e9d2:	461c      	mov	r4, r3
 800e9d4:	461d      	mov	r5, r3
 800e9d6:	9000      	str	r0, [sp, #0]
 800e9d8:	b118      	cbz	r0, 800e9e2 <_vfiprintf_r+0x1a>
 800e9da:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e9dc:	b90b      	cbnz	r3, 800e9e2 <_vfiprintf_r+0x1a>
 800e9de:	f7fc fb5b 	bl	800b098 <__sinit>
 800e9e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9e4:	07db      	lsls	r3, r3, #31
 800e9e6:	d405      	bmi.n	800e9f4 <_vfiprintf_r+0x2c>
 800e9e8:	89bb      	ldrh	r3, [r7, #12]
 800e9ea:	059e      	lsls	r6, r3, #22
 800e9ec:	d402      	bmi.n	800e9f4 <_vfiprintf_r+0x2c>
 800e9ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e9f0:	f7fc fc66 	bl	800b2c0 <__retarget_lock_acquire_recursive>
 800e9f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e9f8:	0498      	lsls	r0, r3, #18
 800e9fa:	d406      	bmi.n	800ea0a <_vfiprintf_r+0x42>
 800e9fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ea00:	81bb      	strh	r3, [r7, #12]
 800ea02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ea08:	667b      	str	r3, [r7, #100]	@ 0x64
 800ea0a:	89bb      	ldrh	r3, [r7, #12]
 800ea0c:	0719      	lsls	r1, r3, #28
 800ea0e:	d501      	bpl.n	800ea14 <_vfiprintf_r+0x4c>
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	b9ab      	cbnz	r3, 800ea40 <_vfiprintf_r+0x78>
 800ea14:	9800      	ldr	r0, [sp, #0]
 800ea16:	4639      	mov	r1, r7
 800ea18:	f000 fdea 	bl	800f5f0 <__swsetup_r>
 800ea1c:	b180      	cbz	r0, 800ea40 <_vfiprintf_r+0x78>
 800ea1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea20:	07da      	lsls	r2, r3, #31
 800ea22:	d506      	bpl.n	800ea32 <_vfiprintf_r+0x6a>
 800ea24:	f04f 33ff 	mov.w	r3, #4294967295
 800ea28:	9303      	str	r3, [sp, #12]
 800ea2a:	9803      	ldr	r0, [sp, #12]
 800ea2c:	b03b      	add	sp, #236	@ 0xec
 800ea2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea32:	89bb      	ldrh	r3, [r7, #12]
 800ea34:	059b      	lsls	r3, r3, #22
 800ea36:	d4f5      	bmi.n	800ea24 <_vfiprintf_r+0x5c>
 800ea38:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea3a:	f7fc fc42 	bl	800b2c2 <__retarget_lock_release_recursive>
 800ea3e:	e7f1      	b.n	800ea24 <_vfiprintf_r+0x5c>
 800ea40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ea44:	f003 021a 	and.w	r2, r3, #26
 800ea48:	2a0a      	cmp	r2, #10
 800ea4a:	d114      	bne.n	800ea76 <_vfiprintf_r+0xae>
 800ea4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ea50:	2a00      	cmp	r2, #0
 800ea52:	db10      	blt.n	800ea76 <_vfiprintf_r+0xae>
 800ea54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ea56:	07d6      	lsls	r6, r2, #31
 800ea58:	d404      	bmi.n	800ea64 <_vfiprintf_r+0x9c>
 800ea5a:	059d      	lsls	r5, r3, #22
 800ea5c:	d402      	bmi.n	800ea64 <_vfiprintf_r+0x9c>
 800ea5e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea60:	f7fc fc2f 	bl	800b2c2 <__retarget_lock_release_recursive>
 800ea64:	9800      	ldr	r0, [sp, #0]
 800ea66:	4623      	mov	r3, r4
 800ea68:	465a      	mov	r2, fp
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	b03b      	add	sp, #236	@ 0xec
 800ea6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea72:	f000 bc31 	b.w	800f2d8 <__sbprintf>
 800ea76:	2300      	movs	r3, #0
 800ea78:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800ea7c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ea80:	ae11      	add	r6, sp, #68	@ 0x44
 800ea82:	960e      	str	r6, [sp, #56]	@ 0x38
 800ea84:	9307      	str	r3, [sp, #28]
 800ea86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea88:	9303      	str	r3, [sp, #12]
 800ea8a:	465b      	mov	r3, fp
 800ea8c:	461c      	mov	r4, r3
 800ea8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea92:	b10a      	cbz	r2, 800ea98 <_vfiprintf_r+0xd0>
 800ea94:	2a25      	cmp	r2, #37	@ 0x25
 800ea96:	d1f9      	bne.n	800ea8c <_vfiprintf_r+0xc4>
 800ea98:	ebb4 080b 	subs.w	r8, r4, fp
 800ea9c:	d00d      	beq.n	800eaba <_vfiprintf_r+0xf2>
 800ea9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eaa0:	4443      	add	r3, r8
 800eaa2:	9310      	str	r3, [sp, #64]	@ 0x40
 800eaa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	2b07      	cmp	r3, #7
 800eaaa:	e9c6 b800 	strd	fp, r8, [r6]
 800eaae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eab0:	dc75      	bgt.n	800eb9e <_vfiprintf_r+0x1d6>
 800eab2:	3608      	adds	r6, #8
 800eab4:	9b03      	ldr	r3, [sp, #12]
 800eab6:	4443      	add	r3, r8
 800eab8:	9303      	str	r3, [sp, #12]
 800eaba:	7823      	ldrb	r3, [r4, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 83cd 	beq.w	800f25c <_vfiprintf_r+0x894>
 800eac2:	2300      	movs	r3, #0
 800eac4:	f04f 32ff 	mov.w	r2, #4294967295
 800eac8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800eacc:	3401      	adds	r4, #1
 800eace:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ead2:	469a      	mov	sl, r3
 800ead4:	46a3      	mov	fp, r4
 800ead6:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800eada:	f1a3 0220 	sub.w	r2, r3, #32
 800eade:	2a5a      	cmp	r2, #90	@ 0x5a
 800eae0:	f200 8316 	bhi.w	800f110 <_vfiprintf_r+0x748>
 800eae4:	e8df f012 	tbh	[pc, r2, lsl #1]
 800eae8:	0314009a 	.word	0x0314009a
 800eaec:	00a20314 	.word	0x00a20314
 800eaf0:	03140314 	.word	0x03140314
 800eaf4:	00820314 	.word	0x00820314
 800eaf8:	03140314 	.word	0x03140314
 800eafc:	00af00a5 	.word	0x00af00a5
 800eb00:	00ac0314 	.word	0x00ac0314
 800eb04:	031400b1 	.word	0x031400b1
 800eb08:	00d000cd 	.word	0x00d000cd
 800eb0c:	00d000d0 	.word	0x00d000d0
 800eb10:	00d000d0 	.word	0x00d000d0
 800eb14:	00d000d0 	.word	0x00d000d0
 800eb18:	00d000d0 	.word	0x00d000d0
 800eb1c:	03140314 	.word	0x03140314
 800eb20:	03140314 	.word	0x03140314
 800eb24:	03140314 	.word	0x03140314
 800eb28:	03140314 	.word	0x03140314
 800eb2c:	00f70314 	.word	0x00f70314
 800eb30:	03140104 	.word	0x03140104
 800eb34:	03140314 	.word	0x03140314
 800eb38:	03140314 	.word	0x03140314
 800eb3c:	03140314 	.word	0x03140314
 800eb40:	03140314 	.word	0x03140314
 800eb44:	01520314 	.word	0x01520314
 800eb48:	03140314 	.word	0x03140314
 800eb4c:	019a0314 	.word	0x019a0314
 800eb50:	027a0314 	.word	0x027a0314
 800eb54:	03140314 	.word	0x03140314
 800eb58:	0314029a 	.word	0x0314029a
 800eb5c:	03140314 	.word	0x03140314
 800eb60:	03140314 	.word	0x03140314
 800eb64:	03140314 	.word	0x03140314
 800eb68:	03140314 	.word	0x03140314
 800eb6c:	00f70314 	.word	0x00f70314
 800eb70:	03140106 	.word	0x03140106
 800eb74:	03140314 	.word	0x03140314
 800eb78:	010600e0 	.word	0x010600e0
 800eb7c:	031400f1 	.word	0x031400f1
 800eb80:	031400eb 	.word	0x031400eb
 800eb84:	01540132 	.word	0x01540132
 800eb88:	00f10189 	.word	0x00f10189
 800eb8c:	019a0314 	.word	0x019a0314
 800eb90:	027c0098 	.word	0x027c0098
 800eb94:	03140314 	.word	0x03140314
 800eb98:	03140065 	.word	0x03140065
 800eb9c:	0098      	.short	0x0098
 800eb9e:	9800      	ldr	r0, [sp, #0]
 800eba0:	aa0e      	add	r2, sp, #56	@ 0x38
 800eba2:	4639      	mov	r1, r7
 800eba4:	f7ff fede 	bl	800e964 <__sprint_r>
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	f040 8336 	bne.w	800f21a <_vfiprintf_r+0x852>
 800ebae:	ae11      	add	r6, sp, #68	@ 0x44
 800ebb0:	e780      	b.n	800eab4 <_vfiprintf_r+0xec>
 800ebb2:	4a99      	ldr	r2, [pc, #612]	@ (800ee18 <_vfiprintf_r+0x450>)
 800ebb4:	9205      	str	r2, [sp, #20]
 800ebb6:	f01a 0220 	ands.w	r2, sl, #32
 800ebba:	f000 8231 	beq.w	800f020 <_vfiprintf_r+0x658>
 800ebbe:	3507      	adds	r5, #7
 800ebc0:	f025 0507 	bic.w	r5, r5, #7
 800ebc4:	46a8      	mov	r8, r5
 800ebc6:	686d      	ldr	r5, [r5, #4]
 800ebc8:	f858 4b08 	ldr.w	r4, [r8], #8
 800ebcc:	f01a 0f01 	tst.w	sl, #1
 800ebd0:	d009      	beq.n	800ebe6 <_vfiprintf_r+0x21e>
 800ebd2:	ea54 0205 	orrs.w	r2, r4, r5
 800ebd6:	bf1f      	itttt	ne
 800ebd8:	2230      	movne	r2, #48	@ 0x30
 800ebda:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800ebde:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800ebe2:	f04a 0a02 	orrne.w	sl, sl, #2
 800ebe6:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800ebea:	e112      	b.n	800ee12 <_vfiprintf_r+0x44a>
 800ebec:	9800      	ldr	r0, [sp, #0]
 800ebee:	f7fe f9cb 	bl	800cf88 <_localeconv_r>
 800ebf2:	6843      	ldr	r3, [r0, #4]
 800ebf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7f1 faea 	bl	80001d0 <strlen>
 800ebfc:	9007      	str	r0, [sp, #28]
 800ebfe:	9800      	ldr	r0, [sp, #0]
 800ec00:	f7fe f9c2 	bl	800cf88 <_localeconv_r>
 800ec04:	6883      	ldr	r3, [r0, #8]
 800ec06:	9306      	str	r3, [sp, #24]
 800ec08:	9b07      	ldr	r3, [sp, #28]
 800ec0a:	b12b      	cbz	r3, 800ec18 <_vfiprintf_r+0x250>
 800ec0c:	9b06      	ldr	r3, [sp, #24]
 800ec0e:	b11b      	cbz	r3, 800ec18 <_vfiprintf_r+0x250>
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	b10b      	cbz	r3, 800ec18 <_vfiprintf_r+0x250>
 800ec14:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800ec18:	465c      	mov	r4, fp
 800ec1a:	e75b      	b.n	800ead4 <_vfiprintf_r+0x10c>
 800ec1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1f9      	bne.n	800ec18 <_vfiprintf_r+0x250>
 800ec24:	2320      	movs	r3, #32
 800ec26:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ec2a:	e7f5      	b.n	800ec18 <_vfiprintf_r+0x250>
 800ec2c:	f04a 0a01 	orr.w	sl, sl, #1
 800ec30:	e7f2      	b.n	800ec18 <_vfiprintf_r+0x250>
 800ec32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec36:	9302      	str	r3, [sp, #8]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	daed      	bge.n	800ec18 <_vfiprintf_r+0x250>
 800ec3c:	425b      	negs	r3, r3
 800ec3e:	9302      	str	r3, [sp, #8]
 800ec40:	f04a 0a04 	orr.w	sl, sl, #4
 800ec44:	e7e8      	b.n	800ec18 <_vfiprintf_r+0x250>
 800ec46:	232b      	movs	r3, #43	@ 0x2b
 800ec48:	e7ed      	b.n	800ec26 <_vfiprintf_r+0x25e>
 800ec4a:	465a      	mov	r2, fp
 800ec4c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec52:	d112      	bne.n	800ec7a <_vfiprintf_r+0x2b2>
 800ec54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	4693      	mov	fp, r2
 800ec60:	e7da      	b.n	800ec18 <_vfiprintf_r+0x250>
 800ec62:	9b01      	ldr	r3, [sp, #4]
 800ec64:	fb00 1303 	mla	r3, r0, r3, r1
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec6e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ec72:	2909      	cmp	r1, #9
 800ec74:	d9f5      	bls.n	800ec62 <_vfiprintf_r+0x29a>
 800ec76:	4693      	mov	fp, r2
 800ec78:	e72f      	b.n	800eada <_vfiprintf_r+0x112>
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	9101      	str	r1, [sp, #4]
 800ec7e:	200a      	movs	r0, #10
 800ec80:	e7f5      	b.n	800ec6e <_vfiprintf_r+0x2a6>
 800ec82:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800ec86:	e7c7      	b.n	800ec18 <_vfiprintf_r+0x250>
 800ec88:	2100      	movs	r1, #0
 800ec8a:	465a      	mov	r2, fp
 800ec8c:	9102      	str	r1, [sp, #8]
 800ec8e:	200a      	movs	r0, #10
 800ec90:	9902      	ldr	r1, [sp, #8]
 800ec92:	3b30      	subs	r3, #48	@ 0x30
 800ec94:	fb00 3301 	mla	r3, r0, r1, r3
 800ec98:	9302      	str	r3, [sp, #8]
 800ec9a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec9e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800eca2:	2909      	cmp	r1, #9
 800eca4:	d9f4      	bls.n	800ec90 <_vfiprintf_r+0x2c8>
 800eca6:	e7e6      	b.n	800ec76 <_vfiprintf_r+0x2ae>
 800eca8:	f89b 3000 	ldrb.w	r3, [fp]
 800ecac:	2b68      	cmp	r3, #104	@ 0x68
 800ecae:	bf06      	itte	eq
 800ecb0:	f10b 0b01 	addeq.w	fp, fp, #1
 800ecb4:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800ecb8:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800ecbc:	e7ac      	b.n	800ec18 <_vfiprintf_r+0x250>
 800ecbe:	f89b 3000 	ldrb.w	r3, [fp]
 800ecc2:	2b6c      	cmp	r3, #108	@ 0x6c
 800ecc4:	d104      	bne.n	800ecd0 <_vfiprintf_r+0x308>
 800ecc6:	f10b 0b01 	add.w	fp, fp, #1
 800ecca:	f04a 0a20 	orr.w	sl, sl, #32
 800ecce:	e7a3      	b.n	800ec18 <_vfiprintf_r+0x250>
 800ecd0:	f04a 0a10 	orr.w	sl, sl, #16
 800ecd4:	e7a0      	b.n	800ec18 <_vfiprintf_r+0x250>
 800ecd6:	46a8      	mov	r8, r5
 800ecd8:	2400      	movs	r4, #0
 800ecda:	f858 3b04 	ldr.w	r3, [r8], #4
 800ecde:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ece2:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ece6:	2301      	movs	r3, #1
 800ece8:	9301      	str	r3, [sp, #4]
 800ecea:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800ecee:	e0ab      	b.n	800ee48 <_vfiprintf_r+0x480>
 800ecf0:	f04a 0a10 	orr.w	sl, sl, #16
 800ecf4:	f01a 0f20 	tst.w	sl, #32
 800ecf8:	d011      	beq.n	800ed1e <_vfiprintf_r+0x356>
 800ecfa:	3507      	adds	r5, #7
 800ecfc:	f025 0507 	bic.w	r5, r5, #7
 800ed00:	46a8      	mov	r8, r5
 800ed02:	686d      	ldr	r5, [r5, #4]
 800ed04:	f858 4b08 	ldr.w	r4, [r8], #8
 800ed08:	2d00      	cmp	r5, #0
 800ed0a:	da06      	bge.n	800ed1a <_vfiprintf_r+0x352>
 800ed0c:	4264      	negs	r4, r4
 800ed0e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800ed12:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ed16:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	e048      	b.n	800edb0 <_vfiprintf_r+0x3e8>
 800ed1e:	46a8      	mov	r8, r5
 800ed20:	f01a 0f10 	tst.w	sl, #16
 800ed24:	f858 5b04 	ldr.w	r5, [r8], #4
 800ed28:	d002      	beq.n	800ed30 <_vfiprintf_r+0x368>
 800ed2a:	462c      	mov	r4, r5
 800ed2c:	17ed      	asrs	r5, r5, #31
 800ed2e:	e7eb      	b.n	800ed08 <_vfiprintf_r+0x340>
 800ed30:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ed34:	d003      	beq.n	800ed3e <_vfiprintf_r+0x376>
 800ed36:	b22c      	sxth	r4, r5
 800ed38:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ed3c:	e7e4      	b.n	800ed08 <_vfiprintf_r+0x340>
 800ed3e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ed42:	d0f2      	beq.n	800ed2a <_vfiprintf_r+0x362>
 800ed44:	b26c      	sxtb	r4, r5
 800ed46:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ed4a:	e7dd      	b.n	800ed08 <_vfiprintf_r+0x340>
 800ed4c:	f01a 0f20 	tst.w	sl, #32
 800ed50:	d007      	beq.n	800ed62 <_vfiprintf_r+0x39a>
 800ed52:	9a03      	ldr	r2, [sp, #12]
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	9903      	ldr	r1, [sp, #12]
 800ed58:	17d2      	asrs	r2, r2, #31
 800ed5a:	e9c3 1200 	strd	r1, r2, [r3]
 800ed5e:	3504      	adds	r5, #4
 800ed60:	e693      	b.n	800ea8a <_vfiprintf_r+0xc2>
 800ed62:	f01a 0f10 	tst.w	sl, #16
 800ed66:	d003      	beq.n	800ed70 <_vfiprintf_r+0x3a8>
 800ed68:	682b      	ldr	r3, [r5, #0]
 800ed6a:	9a03      	ldr	r2, [sp, #12]
 800ed6c:	601a      	str	r2, [r3, #0]
 800ed6e:	e7f6      	b.n	800ed5e <_vfiprintf_r+0x396>
 800ed70:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ed74:	d003      	beq.n	800ed7e <_vfiprintf_r+0x3b6>
 800ed76:	682b      	ldr	r3, [r5, #0]
 800ed78:	9a03      	ldr	r2, [sp, #12]
 800ed7a:	801a      	strh	r2, [r3, #0]
 800ed7c:	e7ef      	b.n	800ed5e <_vfiprintf_r+0x396>
 800ed7e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ed82:	d0f1      	beq.n	800ed68 <_vfiprintf_r+0x3a0>
 800ed84:	682b      	ldr	r3, [r5, #0]
 800ed86:	9a03      	ldr	r2, [sp, #12]
 800ed88:	701a      	strb	r2, [r3, #0]
 800ed8a:	e7e8      	b.n	800ed5e <_vfiprintf_r+0x396>
 800ed8c:	f04a 0a10 	orr.w	sl, sl, #16
 800ed90:	f01a 0320 	ands.w	r3, sl, #32
 800ed94:	d01f      	beq.n	800edd6 <_vfiprintf_r+0x40e>
 800ed96:	3507      	adds	r5, #7
 800ed98:	f025 0507 	bic.w	r5, r5, #7
 800ed9c:	46a8      	mov	r8, r5
 800ed9e:	686d      	ldr	r5, [r5, #4]
 800eda0:	f858 4b08 	ldr.w	r4, [r8], #8
 800eda4:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800eda8:	2300      	movs	r3, #0
 800edaa:	2200      	movs	r2, #0
 800edac:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800edb0:	9a01      	ldr	r2, [sp, #4]
 800edb2:	3201      	adds	r2, #1
 800edb4:	f000 825f 	beq.w	800f276 <_vfiprintf_r+0x8ae>
 800edb8:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800edbc:	9204      	str	r2, [sp, #16]
 800edbe:	ea54 0205 	orrs.w	r2, r4, r5
 800edc2:	f040 825e 	bne.w	800f282 <_vfiprintf_r+0x8ba>
 800edc6:	9a01      	ldr	r2, [sp, #4]
 800edc8:	2a00      	cmp	r2, #0
 800edca:	f000 8198 	beq.w	800f0fe <_vfiprintf_r+0x736>
 800edce:	2b01      	cmp	r3, #1
 800edd0:	f040 825a 	bne.w	800f288 <_vfiprintf_r+0x8c0>
 800edd4:	e13b      	b.n	800f04e <_vfiprintf_r+0x686>
 800edd6:	46a8      	mov	r8, r5
 800edd8:	f01a 0510 	ands.w	r5, sl, #16
 800eddc:	f858 4b04 	ldr.w	r4, [r8], #4
 800ede0:	d001      	beq.n	800ede6 <_vfiprintf_r+0x41e>
 800ede2:	461d      	mov	r5, r3
 800ede4:	e7de      	b.n	800eda4 <_vfiprintf_r+0x3dc>
 800ede6:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800edea:	d001      	beq.n	800edf0 <_vfiprintf_r+0x428>
 800edec:	b2a4      	uxth	r4, r4
 800edee:	e7d9      	b.n	800eda4 <_vfiprintf_r+0x3dc>
 800edf0:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800edf4:	d0d6      	beq.n	800eda4 <_vfiprintf_r+0x3dc>
 800edf6:	b2e4      	uxtb	r4, r4
 800edf8:	e7f3      	b.n	800ede2 <_vfiprintf_r+0x41a>
 800edfa:	46a8      	mov	r8, r5
 800edfc:	f647 0330 	movw	r3, #30768	@ 0x7830
 800ee00:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800ee04:	f858 4b04 	ldr.w	r4, [r8], #4
 800ee08:	4b03      	ldr	r3, [pc, #12]	@ (800ee18 <_vfiprintf_r+0x450>)
 800ee0a:	9305      	str	r3, [sp, #20]
 800ee0c:	2500      	movs	r5, #0
 800ee0e:	f04a 0a02 	orr.w	sl, sl, #2
 800ee12:	2302      	movs	r3, #2
 800ee14:	e7c9      	b.n	800edaa <_vfiprintf_r+0x3e2>
 800ee16:	bf00      	nop
 800ee18:	0800fa70 	.word	0x0800fa70
 800ee1c:	9b01      	ldr	r3, [sp, #4]
 800ee1e:	46a8      	mov	r8, r5
 800ee20:	1c5c      	adds	r4, r3, #1
 800ee22:	f04f 0500 	mov.w	r5, #0
 800ee26:	f858 9b04 	ldr.w	r9, [r8], #4
 800ee2a:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800ee2e:	f000 80d0 	beq.w	800efd2 <_vfiprintf_r+0x60a>
 800ee32:	461a      	mov	r2, r3
 800ee34:	4629      	mov	r1, r5
 800ee36:	4648      	mov	r0, r9
 800ee38:	f7f1 f9d2 	bl	80001e0 <memchr>
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	b118      	cbz	r0, 800ee48 <_vfiprintf_r+0x480>
 800ee40:	eba0 0309 	sub.w	r3, r0, r9
 800ee44:	9301      	str	r3, [sp, #4]
 800ee46:	462c      	mov	r4, r5
 800ee48:	9b01      	ldr	r3, [sp, #4]
 800ee4a:	42a3      	cmp	r3, r4
 800ee4c:	bfb8      	it	lt
 800ee4e:	4623      	movlt	r3, r4
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ee56:	b113      	cbz	r3, 800ee5e <_vfiprintf_r+0x496>
 800ee58:	9b04      	ldr	r3, [sp, #16]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	9304      	str	r3, [sp, #16]
 800ee5e:	f01a 0302 	ands.w	r3, sl, #2
 800ee62:	9308      	str	r3, [sp, #32]
 800ee64:	bf1e      	ittt	ne
 800ee66:	9b04      	ldrne	r3, [sp, #16]
 800ee68:	3302      	addne	r3, #2
 800ee6a:	9304      	strne	r3, [sp, #16]
 800ee6c:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800ee70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee72:	d11f      	bne.n	800eeb4 <_vfiprintf_r+0x4ec>
 800ee74:	9b02      	ldr	r3, [sp, #8]
 800ee76:	9a04      	ldr	r2, [sp, #16]
 800ee78:	1a9d      	subs	r5, r3, r2
 800ee7a:	2d00      	cmp	r5, #0
 800ee7c:	dd1a      	ble.n	800eeb4 <_vfiprintf_r+0x4ec>
 800ee7e:	4ba9      	ldr	r3, [pc, #676]	@ (800f124 <_vfiprintf_r+0x75c>)
 800ee80:	6033      	str	r3, [r6, #0]
 800ee82:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ee86:	2d10      	cmp	r5, #16
 800ee88:	f102 0201 	add.w	r2, r2, #1
 800ee8c:	f106 0008 	add.w	r0, r6, #8
 800ee90:	f300 814e 	bgt.w	800f130 <_vfiprintf_r+0x768>
 800ee94:	6075      	str	r5, [r6, #4]
 800ee96:	2a07      	cmp	r2, #7
 800ee98:	4465      	add	r5, ip
 800ee9a:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ee9e:	f340 815a 	ble.w	800f156 <_vfiprintf_r+0x78e>
 800eea2:	9800      	ldr	r0, [sp, #0]
 800eea4:	aa0e      	add	r2, sp, #56	@ 0x38
 800eea6:	4639      	mov	r1, r7
 800eea8:	f7ff fd5c 	bl	800e964 <__sprint_r>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	f040 81b4 	bne.w	800f21a <_vfiprintf_r+0x852>
 800eeb2:	ae11      	add	r6, sp, #68	@ 0x44
 800eeb4:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800eeb8:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eebc:	b161      	cbz	r1, 800eed8 <_vfiprintf_r+0x510>
 800eebe:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800eec2:	3301      	adds	r3, #1
 800eec4:	6031      	str	r1, [r6, #0]
 800eec6:	2101      	movs	r1, #1
 800eec8:	440a      	add	r2, r1
 800eeca:	2b07      	cmp	r3, #7
 800eecc:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800eed0:	6071      	str	r1, [r6, #4]
 800eed2:	f300 8142 	bgt.w	800f15a <_vfiprintf_r+0x792>
 800eed6:	3608      	adds	r6, #8
 800eed8:	9908      	ldr	r1, [sp, #32]
 800eeda:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eede:	b159      	cbz	r1, 800eef8 <_vfiprintf_r+0x530>
 800eee0:	a90d      	add	r1, sp, #52	@ 0x34
 800eee2:	3301      	adds	r3, #1
 800eee4:	6031      	str	r1, [r6, #0]
 800eee6:	2102      	movs	r1, #2
 800eee8:	440a      	add	r2, r1
 800eeea:	2b07      	cmp	r3, #7
 800eeec:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800eef0:	6071      	str	r1, [r6, #4]
 800eef2:	f300 813b 	bgt.w	800f16c <_vfiprintf_r+0x7a4>
 800eef6:	3608      	adds	r6, #8
 800eef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eefa:	2b80      	cmp	r3, #128	@ 0x80
 800eefc:	d11f      	bne.n	800ef3e <_vfiprintf_r+0x576>
 800eefe:	9b02      	ldr	r3, [sp, #8]
 800ef00:	9a04      	ldr	r2, [sp, #16]
 800ef02:	1a9d      	subs	r5, r3, r2
 800ef04:	2d00      	cmp	r5, #0
 800ef06:	dd1a      	ble.n	800ef3e <_vfiprintf_r+0x576>
 800ef08:	4b87      	ldr	r3, [pc, #540]	@ (800f128 <_vfiprintf_r+0x760>)
 800ef0a:	6033      	str	r3, [r6, #0]
 800ef0c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ef10:	2d10      	cmp	r5, #16
 800ef12:	f102 0201 	add.w	r2, r2, #1
 800ef16:	f106 0008 	add.w	r0, r6, #8
 800ef1a:	f300 8130 	bgt.w	800f17e <_vfiprintf_r+0x7b6>
 800ef1e:	6075      	str	r5, [r6, #4]
 800ef20:	2a07      	cmp	r2, #7
 800ef22:	4465      	add	r5, ip
 800ef24:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ef28:	f340 813c 	ble.w	800f1a4 <_vfiprintf_r+0x7dc>
 800ef2c:	9800      	ldr	r0, [sp, #0]
 800ef2e:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef30:	4639      	mov	r1, r7
 800ef32:	f7ff fd17 	bl	800e964 <__sprint_r>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f040 816f 	bne.w	800f21a <_vfiprintf_r+0x852>
 800ef3c:	ae11      	add	r6, sp, #68	@ 0x44
 800ef3e:	9b01      	ldr	r3, [sp, #4]
 800ef40:	1ae4      	subs	r4, r4, r3
 800ef42:	2c00      	cmp	r4, #0
 800ef44:	dd1a      	ble.n	800ef7c <_vfiprintf_r+0x5b4>
 800ef46:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ef4a:	4877      	ldr	r0, [pc, #476]	@ (800f128 <_vfiprintf_r+0x760>)
 800ef4c:	6030      	str	r0, [r6, #0]
 800ef4e:	2c10      	cmp	r4, #16
 800ef50:	f103 0301 	add.w	r3, r3, #1
 800ef54:	f106 0108 	add.w	r1, r6, #8
 800ef58:	f300 8126 	bgt.w	800f1a8 <_vfiprintf_r+0x7e0>
 800ef5c:	6074      	str	r4, [r6, #4]
 800ef5e:	2b07      	cmp	r3, #7
 800ef60:	4414      	add	r4, r2
 800ef62:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800ef66:	f340 8130 	ble.w	800f1ca <_vfiprintf_r+0x802>
 800ef6a:	9800      	ldr	r0, [sp, #0]
 800ef6c:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef6e:	4639      	mov	r1, r7
 800ef70:	f7ff fcf8 	bl	800e964 <__sprint_r>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	f040 8150 	bne.w	800f21a <_vfiprintf_r+0x852>
 800ef7a:	ae11      	add	r6, sp, #68	@ 0x44
 800ef7c:	9b01      	ldr	r3, [sp, #4]
 800ef7e:	9a01      	ldr	r2, [sp, #4]
 800ef80:	6073      	str	r3, [r6, #4]
 800ef82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef84:	f8c6 9000 	str.w	r9, [r6]
 800ef88:	4413      	add	r3, r2
 800ef8a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef8e:	3301      	adds	r3, #1
 800ef90:	2b07      	cmp	r3, #7
 800ef92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef94:	f300 811b 	bgt.w	800f1ce <_vfiprintf_r+0x806>
 800ef98:	f106 0308 	add.w	r3, r6, #8
 800ef9c:	f01a 0f04 	tst.w	sl, #4
 800efa0:	f040 811d 	bne.w	800f1de <_vfiprintf_r+0x816>
 800efa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efa8:	9904      	ldr	r1, [sp, #16]
 800efaa:	428a      	cmp	r2, r1
 800efac:	bfac      	ite	ge
 800efae:	189b      	addge	r3, r3, r2
 800efb0:	185b      	addlt	r3, r3, r1
 800efb2:	9303      	str	r3, [sp, #12]
 800efb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efb6:	b13b      	cbz	r3, 800efc8 <_vfiprintf_r+0x600>
 800efb8:	9800      	ldr	r0, [sp, #0]
 800efba:	aa0e      	add	r2, sp, #56	@ 0x38
 800efbc:	4639      	mov	r1, r7
 800efbe:	f7ff fcd1 	bl	800e964 <__sprint_r>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	f040 8129 	bne.w	800f21a <_vfiprintf_r+0x852>
 800efc8:	2300      	movs	r3, #0
 800efca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efcc:	4645      	mov	r5, r8
 800efce:	ae11      	add	r6, sp, #68	@ 0x44
 800efd0:	e55b      	b.n	800ea8a <_vfiprintf_r+0xc2>
 800efd2:	4648      	mov	r0, r9
 800efd4:	f7f1 f8fc 	bl	80001d0 <strlen>
 800efd8:	9001      	str	r0, [sp, #4]
 800efda:	e734      	b.n	800ee46 <_vfiprintf_r+0x47e>
 800efdc:	f04a 0a10 	orr.w	sl, sl, #16
 800efe0:	f01a 0320 	ands.w	r3, sl, #32
 800efe4:	d008      	beq.n	800eff8 <_vfiprintf_r+0x630>
 800efe6:	3507      	adds	r5, #7
 800efe8:	f025 0507 	bic.w	r5, r5, #7
 800efec:	46a8      	mov	r8, r5
 800efee:	686d      	ldr	r5, [r5, #4]
 800eff0:	f858 4b08 	ldr.w	r4, [r8], #8
 800eff4:	2301      	movs	r3, #1
 800eff6:	e6d8      	b.n	800edaa <_vfiprintf_r+0x3e2>
 800eff8:	46a8      	mov	r8, r5
 800effa:	f01a 0510 	ands.w	r5, sl, #16
 800effe:	f858 4b04 	ldr.w	r4, [r8], #4
 800f002:	d001      	beq.n	800f008 <_vfiprintf_r+0x640>
 800f004:	461d      	mov	r5, r3
 800f006:	e7f5      	b.n	800eff4 <_vfiprintf_r+0x62c>
 800f008:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800f00c:	d001      	beq.n	800f012 <_vfiprintf_r+0x64a>
 800f00e:	b2a4      	uxth	r4, r4
 800f010:	e7f0      	b.n	800eff4 <_vfiprintf_r+0x62c>
 800f012:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800f016:	d0ed      	beq.n	800eff4 <_vfiprintf_r+0x62c>
 800f018:	b2e4      	uxtb	r4, r4
 800f01a:	e7f3      	b.n	800f004 <_vfiprintf_r+0x63c>
 800f01c:	4a43      	ldr	r2, [pc, #268]	@ (800f12c <_vfiprintf_r+0x764>)
 800f01e:	e5c9      	b.n	800ebb4 <_vfiprintf_r+0x1ec>
 800f020:	46a8      	mov	r8, r5
 800f022:	f01a 0510 	ands.w	r5, sl, #16
 800f026:	f858 4b04 	ldr.w	r4, [r8], #4
 800f02a:	d001      	beq.n	800f030 <_vfiprintf_r+0x668>
 800f02c:	4615      	mov	r5, r2
 800f02e:	e5cd      	b.n	800ebcc <_vfiprintf_r+0x204>
 800f030:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800f034:	d001      	beq.n	800f03a <_vfiprintf_r+0x672>
 800f036:	b2a4      	uxth	r4, r4
 800f038:	e5c8      	b.n	800ebcc <_vfiprintf_r+0x204>
 800f03a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800f03e:	f43f adc5 	beq.w	800ebcc <_vfiprintf_r+0x204>
 800f042:	b2e4      	uxtb	r4, r4
 800f044:	e7f2      	b.n	800f02c <_vfiprintf_r+0x664>
 800f046:	2c0a      	cmp	r4, #10
 800f048:	f175 0300 	sbcs.w	r3, r5, #0
 800f04c:	d206      	bcs.n	800f05c <_vfiprintf_r+0x694>
 800f04e:	3430      	adds	r4, #48	@ 0x30
 800f050:	b2e4      	uxtb	r4, r4
 800f052:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800f056:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800f05a:	e131      	b.n	800f2c0 <_vfiprintf_r+0x8f8>
 800f05c:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f05e:	9308      	str	r3, [sp, #32]
 800f060:	9b04      	ldr	r3, [sp, #16]
 800f062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f066:	f04f 0a00 	mov.w	sl, #0
 800f06a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f06c:	220a      	movs	r2, #10
 800f06e:	2300      	movs	r3, #0
 800f070:	4620      	mov	r0, r4
 800f072:	4629      	mov	r1, r5
 800f074:	f7f1 fde8 	bl	8000c48 <__aeabi_uldivmod>
 800f078:	460b      	mov	r3, r1
 800f07a:	9908      	ldr	r1, [sp, #32]
 800f07c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f07e:	3230      	adds	r2, #48	@ 0x30
 800f080:	f801 2c01 	strb.w	r2, [r1, #-1]
 800f084:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f086:	f101 39ff 	add.w	r9, r1, #4294967295
 800f08a:	f10a 0a01 	add.w	sl, sl, #1
 800f08e:	b1e2      	cbz	r2, 800f0ca <_vfiprintf_r+0x702>
 800f090:	9a06      	ldr	r2, [sp, #24]
 800f092:	7812      	ldrb	r2, [r2, #0]
 800f094:	4552      	cmp	r2, sl
 800f096:	d118      	bne.n	800f0ca <_vfiprintf_r+0x702>
 800f098:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800f09c:	d015      	beq.n	800f0ca <_vfiprintf_r+0x702>
 800f09e:	2c0a      	cmp	r4, #10
 800f0a0:	f175 0200 	sbcs.w	r2, r5, #0
 800f0a4:	d311      	bcc.n	800f0ca <_vfiprintf_r+0x702>
 800f0a6:	9308      	str	r3, [sp, #32]
 800f0a8:	9b07      	ldr	r3, [sp, #28]
 800f0aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0ac:	eba9 0903 	sub.w	r9, r9, r3
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4648      	mov	r0, r9
 800f0b4:	f7fd ff55 	bl	800cf62 <strncpy>
 800f0b8:	9b06      	ldr	r3, [sp, #24]
 800f0ba:	785a      	ldrb	r2, [r3, #1]
 800f0bc:	9b08      	ldr	r3, [sp, #32]
 800f0be:	b172      	cbz	r2, 800f0de <_vfiprintf_r+0x716>
 800f0c0:	9a06      	ldr	r2, [sp, #24]
 800f0c2:	3201      	adds	r2, #1
 800f0c4:	9206      	str	r2, [sp, #24]
 800f0c6:	f04f 0a00 	mov.w	sl, #0
 800f0ca:	2c0a      	cmp	r4, #10
 800f0cc:	f175 0500 	sbcs.w	r5, r5, #0
 800f0d0:	f0c0 80f6 	bcc.w	800f2c0 <_vfiprintf_r+0x8f8>
 800f0d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f0d6:	f8cd 9020 	str.w	r9, [sp, #32]
 800f0da:	461d      	mov	r5, r3
 800f0dc:	e7c6      	b.n	800f06c <_vfiprintf_r+0x6a4>
 800f0de:	4692      	mov	sl, r2
 800f0e0:	e7f3      	b.n	800f0ca <_vfiprintf_r+0x702>
 800f0e2:	f004 030f 	and.w	r3, r4, #15
 800f0e6:	9a05      	ldr	r2, [sp, #20]
 800f0e8:	0924      	lsrs	r4, r4, #4
 800f0ea:	5cd3      	ldrb	r3, [r2, r3]
 800f0ec:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f0f0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f0f4:	092d      	lsrs	r5, r5, #4
 800f0f6:	ea54 0305 	orrs.w	r3, r4, r5
 800f0fa:	d1f2      	bne.n	800f0e2 <_vfiprintf_r+0x71a>
 800f0fc:	e0e0      	b.n	800f2c0 <_vfiprintf_r+0x8f8>
 800f0fe:	b923      	cbnz	r3, 800f10a <_vfiprintf_r+0x742>
 800f100:	f01a 0f01 	tst.w	sl, #1
 800f104:	d001      	beq.n	800f10a <_vfiprintf_r+0x742>
 800f106:	2430      	movs	r4, #48	@ 0x30
 800f108:	e7a3      	b.n	800f052 <_vfiprintf_r+0x68a>
 800f10a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f10e:	e0d7      	b.n	800f2c0 <_vfiprintf_r+0x8f8>
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 80a3 	beq.w	800f25c <_vfiprintf_r+0x894>
 800f116:	2400      	movs	r4, #0
 800f118:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800f11c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800f120:	46a8      	mov	r8, r5
 800f122:	e5e0      	b.n	800ece6 <_vfiprintf_r+0x31e>
 800f124:	0800fdd7 	.word	0x0800fdd7
 800f128:	0800fdc7 	.word	0x0800fdc7
 800f12c:	0800fa81 	.word	0x0800fa81
 800f130:	2110      	movs	r1, #16
 800f132:	6071      	str	r1, [r6, #4]
 800f134:	2a07      	cmp	r2, #7
 800f136:	4461      	add	r1, ip
 800f138:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f13c:	dd08      	ble.n	800f150 <_vfiprintf_r+0x788>
 800f13e:	9800      	ldr	r0, [sp, #0]
 800f140:	aa0e      	add	r2, sp, #56	@ 0x38
 800f142:	4639      	mov	r1, r7
 800f144:	f7ff fc0e 	bl	800e964 <__sprint_r>
 800f148:	2800      	cmp	r0, #0
 800f14a:	d166      	bne.n	800f21a <_vfiprintf_r+0x852>
 800f14c:	4b60      	ldr	r3, [pc, #384]	@ (800f2d0 <_vfiprintf_r+0x908>)
 800f14e:	a811      	add	r0, sp, #68	@ 0x44
 800f150:	3d10      	subs	r5, #16
 800f152:	4606      	mov	r6, r0
 800f154:	e694      	b.n	800ee80 <_vfiprintf_r+0x4b8>
 800f156:	4606      	mov	r6, r0
 800f158:	e6ac      	b.n	800eeb4 <_vfiprintf_r+0x4ec>
 800f15a:	9800      	ldr	r0, [sp, #0]
 800f15c:	aa0e      	add	r2, sp, #56	@ 0x38
 800f15e:	4639      	mov	r1, r7
 800f160:	f7ff fc00 	bl	800e964 <__sprint_r>
 800f164:	2800      	cmp	r0, #0
 800f166:	d158      	bne.n	800f21a <_vfiprintf_r+0x852>
 800f168:	ae11      	add	r6, sp, #68	@ 0x44
 800f16a:	e6b5      	b.n	800eed8 <_vfiprintf_r+0x510>
 800f16c:	9800      	ldr	r0, [sp, #0]
 800f16e:	aa0e      	add	r2, sp, #56	@ 0x38
 800f170:	4639      	mov	r1, r7
 800f172:	f7ff fbf7 	bl	800e964 <__sprint_r>
 800f176:	2800      	cmp	r0, #0
 800f178:	d14f      	bne.n	800f21a <_vfiprintf_r+0x852>
 800f17a:	ae11      	add	r6, sp, #68	@ 0x44
 800f17c:	e6bc      	b.n	800eef8 <_vfiprintf_r+0x530>
 800f17e:	2110      	movs	r1, #16
 800f180:	6071      	str	r1, [r6, #4]
 800f182:	2a07      	cmp	r2, #7
 800f184:	4461      	add	r1, ip
 800f186:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f18a:	dd08      	ble.n	800f19e <_vfiprintf_r+0x7d6>
 800f18c:	9800      	ldr	r0, [sp, #0]
 800f18e:	aa0e      	add	r2, sp, #56	@ 0x38
 800f190:	4639      	mov	r1, r7
 800f192:	f7ff fbe7 	bl	800e964 <__sprint_r>
 800f196:	2800      	cmp	r0, #0
 800f198:	d13f      	bne.n	800f21a <_vfiprintf_r+0x852>
 800f19a:	4b4e      	ldr	r3, [pc, #312]	@ (800f2d4 <_vfiprintf_r+0x90c>)
 800f19c:	a811      	add	r0, sp, #68	@ 0x44
 800f19e:	3d10      	subs	r5, #16
 800f1a0:	4606      	mov	r6, r0
 800f1a2:	e6b2      	b.n	800ef0a <_vfiprintf_r+0x542>
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	e6ca      	b.n	800ef3e <_vfiprintf_r+0x576>
 800f1a8:	2010      	movs	r0, #16
 800f1aa:	4402      	add	r2, r0
 800f1ac:	2b07      	cmp	r3, #7
 800f1ae:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800f1b2:	6070      	str	r0, [r6, #4]
 800f1b4:	dd06      	ble.n	800f1c4 <_vfiprintf_r+0x7fc>
 800f1b6:	9800      	ldr	r0, [sp, #0]
 800f1b8:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1ba:	4639      	mov	r1, r7
 800f1bc:	f7ff fbd2 	bl	800e964 <__sprint_r>
 800f1c0:	bb58      	cbnz	r0, 800f21a <_vfiprintf_r+0x852>
 800f1c2:	a911      	add	r1, sp, #68	@ 0x44
 800f1c4:	3c10      	subs	r4, #16
 800f1c6:	460e      	mov	r6, r1
 800f1c8:	e6bd      	b.n	800ef46 <_vfiprintf_r+0x57e>
 800f1ca:	460e      	mov	r6, r1
 800f1cc:	e6d6      	b.n	800ef7c <_vfiprintf_r+0x5b4>
 800f1ce:	9800      	ldr	r0, [sp, #0]
 800f1d0:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1d2:	4639      	mov	r1, r7
 800f1d4:	f7ff fbc6 	bl	800e964 <__sprint_r>
 800f1d8:	b9f8      	cbnz	r0, 800f21a <_vfiprintf_r+0x852>
 800f1da:	ab11      	add	r3, sp, #68	@ 0x44
 800f1dc:	e6de      	b.n	800ef9c <_vfiprintf_r+0x5d4>
 800f1de:	9a02      	ldr	r2, [sp, #8]
 800f1e0:	9904      	ldr	r1, [sp, #16]
 800f1e2:	1a54      	subs	r4, r2, r1
 800f1e4:	2c00      	cmp	r4, #0
 800f1e6:	f77f aedd 	ble.w	800efa4 <_vfiprintf_r+0x5dc>
 800f1ea:	4d39      	ldr	r5, [pc, #228]	@ (800f2d0 <_vfiprintf_r+0x908>)
 800f1ec:	2610      	movs	r6, #16
 800f1ee:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800f1f2:	2c10      	cmp	r4, #16
 800f1f4:	f102 0201 	add.w	r2, r2, #1
 800f1f8:	601d      	str	r5, [r3, #0]
 800f1fa:	dc1d      	bgt.n	800f238 <_vfiprintf_r+0x870>
 800f1fc:	605c      	str	r4, [r3, #4]
 800f1fe:	2a07      	cmp	r2, #7
 800f200:	440c      	add	r4, r1
 800f202:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800f206:	f77f aecd 	ble.w	800efa4 <_vfiprintf_r+0x5dc>
 800f20a:	9800      	ldr	r0, [sp, #0]
 800f20c:	aa0e      	add	r2, sp, #56	@ 0x38
 800f20e:	4639      	mov	r1, r7
 800f210:	f7ff fba8 	bl	800e964 <__sprint_r>
 800f214:	2800      	cmp	r0, #0
 800f216:	f43f aec5 	beq.w	800efa4 <_vfiprintf_r+0x5dc>
 800f21a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f21c:	07d9      	lsls	r1, r3, #31
 800f21e:	d405      	bmi.n	800f22c <_vfiprintf_r+0x864>
 800f220:	89bb      	ldrh	r3, [r7, #12]
 800f222:	059a      	lsls	r2, r3, #22
 800f224:	d402      	bmi.n	800f22c <_vfiprintf_r+0x864>
 800f226:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f228:	f7fc f84b 	bl	800b2c2 <__retarget_lock_release_recursive>
 800f22c:	89bb      	ldrh	r3, [r7, #12]
 800f22e:	065b      	lsls	r3, r3, #25
 800f230:	f57f abfb 	bpl.w	800ea2a <_vfiprintf_r+0x62>
 800f234:	f7ff bbf6 	b.w	800ea24 <_vfiprintf_r+0x5c>
 800f238:	3110      	adds	r1, #16
 800f23a:	2a07      	cmp	r2, #7
 800f23c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f240:	605e      	str	r6, [r3, #4]
 800f242:	dc02      	bgt.n	800f24a <_vfiprintf_r+0x882>
 800f244:	3308      	adds	r3, #8
 800f246:	3c10      	subs	r4, #16
 800f248:	e7d1      	b.n	800f1ee <_vfiprintf_r+0x826>
 800f24a:	9800      	ldr	r0, [sp, #0]
 800f24c:	aa0e      	add	r2, sp, #56	@ 0x38
 800f24e:	4639      	mov	r1, r7
 800f250:	f7ff fb88 	bl	800e964 <__sprint_r>
 800f254:	2800      	cmp	r0, #0
 800f256:	d1e0      	bne.n	800f21a <_vfiprintf_r+0x852>
 800f258:	ab11      	add	r3, sp, #68	@ 0x44
 800f25a:	e7f4      	b.n	800f246 <_vfiprintf_r+0x87e>
 800f25c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f25e:	b913      	cbnz	r3, 800f266 <_vfiprintf_r+0x89e>
 800f260:	2300      	movs	r3, #0
 800f262:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f264:	e7d9      	b.n	800f21a <_vfiprintf_r+0x852>
 800f266:	9800      	ldr	r0, [sp, #0]
 800f268:	aa0e      	add	r2, sp, #56	@ 0x38
 800f26a:	4639      	mov	r1, r7
 800f26c:	f7ff fb7a 	bl	800e964 <__sprint_r>
 800f270:	2800      	cmp	r0, #0
 800f272:	d0f5      	beq.n	800f260 <_vfiprintf_r+0x898>
 800f274:	e7d1      	b.n	800f21a <_vfiprintf_r+0x852>
 800f276:	ea54 0205 	orrs.w	r2, r4, r5
 800f27a:	f8cd a010 	str.w	sl, [sp, #16]
 800f27e:	f43f ada6 	beq.w	800edce <_vfiprintf_r+0x406>
 800f282:	2b01      	cmp	r3, #1
 800f284:	f43f aedf 	beq.w	800f046 <_vfiprintf_r+0x67e>
 800f288:	2b02      	cmp	r3, #2
 800f28a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f28e:	f43f af28 	beq.w	800f0e2 <_vfiprintf_r+0x71a>
 800f292:	f004 0307 	and.w	r3, r4, #7
 800f296:	08e4      	lsrs	r4, r4, #3
 800f298:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f29c:	08ed      	lsrs	r5, r5, #3
 800f29e:	3330      	adds	r3, #48	@ 0x30
 800f2a0:	ea54 0105 	orrs.w	r1, r4, r5
 800f2a4:	464a      	mov	r2, r9
 800f2a6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f2aa:	d1f2      	bne.n	800f292 <_vfiprintf_r+0x8ca>
 800f2ac:	9904      	ldr	r1, [sp, #16]
 800f2ae:	07c8      	lsls	r0, r1, #31
 800f2b0:	d506      	bpl.n	800f2c0 <_vfiprintf_r+0x8f8>
 800f2b2:	2b30      	cmp	r3, #48	@ 0x30
 800f2b4:	d004      	beq.n	800f2c0 <_vfiprintf_r+0x8f8>
 800f2b6:	2330      	movs	r3, #48	@ 0x30
 800f2b8:	f809 3c01 	strb.w	r3, [r9, #-1]
 800f2bc:	f1a2 0902 	sub.w	r9, r2, #2
 800f2c0:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f2c2:	eba3 0309 	sub.w	r3, r3, r9
 800f2c6:	9c01      	ldr	r4, [sp, #4]
 800f2c8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	e5bb      	b.n	800ee48 <_vfiprintf_r+0x480>
 800f2d0:	0800fdd7 	.word	0x0800fdd7
 800f2d4:	0800fdc7 	.word	0x0800fdc7

0800f2d8 <__sbprintf>:
 800f2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2da:	461f      	mov	r7, r3
 800f2dc:	898b      	ldrh	r3, [r1, #12]
 800f2de:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800f2e2:	f023 0302 	bic.w	r3, r3, #2
 800f2e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f2ea:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800f2ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800f2ee:	89cb      	ldrh	r3, [r1, #14]
 800f2f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f2f4:	69cb      	ldr	r3, [r1, #28]
 800f2f6:	9307      	str	r3, [sp, #28]
 800f2f8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2fc:	ab1a      	add	r3, sp, #104	@ 0x68
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	9304      	str	r3, [sp, #16]
 800f302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f306:	4615      	mov	r5, r2
 800f308:	4606      	mov	r6, r0
 800f30a:	9302      	str	r3, [sp, #8]
 800f30c:	9305      	str	r3, [sp, #20]
 800f30e:	a816      	add	r0, sp, #88	@ 0x58
 800f310:	2300      	movs	r3, #0
 800f312:	460c      	mov	r4, r1
 800f314:	9306      	str	r3, [sp, #24]
 800f316:	f7fb ffd1 	bl	800b2bc <__retarget_lock_init_recursive>
 800f31a:	462a      	mov	r2, r5
 800f31c:	463b      	mov	r3, r7
 800f31e:	4669      	mov	r1, sp
 800f320:	4630      	mov	r0, r6
 800f322:	f7ff fb51 	bl	800e9c8 <_vfiprintf_r>
 800f326:	1e05      	subs	r5, r0, #0
 800f328:	db07      	blt.n	800f33a <__sbprintf+0x62>
 800f32a:	4669      	mov	r1, sp
 800f32c:	4630      	mov	r0, r6
 800f32e:	f7fd fdf3 	bl	800cf18 <_fflush_r>
 800f332:	2800      	cmp	r0, #0
 800f334:	bf18      	it	ne
 800f336:	f04f 35ff 	movne.w	r5, #4294967295
 800f33a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f33e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f340:	065b      	lsls	r3, r3, #25
 800f342:	bf42      	ittt	mi
 800f344:	89a3      	ldrhmi	r3, [r4, #12]
 800f346:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800f34a:	81a3      	strhmi	r3, [r4, #12]
 800f34c:	f7fb ffb7 	bl	800b2be <__retarget_lock_close_recursive>
 800f350:	4628      	mov	r0, r5
 800f352:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800f356:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f358 <__sfvwrite_r>:
 800f358:	6893      	ldr	r3, [r2, #8]
 800f35a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35e:	4606      	mov	r6, r0
 800f360:	460c      	mov	r4, r1
 800f362:	4691      	mov	r9, r2
 800f364:	b91b      	cbnz	r3, 800f36e <__sfvwrite_r+0x16>
 800f366:	2000      	movs	r0, #0
 800f368:	b003      	add	sp, #12
 800f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36e:	898b      	ldrh	r3, [r1, #12]
 800f370:	0718      	lsls	r0, r3, #28
 800f372:	d550      	bpl.n	800f416 <__sfvwrite_r+0xbe>
 800f374:	690b      	ldr	r3, [r1, #16]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d04d      	beq.n	800f416 <__sfvwrite_r+0xbe>
 800f37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f37e:	f8d9 8000 	ldr.w	r8, [r9]
 800f382:	f013 0702 	ands.w	r7, r3, #2
 800f386:	d16b      	bne.n	800f460 <__sfvwrite_r+0x108>
 800f388:	f013 0301 	ands.w	r3, r3, #1
 800f38c:	f000 809c 	beq.w	800f4c8 <__sfvwrite_r+0x170>
 800f390:	4638      	mov	r0, r7
 800f392:	46ba      	mov	sl, r7
 800f394:	46bb      	mov	fp, r7
 800f396:	f1bb 0f00 	cmp.w	fp, #0
 800f39a:	f000 8103 	beq.w	800f5a4 <__sfvwrite_r+0x24c>
 800f39e:	b950      	cbnz	r0, 800f3b6 <__sfvwrite_r+0x5e>
 800f3a0:	465a      	mov	r2, fp
 800f3a2:	210a      	movs	r1, #10
 800f3a4:	4650      	mov	r0, sl
 800f3a6:	f7f0 ff1b 	bl	80001e0 <memchr>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	f000 8100 	beq.w	800f5b0 <__sfvwrite_r+0x258>
 800f3b0:	3001      	adds	r0, #1
 800f3b2:	eba0 070a 	sub.w	r7, r0, sl
 800f3b6:	6820      	ldr	r0, [r4, #0]
 800f3b8:	6921      	ldr	r1, [r4, #16]
 800f3ba:	68a5      	ldr	r5, [r4, #8]
 800f3bc:	6963      	ldr	r3, [r4, #20]
 800f3be:	455f      	cmp	r7, fp
 800f3c0:	463a      	mov	r2, r7
 800f3c2:	bf28      	it	cs
 800f3c4:	465a      	movcs	r2, fp
 800f3c6:	4288      	cmp	r0, r1
 800f3c8:	f240 80f5 	bls.w	800f5b6 <__sfvwrite_r+0x25e>
 800f3cc:	441d      	add	r5, r3
 800f3ce:	42aa      	cmp	r2, r5
 800f3d0:	f340 80f1 	ble.w	800f5b6 <__sfvwrite_r+0x25e>
 800f3d4:	4651      	mov	r1, sl
 800f3d6:	462a      	mov	r2, r5
 800f3d8:	f7ff f867 	bl	800e4aa <memmove>
 800f3dc:	6823      	ldr	r3, [r4, #0]
 800f3de:	442b      	add	r3, r5
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	4621      	mov	r1, r4
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f7fd fd97 	bl	800cf18 <_fflush_r>
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	d167      	bne.n	800f4be <__sfvwrite_r+0x166>
 800f3ee:	1b7f      	subs	r7, r7, r5
 800f3f0:	f040 80f9 	bne.w	800f5e6 <__sfvwrite_r+0x28e>
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f7fd fd8e 	bl	800cf18 <_fflush_r>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d15e      	bne.n	800f4be <__sfvwrite_r+0x166>
 800f400:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f404:	1b5b      	subs	r3, r3, r5
 800f406:	44aa      	add	sl, r5
 800f408:	ebab 0b05 	sub.w	fp, fp, r5
 800f40c:	f8c9 3008 	str.w	r3, [r9, #8]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d1c0      	bne.n	800f396 <__sfvwrite_r+0x3e>
 800f414:	e7a7      	b.n	800f366 <__sfvwrite_r+0xe>
 800f416:	4621      	mov	r1, r4
 800f418:	4630      	mov	r0, r6
 800f41a:	f000 f8e9 	bl	800f5f0 <__swsetup_r>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d0ab      	beq.n	800f37a <__sfvwrite_r+0x22>
 800f422:	f04f 30ff 	mov.w	r0, #4294967295
 800f426:	e79f      	b.n	800f368 <__sfvwrite_r+0x10>
 800f428:	e9d8 a500 	ldrd	sl, r5, [r8]
 800f42c:	f108 0808 	add.w	r8, r8, #8
 800f430:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f434:	69e1      	ldr	r1, [r4, #28]
 800f436:	2d00      	cmp	r5, #0
 800f438:	d0f6      	beq.n	800f428 <__sfvwrite_r+0xd0>
 800f43a:	42bd      	cmp	r5, r7
 800f43c:	462b      	mov	r3, r5
 800f43e:	4652      	mov	r2, sl
 800f440:	bf28      	it	cs
 800f442:	463b      	movcs	r3, r7
 800f444:	4630      	mov	r0, r6
 800f446:	47d8      	blx	fp
 800f448:	2800      	cmp	r0, #0
 800f44a:	dd38      	ble.n	800f4be <__sfvwrite_r+0x166>
 800f44c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f450:	1a1b      	subs	r3, r3, r0
 800f452:	4482      	add	sl, r0
 800f454:	1a2d      	subs	r5, r5, r0
 800f456:	f8c9 3008 	str.w	r3, [r9, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e8      	bne.n	800f430 <__sfvwrite_r+0xd8>
 800f45e:	e782      	b.n	800f366 <__sfvwrite_r+0xe>
 800f460:	f04f 0a00 	mov.w	sl, #0
 800f464:	4f61      	ldr	r7, [pc, #388]	@ (800f5ec <__sfvwrite_r+0x294>)
 800f466:	4655      	mov	r5, sl
 800f468:	e7e2      	b.n	800f430 <__sfvwrite_r+0xd8>
 800f46a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800f46e:	f108 0808 	add.w	r8, r8, #8
 800f472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f476:	6820      	ldr	r0, [r4, #0]
 800f478:	68a2      	ldr	r2, [r4, #8]
 800f47a:	f1ba 0f00 	cmp.w	sl, #0
 800f47e:	d0f4      	beq.n	800f46a <__sfvwrite_r+0x112>
 800f480:	0599      	lsls	r1, r3, #22
 800f482:	d563      	bpl.n	800f54c <__sfvwrite_r+0x1f4>
 800f484:	4552      	cmp	r2, sl
 800f486:	d836      	bhi.n	800f4f6 <__sfvwrite_r+0x19e>
 800f488:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800f48c:	d033      	beq.n	800f4f6 <__sfvwrite_r+0x19e>
 800f48e:	6921      	ldr	r1, [r4, #16]
 800f490:	6965      	ldr	r5, [r4, #20]
 800f492:	eba0 0b01 	sub.w	fp, r0, r1
 800f496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f49a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f49e:	f10b 0201 	add.w	r2, fp, #1
 800f4a2:	106d      	asrs	r5, r5, #1
 800f4a4:	4452      	add	r2, sl
 800f4a6:	4295      	cmp	r5, r2
 800f4a8:	bf38      	it	cc
 800f4aa:	4615      	movcc	r5, r2
 800f4ac:	055b      	lsls	r3, r3, #21
 800f4ae:	d53d      	bpl.n	800f52c <__sfvwrite_r+0x1d4>
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	f7fc f82c 	bl	800b510 <_malloc_r>
 800f4b8:	b948      	cbnz	r0, 800f4ce <__sfvwrite_r+0x176>
 800f4ba:	230c      	movs	r3, #12
 800f4bc:	6033      	str	r3, [r6, #0]
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4c4:	81a3      	strh	r3, [r4, #12]
 800f4c6:	e7ac      	b.n	800f422 <__sfvwrite_r+0xca>
 800f4c8:	461f      	mov	r7, r3
 800f4ca:	469a      	mov	sl, r3
 800f4cc:	e7d1      	b.n	800f472 <__sfvwrite_r+0x11a>
 800f4ce:	465a      	mov	r2, fp
 800f4d0:	6921      	ldr	r1, [r4, #16]
 800f4d2:	9001      	str	r0, [sp, #4]
 800f4d4:	f7ff f80a 	bl	800e4ec <memcpy>
 800f4d8:	89a2      	ldrh	r2, [r4, #12]
 800f4da:	9b01      	ldr	r3, [sp, #4]
 800f4dc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800f4e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f4e4:	81a2      	strh	r2, [r4, #12]
 800f4e6:	6123      	str	r3, [r4, #16]
 800f4e8:	6165      	str	r5, [r4, #20]
 800f4ea:	445b      	add	r3, fp
 800f4ec:	eba5 050b 	sub.w	r5, r5, fp
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	4652      	mov	r2, sl
 800f4f4:	60a5      	str	r5, [r4, #8]
 800f4f6:	4552      	cmp	r2, sl
 800f4f8:	bf28      	it	cs
 800f4fa:	4652      	movcs	r2, sl
 800f4fc:	6820      	ldr	r0, [r4, #0]
 800f4fe:	9201      	str	r2, [sp, #4]
 800f500:	4639      	mov	r1, r7
 800f502:	f7fe ffd2 	bl	800e4aa <memmove>
 800f506:	68a3      	ldr	r3, [r4, #8]
 800f508:	9a01      	ldr	r2, [sp, #4]
 800f50a:	1a9b      	subs	r3, r3, r2
 800f50c:	60a3      	str	r3, [r4, #8]
 800f50e:	6823      	ldr	r3, [r4, #0]
 800f510:	4413      	add	r3, r2
 800f512:	4655      	mov	r5, sl
 800f514:	6023      	str	r3, [r4, #0]
 800f516:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f51a:	1b5b      	subs	r3, r3, r5
 800f51c:	442f      	add	r7, r5
 800f51e:	ebaa 0a05 	sub.w	sl, sl, r5
 800f522:	f8c9 3008 	str.w	r3, [r9, #8]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d1a3      	bne.n	800f472 <__sfvwrite_r+0x11a>
 800f52a:	e71c      	b.n	800f366 <__sfvwrite_r+0xe>
 800f52c:	462a      	mov	r2, r5
 800f52e:	4630      	mov	r0, r6
 800f530:	f7ff f850 	bl	800e5d4 <_realloc_r>
 800f534:	4603      	mov	r3, r0
 800f536:	2800      	cmp	r0, #0
 800f538:	d1d5      	bne.n	800f4e6 <__sfvwrite_r+0x18e>
 800f53a:	6921      	ldr	r1, [r4, #16]
 800f53c:	4630      	mov	r0, r6
 800f53e:	f7fb ff27 	bl	800b390 <_free_r>
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	e7b6      	b.n	800f4ba <__sfvwrite_r+0x162>
 800f54c:	6923      	ldr	r3, [r4, #16]
 800f54e:	4283      	cmp	r3, r0
 800f550:	d302      	bcc.n	800f558 <__sfvwrite_r+0x200>
 800f552:	6961      	ldr	r1, [r4, #20]
 800f554:	4551      	cmp	r1, sl
 800f556:	d915      	bls.n	800f584 <__sfvwrite_r+0x22c>
 800f558:	4552      	cmp	r2, sl
 800f55a:	bf28      	it	cs
 800f55c:	4652      	movcs	r2, sl
 800f55e:	4639      	mov	r1, r7
 800f560:	4615      	mov	r5, r2
 800f562:	f7fe ffa2 	bl	800e4aa <memmove>
 800f566:	68a3      	ldr	r3, [r4, #8]
 800f568:	6822      	ldr	r2, [r4, #0]
 800f56a:	1b5b      	subs	r3, r3, r5
 800f56c:	442a      	add	r2, r5
 800f56e:	60a3      	str	r3, [r4, #8]
 800f570:	6022      	str	r2, [r4, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d1cf      	bne.n	800f516 <__sfvwrite_r+0x1be>
 800f576:	4621      	mov	r1, r4
 800f578:	4630      	mov	r0, r6
 800f57a:	f7fd fccd 	bl	800cf18 <_fflush_r>
 800f57e:	2800      	cmp	r0, #0
 800f580:	d0c9      	beq.n	800f516 <__sfvwrite_r+0x1be>
 800f582:	e79c      	b.n	800f4be <__sfvwrite_r+0x166>
 800f584:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f588:	4553      	cmp	r3, sl
 800f58a:	bf28      	it	cs
 800f58c:	4653      	movcs	r3, sl
 800f58e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f590:	fb93 f3f1 	sdiv	r3, r3, r1
 800f594:	463a      	mov	r2, r7
 800f596:	434b      	muls	r3, r1
 800f598:	4630      	mov	r0, r6
 800f59a:	69e1      	ldr	r1, [r4, #28]
 800f59c:	47a8      	blx	r5
 800f59e:	1e05      	subs	r5, r0, #0
 800f5a0:	dcb9      	bgt.n	800f516 <__sfvwrite_r+0x1be>
 800f5a2:	e78c      	b.n	800f4be <__sfvwrite_r+0x166>
 800f5a4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	f108 0808 	add.w	r8, r8, #8
 800f5ae:	e6f2      	b.n	800f396 <__sfvwrite_r+0x3e>
 800f5b0:	f10b 0701 	add.w	r7, fp, #1
 800f5b4:	e6ff      	b.n	800f3b6 <__sfvwrite_r+0x5e>
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	dc08      	bgt.n	800f5cc <__sfvwrite_r+0x274>
 800f5ba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f5bc:	69e1      	ldr	r1, [r4, #28]
 800f5be:	4652      	mov	r2, sl
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	47a8      	blx	r5
 800f5c4:	1e05      	subs	r5, r0, #0
 800f5c6:	f73f af12 	bgt.w	800f3ee <__sfvwrite_r+0x96>
 800f5ca:	e778      	b.n	800f4be <__sfvwrite_r+0x166>
 800f5cc:	4651      	mov	r1, sl
 800f5ce:	9201      	str	r2, [sp, #4]
 800f5d0:	f7fe ff6b 	bl	800e4aa <memmove>
 800f5d4:	9a01      	ldr	r2, [sp, #4]
 800f5d6:	68a3      	ldr	r3, [r4, #8]
 800f5d8:	1a9b      	subs	r3, r3, r2
 800f5da:	60a3      	str	r3, [r4, #8]
 800f5dc:	6823      	ldr	r3, [r4, #0]
 800f5de:	4413      	add	r3, r2
 800f5e0:	6023      	str	r3, [r4, #0]
 800f5e2:	4615      	mov	r5, r2
 800f5e4:	e703      	b.n	800f3ee <__sfvwrite_r+0x96>
 800f5e6:	2001      	movs	r0, #1
 800f5e8:	e70a      	b.n	800f400 <__sfvwrite_r+0xa8>
 800f5ea:	bf00      	nop
 800f5ec:	7ffffc00 	.word	0x7ffffc00

0800f5f0 <__swsetup_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4b29      	ldr	r3, [pc, #164]	@ (800f698 <__swsetup_r+0xa8>)
 800f5f4:	4605      	mov	r5, r0
 800f5f6:	6818      	ldr	r0, [r3, #0]
 800f5f8:	460c      	mov	r4, r1
 800f5fa:	b118      	cbz	r0, 800f604 <__swsetup_r+0x14>
 800f5fc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f5fe:	b90b      	cbnz	r3, 800f604 <__swsetup_r+0x14>
 800f600:	f7fb fd4a 	bl	800b098 <__sinit>
 800f604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f608:	0719      	lsls	r1, r3, #28
 800f60a:	d422      	bmi.n	800f652 <__swsetup_r+0x62>
 800f60c:	06da      	lsls	r2, r3, #27
 800f60e:	d407      	bmi.n	800f620 <__swsetup_r+0x30>
 800f610:	2209      	movs	r2, #9
 800f612:	602a      	str	r2, [r5, #0]
 800f614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f618:	81a3      	strh	r3, [r4, #12]
 800f61a:	f04f 30ff 	mov.w	r0, #4294967295
 800f61e:	e033      	b.n	800f688 <__swsetup_r+0x98>
 800f620:	0758      	lsls	r0, r3, #29
 800f622:	d512      	bpl.n	800f64a <__swsetup_r+0x5a>
 800f624:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f626:	b141      	cbz	r1, 800f63a <__swsetup_r+0x4a>
 800f628:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f62c:	4299      	cmp	r1, r3
 800f62e:	d002      	beq.n	800f636 <__swsetup_r+0x46>
 800f630:	4628      	mov	r0, r5
 800f632:	f7fb fead 	bl	800b390 <_free_r>
 800f636:	2300      	movs	r3, #0
 800f638:	6323      	str	r3, [r4, #48]	@ 0x30
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f640:	81a3      	strh	r3, [r4, #12]
 800f642:	2300      	movs	r3, #0
 800f644:	6063      	str	r3, [r4, #4]
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	6023      	str	r3, [r4, #0]
 800f64a:	89a3      	ldrh	r3, [r4, #12]
 800f64c:	f043 0308 	orr.w	r3, r3, #8
 800f650:	81a3      	strh	r3, [r4, #12]
 800f652:	6923      	ldr	r3, [r4, #16]
 800f654:	b94b      	cbnz	r3, 800f66a <__swsetup_r+0x7a>
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f65c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f660:	d003      	beq.n	800f66a <__swsetup_r+0x7a>
 800f662:	4621      	mov	r1, r4
 800f664:	4628      	mov	r0, r5
 800f666:	f000 f8c9 	bl	800f7fc <__smakebuf_r>
 800f66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f66e:	f013 0201 	ands.w	r2, r3, #1
 800f672:	d00a      	beq.n	800f68a <__swsetup_r+0x9a>
 800f674:	2200      	movs	r2, #0
 800f676:	60a2      	str	r2, [r4, #8]
 800f678:	6962      	ldr	r2, [r4, #20]
 800f67a:	4252      	negs	r2, r2
 800f67c:	61a2      	str	r2, [r4, #24]
 800f67e:	6922      	ldr	r2, [r4, #16]
 800f680:	b942      	cbnz	r2, 800f694 <__swsetup_r+0xa4>
 800f682:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f686:	d1c5      	bne.n	800f614 <__swsetup_r+0x24>
 800f688:	bd38      	pop	{r3, r4, r5, pc}
 800f68a:	0799      	lsls	r1, r3, #30
 800f68c:	bf58      	it	pl
 800f68e:	6962      	ldrpl	r2, [r4, #20]
 800f690:	60a2      	str	r2, [r4, #8]
 800f692:	e7f4      	b.n	800f67e <__swsetup_r+0x8e>
 800f694:	2000      	movs	r0, #0
 800f696:	e7f7      	b.n	800f688 <__swsetup_r+0x98>
 800f698:	20000108 	.word	0x20000108

0800f69c <__fputwc>:
 800f69c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f6a0:	4680      	mov	r8, r0
 800f6a2:	460f      	mov	r7, r1
 800f6a4:	4614      	mov	r4, r2
 800f6a6:	f7fe ff1b 	bl	800e4e0 <__locale_mb_cur_max>
 800f6aa:	2801      	cmp	r0, #1
 800f6ac:	4605      	mov	r5, r0
 800f6ae:	d11b      	bne.n	800f6e8 <__fputwc+0x4c>
 800f6b0:	1e7b      	subs	r3, r7, #1
 800f6b2:	2bfe      	cmp	r3, #254	@ 0xfe
 800f6b4:	d818      	bhi.n	800f6e8 <__fputwc+0x4c>
 800f6b6:	f88d 7004 	strb.w	r7, [sp, #4]
 800f6ba:	2600      	movs	r6, #0
 800f6bc:	f10d 0904 	add.w	r9, sp, #4
 800f6c0:	42ae      	cmp	r6, r5
 800f6c2:	d021      	beq.n	800f708 <__fputwc+0x6c>
 800f6c4:	68a3      	ldr	r3, [r4, #8]
 800f6c6:	f816 1009 	ldrb.w	r1, [r6, r9]
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	60a3      	str	r3, [r4, #8]
 800f6d0:	da04      	bge.n	800f6dc <__fputwc+0x40>
 800f6d2:	69a2      	ldr	r2, [r4, #24]
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	db1b      	blt.n	800f710 <__fputwc+0x74>
 800f6d8:	290a      	cmp	r1, #10
 800f6da:	d019      	beq.n	800f710 <__fputwc+0x74>
 800f6dc:	6823      	ldr	r3, [r4, #0]
 800f6de:	1c5a      	adds	r2, r3, #1
 800f6e0:	6022      	str	r2, [r4, #0]
 800f6e2:	7019      	strb	r1, [r3, #0]
 800f6e4:	3601      	adds	r6, #1
 800f6e6:	e7eb      	b.n	800f6c0 <__fputwc+0x24>
 800f6e8:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800f6ec:	463a      	mov	r2, r7
 800f6ee:	a901      	add	r1, sp, #4
 800f6f0:	4640      	mov	r0, r8
 800f6f2:	f000 f845 	bl	800f780 <_wcrtomb_r>
 800f6f6:	1c43      	adds	r3, r0, #1
 800f6f8:	4605      	mov	r5, r0
 800f6fa:	d1de      	bne.n	800f6ba <__fputwc+0x1e>
 800f6fc:	89a3      	ldrh	r3, [r4, #12]
 800f6fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f702:	81a3      	strh	r3, [r4, #12]
 800f704:	f04f 37ff 	mov.w	r7, #4294967295
 800f708:	4638      	mov	r0, r7
 800f70a:	b003      	add	sp, #12
 800f70c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f710:	4622      	mov	r2, r4
 800f712:	4640      	mov	r0, r8
 800f714:	f000 f8ae 	bl	800f874 <__swbuf_r>
 800f718:	3001      	adds	r0, #1
 800f71a:	d1e3      	bne.n	800f6e4 <__fputwc+0x48>
 800f71c:	e7f2      	b.n	800f704 <__fputwc+0x68>

0800f71e <_fputwc_r>:
 800f71e:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800f720:	07db      	lsls	r3, r3, #31
 800f722:	b570      	push	{r4, r5, r6, lr}
 800f724:	4605      	mov	r5, r0
 800f726:	460e      	mov	r6, r1
 800f728:	4614      	mov	r4, r2
 800f72a:	d405      	bmi.n	800f738 <_fputwc_r+0x1a>
 800f72c:	8993      	ldrh	r3, [r2, #12]
 800f72e:	0598      	lsls	r0, r3, #22
 800f730:	d402      	bmi.n	800f738 <_fputwc_r+0x1a>
 800f732:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800f734:	f7fb fdc4 	bl	800b2c0 <__retarget_lock_acquire_recursive>
 800f738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f73c:	0499      	lsls	r1, r3, #18
 800f73e:	d406      	bmi.n	800f74e <_fputwc_r+0x30>
 800f740:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f744:	81a3      	strh	r3, [r4, #12]
 800f746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f748:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f74c:	6663      	str	r3, [r4, #100]	@ 0x64
 800f74e:	4622      	mov	r2, r4
 800f750:	4628      	mov	r0, r5
 800f752:	4631      	mov	r1, r6
 800f754:	f7ff ffa2 	bl	800f69c <__fputwc>
 800f758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f75a:	07da      	lsls	r2, r3, #31
 800f75c:	4605      	mov	r5, r0
 800f75e:	d405      	bmi.n	800f76c <_fputwc_r+0x4e>
 800f760:	89a3      	ldrh	r3, [r4, #12]
 800f762:	059b      	lsls	r3, r3, #22
 800f764:	d402      	bmi.n	800f76c <_fputwc_r+0x4e>
 800f766:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f768:	f7fb fdab 	bl	800b2c2 <__retarget_lock_release_recursive>
 800f76c:	4628      	mov	r0, r5
 800f76e:	bd70      	pop	{r4, r5, r6, pc}

0800f770 <abort>:
 800f770:	b508      	push	{r3, lr}
 800f772:	2006      	movs	r0, #6
 800f774:	f000 f8f0 	bl	800f958 <raise>
 800f778:	2001      	movs	r0, #1
 800f77a:	f7f2 f9bd 	bl	8001af8 <_exit>
	...

0800f780 <_wcrtomb_r>:
 800f780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f782:	4c09      	ldr	r4, [pc, #36]	@ (800f7a8 <_wcrtomb_r+0x28>)
 800f784:	b085      	sub	sp, #20
 800f786:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800f78a:	4605      	mov	r5, r0
 800f78c:	461e      	mov	r6, r3
 800f78e:	b909      	cbnz	r1, 800f794 <_wcrtomb_r+0x14>
 800f790:	460a      	mov	r2, r1
 800f792:	a901      	add	r1, sp, #4
 800f794:	47b8      	blx	r7
 800f796:	1c43      	adds	r3, r0, #1
 800f798:	bf01      	itttt	eq
 800f79a:	2300      	moveq	r3, #0
 800f79c:	6033      	streq	r3, [r6, #0]
 800f79e:	238a      	moveq	r3, #138	@ 0x8a
 800f7a0:	602b      	streq	r3, [r5, #0]
 800f7a2:	b005      	add	sp, #20
 800f7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	20000644 	.word	0x20000644

0800f7ac <__swhatbuf_r>:
 800f7ac:	b570      	push	{r4, r5, r6, lr}
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b4:	2900      	cmp	r1, #0
 800f7b6:	b096      	sub	sp, #88	@ 0x58
 800f7b8:	4615      	mov	r5, r2
 800f7ba:	461e      	mov	r6, r3
 800f7bc:	da07      	bge.n	800f7ce <__swhatbuf_r+0x22>
 800f7be:	89a1      	ldrh	r1, [r4, #12]
 800f7c0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800f7c4:	d117      	bne.n	800f7f6 <__swhatbuf_r+0x4a>
 800f7c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7ca:	4608      	mov	r0, r1
 800f7cc:	e00f      	b.n	800f7ee <__swhatbuf_r+0x42>
 800f7ce:	466a      	mov	r2, sp
 800f7d0:	f000 f8ca 	bl	800f968 <_fstat_r>
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	dbf2      	blt.n	800f7be <__swhatbuf_r+0x12>
 800f7d8:	9901      	ldr	r1, [sp, #4]
 800f7da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f7de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f7e2:	4259      	negs	r1, r3
 800f7e4:	4159      	adcs	r1, r3
 800f7e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f7ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7ee:	6031      	str	r1, [r6, #0]
 800f7f0:	602b      	str	r3, [r5, #0]
 800f7f2:	b016      	add	sp, #88	@ 0x58
 800f7f4:	bd70      	pop	{r4, r5, r6, pc}
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	2340      	movs	r3, #64	@ 0x40
 800f7fa:	e7e6      	b.n	800f7ca <__swhatbuf_r+0x1e>

0800f7fc <__smakebuf_r>:
 800f7fc:	898b      	ldrh	r3, [r1, #12]
 800f7fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f800:	079d      	lsls	r5, r3, #30
 800f802:	4606      	mov	r6, r0
 800f804:	460c      	mov	r4, r1
 800f806:	d507      	bpl.n	800f818 <__smakebuf_r+0x1c>
 800f808:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	6123      	str	r3, [r4, #16]
 800f810:	2301      	movs	r3, #1
 800f812:	6163      	str	r3, [r4, #20]
 800f814:	b003      	add	sp, #12
 800f816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f818:	ab01      	add	r3, sp, #4
 800f81a:	466a      	mov	r2, sp
 800f81c:	f7ff ffc6 	bl	800f7ac <__swhatbuf_r>
 800f820:	9f00      	ldr	r7, [sp, #0]
 800f822:	4605      	mov	r5, r0
 800f824:	4639      	mov	r1, r7
 800f826:	4630      	mov	r0, r6
 800f828:	f7fb fe72 	bl	800b510 <_malloc_r>
 800f82c:	b948      	cbnz	r0, 800f842 <__smakebuf_r+0x46>
 800f82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f832:	059a      	lsls	r2, r3, #22
 800f834:	d4ee      	bmi.n	800f814 <__smakebuf_r+0x18>
 800f836:	f023 0303 	bic.w	r3, r3, #3
 800f83a:	f043 0302 	orr.w	r3, r3, #2
 800f83e:	81a3      	strh	r3, [r4, #12]
 800f840:	e7e2      	b.n	800f808 <__smakebuf_r+0xc>
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	6020      	str	r0, [r4, #0]
 800f846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f84a:	81a3      	strh	r3, [r4, #12]
 800f84c:	9b01      	ldr	r3, [sp, #4]
 800f84e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f852:	b15b      	cbz	r3, 800f86c <__smakebuf_r+0x70>
 800f854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f858:	4630      	mov	r0, r6
 800f85a:	f000 f897 	bl	800f98c <_isatty_r>
 800f85e:	b128      	cbz	r0, 800f86c <__smakebuf_r+0x70>
 800f860:	89a3      	ldrh	r3, [r4, #12]
 800f862:	f023 0303 	bic.w	r3, r3, #3
 800f866:	f043 0301 	orr.w	r3, r3, #1
 800f86a:	81a3      	strh	r3, [r4, #12]
 800f86c:	89a3      	ldrh	r3, [r4, #12]
 800f86e:	431d      	orrs	r5, r3
 800f870:	81a5      	strh	r5, [r4, #12]
 800f872:	e7cf      	b.n	800f814 <__smakebuf_r+0x18>

0800f874 <__swbuf_r>:
 800f874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f876:	460e      	mov	r6, r1
 800f878:	4614      	mov	r4, r2
 800f87a:	4605      	mov	r5, r0
 800f87c:	b118      	cbz	r0, 800f886 <__swbuf_r+0x12>
 800f87e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f880:	b90b      	cbnz	r3, 800f886 <__swbuf_r+0x12>
 800f882:	f7fb fc09 	bl	800b098 <__sinit>
 800f886:	69a3      	ldr	r3, [r4, #24]
 800f888:	60a3      	str	r3, [r4, #8]
 800f88a:	89a3      	ldrh	r3, [r4, #12]
 800f88c:	0719      	lsls	r1, r3, #28
 800f88e:	d501      	bpl.n	800f894 <__swbuf_r+0x20>
 800f890:	6923      	ldr	r3, [r4, #16]
 800f892:	b943      	cbnz	r3, 800f8a6 <__swbuf_r+0x32>
 800f894:	4621      	mov	r1, r4
 800f896:	4628      	mov	r0, r5
 800f898:	f7ff feaa 	bl	800f5f0 <__swsetup_r>
 800f89c:	b118      	cbz	r0, 800f8a6 <__swbuf_r+0x32>
 800f89e:	f04f 37ff 	mov.w	r7, #4294967295
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8aa:	b2f6      	uxtb	r6, r6
 800f8ac:	049a      	lsls	r2, r3, #18
 800f8ae:	4637      	mov	r7, r6
 800f8b0:	d406      	bmi.n	800f8c0 <__swbuf_r+0x4c>
 800f8b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f8b6:	81a3      	strh	r3, [r4, #12]
 800f8b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f8be:	6663      	str	r3, [r4, #100]	@ 0x64
 800f8c0:	6823      	ldr	r3, [r4, #0]
 800f8c2:	6922      	ldr	r2, [r4, #16]
 800f8c4:	1a98      	subs	r0, r3, r2
 800f8c6:	6963      	ldr	r3, [r4, #20]
 800f8c8:	4283      	cmp	r3, r0
 800f8ca:	dc05      	bgt.n	800f8d8 <__swbuf_r+0x64>
 800f8cc:	4621      	mov	r1, r4
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f7fd fb22 	bl	800cf18 <_fflush_r>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d1e2      	bne.n	800f89e <__swbuf_r+0x2a>
 800f8d8:	68a3      	ldr	r3, [r4, #8]
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	60a3      	str	r3, [r4, #8]
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	1c5a      	adds	r2, r3, #1
 800f8e2:	6022      	str	r2, [r4, #0]
 800f8e4:	701e      	strb	r6, [r3, #0]
 800f8e6:	6962      	ldr	r2, [r4, #20]
 800f8e8:	1c43      	adds	r3, r0, #1
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d004      	beq.n	800f8f8 <__swbuf_r+0x84>
 800f8ee:	89a3      	ldrh	r3, [r4, #12]
 800f8f0:	07db      	lsls	r3, r3, #31
 800f8f2:	d5d6      	bpl.n	800f8a2 <__swbuf_r+0x2e>
 800f8f4:	2e0a      	cmp	r6, #10
 800f8f6:	d1d4      	bne.n	800f8a2 <__swbuf_r+0x2e>
 800f8f8:	4621      	mov	r1, r4
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	f7fd fb0c 	bl	800cf18 <_fflush_r>
 800f900:	2800      	cmp	r0, #0
 800f902:	d0ce      	beq.n	800f8a2 <__swbuf_r+0x2e>
 800f904:	e7cb      	b.n	800f89e <__swbuf_r+0x2a>

0800f906 <_raise_r>:
 800f906:	291f      	cmp	r1, #31
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	4605      	mov	r5, r0
 800f90c:	460c      	mov	r4, r1
 800f90e:	d904      	bls.n	800f91a <_raise_r+0x14>
 800f910:	2316      	movs	r3, #22
 800f912:	6003      	str	r3, [r0, #0]
 800f914:	f04f 30ff 	mov.w	r0, #4294967295
 800f918:	bd38      	pop	{r3, r4, r5, pc}
 800f91a:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800f91e:	b112      	cbz	r2, 800f926 <_raise_r+0x20>
 800f920:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f924:	b94b      	cbnz	r3, 800f93a <_raise_r+0x34>
 800f926:	4628      	mov	r0, r5
 800f928:	f000 f852 	bl	800f9d0 <_getpid_r>
 800f92c:	4622      	mov	r2, r4
 800f92e:	4601      	mov	r1, r0
 800f930:	4628      	mov	r0, r5
 800f932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f936:	f000 b839 	b.w	800f9ac <_kill_r>
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d00a      	beq.n	800f954 <_raise_r+0x4e>
 800f93e:	1c59      	adds	r1, r3, #1
 800f940:	d103      	bne.n	800f94a <_raise_r+0x44>
 800f942:	2316      	movs	r3, #22
 800f944:	6003      	str	r3, [r0, #0]
 800f946:	2001      	movs	r0, #1
 800f948:	e7e6      	b.n	800f918 <_raise_r+0x12>
 800f94a:	2100      	movs	r1, #0
 800f94c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f950:	4620      	mov	r0, r4
 800f952:	4798      	blx	r3
 800f954:	2000      	movs	r0, #0
 800f956:	e7df      	b.n	800f918 <_raise_r+0x12>

0800f958 <raise>:
 800f958:	4b02      	ldr	r3, [pc, #8]	@ (800f964 <raise+0xc>)
 800f95a:	4601      	mov	r1, r0
 800f95c:	6818      	ldr	r0, [r3, #0]
 800f95e:	f7ff bfd2 	b.w	800f906 <_raise_r>
 800f962:	bf00      	nop
 800f964:	20000108 	.word	0x20000108

0800f968 <_fstat_r>:
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	4d07      	ldr	r5, [pc, #28]	@ (800f988 <_fstat_r+0x20>)
 800f96c:	2300      	movs	r3, #0
 800f96e:	4604      	mov	r4, r0
 800f970:	4608      	mov	r0, r1
 800f972:	4611      	mov	r1, r2
 800f974:	602b      	str	r3, [r5, #0]
 800f976:	f7f2 f90f 	bl	8001b98 <_fstat>
 800f97a:	1c43      	adds	r3, r0, #1
 800f97c:	d102      	bne.n	800f984 <_fstat_r+0x1c>
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	b103      	cbz	r3, 800f984 <_fstat_r+0x1c>
 800f982:	6023      	str	r3, [r4, #0]
 800f984:	bd38      	pop	{r3, r4, r5, pc}
 800f986:	bf00      	nop
 800f988:	200026a8 	.word	0x200026a8

0800f98c <_isatty_r>:
 800f98c:	b538      	push	{r3, r4, r5, lr}
 800f98e:	4d06      	ldr	r5, [pc, #24]	@ (800f9a8 <_isatty_r+0x1c>)
 800f990:	2300      	movs	r3, #0
 800f992:	4604      	mov	r4, r0
 800f994:	4608      	mov	r0, r1
 800f996:	602b      	str	r3, [r5, #0]
 800f998:	f7f2 f90e 	bl	8001bb8 <_isatty>
 800f99c:	1c43      	adds	r3, r0, #1
 800f99e:	d102      	bne.n	800f9a6 <_isatty_r+0x1a>
 800f9a0:	682b      	ldr	r3, [r5, #0]
 800f9a2:	b103      	cbz	r3, 800f9a6 <_isatty_r+0x1a>
 800f9a4:	6023      	str	r3, [r4, #0]
 800f9a6:	bd38      	pop	{r3, r4, r5, pc}
 800f9a8:	200026a8 	.word	0x200026a8

0800f9ac <_kill_r>:
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	4d07      	ldr	r5, [pc, #28]	@ (800f9cc <_kill_r+0x20>)
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	4608      	mov	r0, r1
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	602b      	str	r3, [r5, #0]
 800f9ba:	f7f2 f88d 	bl	8001ad8 <_kill>
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	d102      	bne.n	800f9c8 <_kill_r+0x1c>
 800f9c2:	682b      	ldr	r3, [r5, #0]
 800f9c4:	b103      	cbz	r3, 800f9c8 <_kill_r+0x1c>
 800f9c6:	6023      	str	r3, [r4, #0]
 800f9c8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ca:	bf00      	nop
 800f9cc:	200026a8 	.word	0x200026a8

0800f9d0 <_getpid_r>:
 800f9d0:	f7f2 b87a 	b.w	8001ac8 <_getpid>

0800f9d4 <_init>:
 800f9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d6:	bf00      	nop
 800f9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9da:	bc08      	pop	{r3}
 800f9dc:	469e      	mov	lr, r3
 800f9de:	4770      	bx	lr

0800f9e0 <_fini>:
 800f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e2:	bf00      	nop
 800f9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9e6:	bc08      	pop	{r3}
 800f9e8:	469e      	mov	lr, r3
 800f9ea:	4770      	bx	lr
